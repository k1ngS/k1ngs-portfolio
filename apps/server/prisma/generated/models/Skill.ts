/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck
/**
 * This file exports the `Skill` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import type * as runtime from "@prisma/client/runtime/library";
import type * as $Enums from "../enums";
import type * as Prisma from "../internal/prismaNamespace";

/**
 * Model Skill
 *
 */
export type SkillModel =
	runtime.Types.Result.DefaultSelection<Prisma.$SkillPayload>;

export type AggregateSkill = {
	_count: SkillCountAggregateOutputType | null;
	_avg: SkillAvgAggregateOutputType | null;
	_sum: SkillSumAggregateOutputType | null;
	_min: SkillMinAggregateOutputType | null;
	_max: SkillMaxAggregateOutputType | null;
};

export type SkillAvgAggregateOutputType = {
	level: number | null;
	yearsOfExp: number | null;
	order: number | null;
};

export type SkillSumAggregateOutputType = {
	level: number | null;
	yearsOfExp: number | null;
	order: number | null;
};

export type SkillMinAggregateOutputType = {
	id: string | null;
	name: string | null;
	level: number | null;
	category: $Enums.SkillCategory | null;
	description: string | null;
	yearsOfExp: number | null;
	certified: boolean | null;
	isNew: boolean | null;
	order: number | null;
	technologyId: string | null;
};

export type SkillMaxAggregateOutputType = {
	id: string | null;
	name: string | null;
	level: number | null;
	category: $Enums.SkillCategory | null;
	description: string | null;
	yearsOfExp: number | null;
	certified: boolean | null;
	isNew: boolean | null;
	order: number | null;
	technologyId: string | null;
};

export type SkillCountAggregateOutputType = {
	id: number;
	name: number;
	level: number;
	category: number;
	description: number;
	yearsOfExp: number;
	certified: number;
	isNew: number;
	order: number;
	technologyId: number;
	_all: number;
};

export type SkillAvgAggregateInputType = {
	level?: true;
	yearsOfExp?: true;
	order?: true;
};

export type SkillSumAggregateInputType = {
	level?: true;
	yearsOfExp?: true;
	order?: true;
};

export type SkillMinAggregateInputType = {
	id?: true;
	name?: true;
	level?: true;
	category?: true;
	description?: true;
	yearsOfExp?: true;
	certified?: true;
	isNew?: true;
	order?: true;
	technologyId?: true;
};

export type SkillMaxAggregateInputType = {
	id?: true;
	name?: true;
	level?: true;
	category?: true;
	description?: true;
	yearsOfExp?: true;
	certified?: true;
	isNew?: true;
	order?: true;
	technologyId?: true;
};

export type SkillCountAggregateInputType = {
	id?: true;
	name?: true;
	level?: true;
	category?: true;
	description?: true;
	yearsOfExp?: true;
	certified?: true;
	isNew?: true;
	order?: true;
	technologyId?: true;
	_all?: true;
};

export type SkillAggregateArgs<
	_ExtArgs extends
		runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
	/**
	 * Filter which Skill to aggregate.
	 */
	where?: Prisma.SkillWhereInput;
	/**
	 * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
	 *
	 * Determine the order of Skills to fetch.
	 */
	orderBy?:
		| Prisma.SkillOrderByWithRelationInput
		| Prisma.SkillOrderByWithRelationInput[];
	/**
	 * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
	 *
	 * Sets the start position
	 */
	cursor?: Prisma.SkillWhereUniqueInput;
	/**
	 * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
	 *
	 * Take `Â±n` Skills from the position of the cursor.
	 */
	take?: number;
	/**
	 * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
	 *
	 * Skip the first `n` Skills.
	 */
	skip?: number;
	/**
	 * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
	 *
	 * Count returned Skills
	 **/
	_count?: true | SkillCountAggregateInputType;
	/**
	 * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
	 *
	 * Select which fields to average
	 **/
	_avg?: SkillAvgAggregateInputType;
	/**
	 * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
	 *
	 * Select which fields to sum
	 **/
	_sum?: SkillSumAggregateInputType;
	/**
	 * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
	 *
	 * Select which fields to find the minimum value
	 **/
	_min?: SkillMinAggregateInputType;
	/**
	 * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
	 *
	 * Select which fields to find the maximum value
	 **/
	_max?: SkillMaxAggregateInputType;
};

export type GetSkillAggregateType<T extends SkillAggregateArgs> = {
	[P in keyof T & keyof AggregateSkill]: P extends "_count" | "count"
		? T[P] extends true
			? number
			: Prisma.GetScalarType<T[P], AggregateSkill[P]>
		: Prisma.GetScalarType<T[P], AggregateSkill[P]>;
};

export type SkillGroupByArgs<
	_ExtArgs extends
		runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
	where?: Prisma.SkillWhereInput;
	orderBy?:
		| Prisma.SkillOrderByWithAggregationInput
		| Prisma.SkillOrderByWithAggregationInput[];
	by: Prisma.SkillScalarFieldEnum[] | Prisma.SkillScalarFieldEnum;
	having?: Prisma.SkillScalarWhereWithAggregatesInput;
	take?: number;
	skip?: number;
	_count?: SkillCountAggregateInputType | true;
	_avg?: SkillAvgAggregateInputType;
	_sum?: SkillSumAggregateInputType;
	_min?: SkillMinAggregateInputType;
	_max?: SkillMaxAggregateInputType;
};

export type SkillGroupByOutputType = {
	id: string;
	name: string;
	level: number;
	category: $Enums.SkillCategory;
	description: string | null;
	yearsOfExp: number;
	certified: boolean;
	isNew: boolean;
	order: number;
	technologyId: string | null;
	_count: SkillCountAggregateOutputType | null;
	_avg: SkillAvgAggregateOutputType | null;
	_sum: SkillSumAggregateOutputType | null;
	_min: SkillMinAggregateOutputType | null;
	_max: SkillMaxAggregateOutputType | null;
};

type GetSkillGroupByPayload<T extends SkillGroupByArgs> = Prisma.PrismaPromise<
	Array<
		Prisma.PickEnumerable<SkillGroupByOutputType, T["by"]> & {
			[P in keyof T & keyof SkillGroupByOutputType]: P extends "_count"
				? T[P] extends boolean
					? number
					: Prisma.GetScalarType<T[P], SkillGroupByOutputType[P]>
				: Prisma.GetScalarType<T[P], SkillGroupByOutputType[P]>;
		}
	>
>;

export type SkillWhereInput = {
	AND?: Prisma.SkillWhereInput | Prisma.SkillWhereInput[];
	OR?: Prisma.SkillWhereInput[];
	NOT?: Prisma.SkillWhereInput | Prisma.SkillWhereInput[];
	id?: Prisma.StringFilter<"Skill"> | string;
	name?: Prisma.StringFilter<"Skill"> | string;
	level?: Prisma.IntFilter<"Skill"> | number;
	category?: Prisma.EnumSkillCategoryFilter<"Skill"> | $Enums.SkillCategory;
	description?: Prisma.StringNullableFilter<"Skill"> | string | null;
	yearsOfExp?: Prisma.IntFilter<"Skill"> | number;
	certified?: Prisma.BoolFilter<"Skill"> | boolean;
	isNew?: Prisma.BoolFilter<"Skill"> | boolean;
	order?: Prisma.IntFilter<"Skill"> | number;
	technologyId?: Prisma.StringNullableFilter<"Skill"> | string | null;
	technology?: Prisma.XOR<
		Prisma.TechnologyNullableScalarRelationFilter,
		Prisma.TechnologyWhereInput
	> | null;
	translations?: Prisma.SkillTranslationListRelationFilter;
};

export type SkillOrderByWithRelationInput = {
	id?: Prisma.SortOrder;
	name?: Prisma.SortOrder;
	level?: Prisma.SortOrder;
	category?: Prisma.SortOrder;
	description?: Prisma.SortOrderInput | Prisma.SortOrder;
	yearsOfExp?: Prisma.SortOrder;
	certified?: Prisma.SortOrder;
	isNew?: Prisma.SortOrder;
	order?: Prisma.SortOrder;
	technologyId?: Prisma.SortOrderInput | Prisma.SortOrder;
	technology?: Prisma.TechnologyOrderByWithRelationInput;
	translations?: Prisma.SkillTranslationOrderByRelationAggregateInput;
};

export type SkillWhereUniqueInput = Prisma.AtLeast<
	{
		id?: string;
		AND?: Prisma.SkillWhereInput | Prisma.SkillWhereInput[];
		OR?: Prisma.SkillWhereInput[];
		NOT?: Prisma.SkillWhereInput | Prisma.SkillWhereInput[];
		name?: Prisma.StringFilter<"Skill"> | string;
		level?: Prisma.IntFilter<"Skill"> | number;
		category?: Prisma.EnumSkillCategoryFilter<"Skill"> | $Enums.SkillCategory;
		description?: Prisma.StringNullableFilter<"Skill"> | string | null;
		yearsOfExp?: Prisma.IntFilter<"Skill"> | number;
		certified?: Prisma.BoolFilter<"Skill"> | boolean;
		isNew?: Prisma.BoolFilter<"Skill"> | boolean;
		order?: Prisma.IntFilter<"Skill"> | number;
		technologyId?: Prisma.StringNullableFilter<"Skill"> | string | null;
		technology?: Prisma.XOR<
			Prisma.TechnologyNullableScalarRelationFilter,
			Prisma.TechnologyWhereInput
		> | null;
		translations?: Prisma.SkillTranslationListRelationFilter;
	},
	"id"
>;

export type SkillOrderByWithAggregationInput = {
	id?: Prisma.SortOrder;
	name?: Prisma.SortOrder;
	level?: Prisma.SortOrder;
	category?: Prisma.SortOrder;
	description?: Prisma.SortOrderInput | Prisma.SortOrder;
	yearsOfExp?: Prisma.SortOrder;
	certified?: Prisma.SortOrder;
	isNew?: Prisma.SortOrder;
	order?: Prisma.SortOrder;
	technologyId?: Prisma.SortOrderInput | Prisma.SortOrder;
	_count?: Prisma.SkillCountOrderByAggregateInput;
	_avg?: Prisma.SkillAvgOrderByAggregateInput;
	_max?: Prisma.SkillMaxOrderByAggregateInput;
	_min?: Prisma.SkillMinOrderByAggregateInput;
	_sum?: Prisma.SkillSumOrderByAggregateInput;
};

export type SkillScalarWhereWithAggregatesInput = {
	AND?:
		| Prisma.SkillScalarWhereWithAggregatesInput
		| Prisma.SkillScalarWhereWithAggregatesInput[];
	OR?: Prisma.SkillScalarWhereWithAggregatesInput[];
	NOT?:
		| Prisma.SkillScalarWhereWithAggregatesInput
		| Prisma.SkillScalarWhereWithAggregatesInput[];
	id?: Prisma.StringWithAggregatesFilter<"Skill"> | string;
	name?: Prisma.StringWithAggregatesFilter<"Skill"> | string;
	level?: Prisma.IntWithAggregatesFilter<"Skill"> | number;
	category?:
		| Prisma.EnumSkillCategoryWithAggregatesFilter<"Skill">
		| $Enums.SkillCategory;
	description?:
		| Prisma.StringNullableWithAggregatesFilter<"Skill">
		| string
		| null;
	yearsOfExp?: Prisma.IntWithAggregatesFilter<"Skill"> | number;
	certified?: Prisma.BoolWithAggregatesFilter<"Skill"> | boolean;
	isNew?: Prisma.BoolWithAggregatesFilter<"Skill"> | boolean;
	order?: Prisma.IntWithAggregatesFilter<"Skill"> | number;
	technologyId?:
		| Prisma.StringNullableWithAggregatesFilter<"Skill">
		| string
		| null;
};

export type SkillCreateInput = {
	id?: string;
	name: string;
	level: number;
	category: $Enums.SkillCategory;
	description?: string | null;
	yearsOfExp?: number;
	certified?: boolean;
	isNew?: boolean;
	order?: number;
	technology?: Prisma.TechnologyCreateNestedOneWithoutSkillsInput;
	translations?: Prisma.SkillTranslationCreateNestedManyWithoutSkillInput;
};

export type SkillUncheckedCreateInput = {
	id?: string;
	name: string;
	level: number;
	category: $Enums.SkillCategory;
	description?: string | null;
	yearsOfExp?: number;
	certified?: boolean;
	isNew?: boolean;
	order?: number;
	technologyId?: string | null;
	translations?: Prisma.SkillTranslationUncheckedCreateNestedManyWithoutSkillInput;
};

export type SkillUpdateInput = {
	id?: Prisma.StringFieldUpdateOperationsInput | string;
	name?: Prisma.StringFieldUpdateOperationsInput | string;
	level?: Prisma.IntFieldUpdateOperationsInput | number;
	category?:
		| Prisma.EnumSkillCategoryFieldUpdateOperationsInput
		| $Enums.SkillCategory;
	description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
	yearsOfExp?: Prisma.IntFieldUpdateOperationsInput | number;
	certified?: Prisma.BoolFieldUpdateOperationsInput | boolean;
	isNew?: Prisma.BoolFieldUpdateOperationsInput | boolean;
	order?: Prisma.IntFieldUpdateOperationsInput | number;
	technology?: Prisma.TechnologyUpdateOneWithoutSkillsNestedInput;
	translations?: Prisma.SkillTranslationUpdateManyWithoutSkillNestedInput;
};

export type SkillUncheckedUpdateInput = {
	id?: Prisma.StringFieldUpdateOperationsInput | string;
	name?: Prisma.StringFieldUpdateOperationsInput | string;
	level?: Prisma.IntFieldUpdateOperationsInput | number;
	category?:
		| Prisma.EnumSkillCategoryFieldUpdateOperationsInput
		| $Enums.SkillCategory;
	description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
	yearsOfExp?: Prisma.IntFieldUpdateOperationsInput | number;
	certified?: Prisma.BoolFieldUpdateOperationsInput | boolean;
	isNew?: Prisma.BoolFieldUpdateOperationsInput | boolean;
	order?: Prisma.IntFieldUpdateOperationsInput | number;
	technologyId?:
		| Prisma.NullableStringFieldUpdateOperationsInput
		| string
		| null;
	translations?: Prisma.SkillTranslationUncheckedUpdateManyWithoutSkillNestedInput;
};

export type SkillCreateManyInput = {
	id?: string;
	name: string;
	level: number;
	category: $Enums.SkillCategory;
	description?: string | null;
	yearsOfExp?: number;
	certified?: boolean;
	isNew?: boolean;
	order?: number;
	technologyId?: string | null;
};

export type SkillUpdateManyMutationInput = {
	id?: Prisma.StringFieldUpdateOperationsInput | string;
	name?: Prisma.StringFieldUpdateOperationsInput | string;
	level?: Prisma.IntFieldUpdateOperationsInput | number;
	category?:
		| Prisma.EnumSkillCategoryFieldUpdateOperationsInput
		| $Enums.SkillCategory;
	description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
	yearsOfExp?: Prisma.IntFieldUpdateOperationsInput | number;
	certified?: Prisma.BoolFieldUpdateOperationsInput | boolean;
	isNew?: Prisma.BoolFieldUpdateOperationsInput | boolean;
	order?: Prisma.IntFieldUpdateOperationsInput | number;
};

export type SkillUncheckedUpdateManyInput = {
	id?: Prisma.StringFieldUpdateOperationsInput | string;
	name?: Prisma.StringFieldUpdateOperationsInput | string;
	level?: Prisma.IntFieldUpdateOperationsInput | number;
	category?:
		| Prisma.EnumSkillCategoryFieldUpdateOperationsInput
		| $Enums.SkillCategory;
	description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
	yearsOfExp?: Prisma.IntFieldUpdateOperationsInput | number;
	certified?: Prisma.BoolFieldUpdateOperationsInput | boolean;
	isNew?: Prisma.BoolFieldUpdateOperationsInput | boolean;
	order?: Prisma.IntFieldUpdateOperationsInput | number;
	technologyId?:
		| Prisma.NullableStringFieldUpdateOperationsInput
		| string
		| null;
};

export type SkillListRelationFilter = {
	every?: Prisma.SkillWhereInput;
	some?: Prisma.SkillWhereInput;
	none?: Prisma.SkillWhereInput;
};

export type SkillOrderByRelationAggregateInput = {
	_count?: Prisma.SortOrder;
};

export type SkillCountOrderByAggregateInput = {
	id?: Prisma.SortOrder;
	name?: Prisma.SortOrder;
	level?: Prisma.SortOrder;
	category?: Prisma.SortOrder;
	description?: Prisma.SortOrder;
	yearsOfExp?: Prisma.SortOrder;
	certified?: Prisma.SortOrder;
	isNew?: Prisma.SortOrder;
	order?: Prisma.SortOrder;
	technologyId?: Prisma.SortOrder;
};

export type SkillAvgOrderByAggregateInput = {
	level?: Prisma.SortOrder;
	yearsOfExp?: Prisma.SortOrder;
	order?: Prisma.SortOrder;
};

export type SkillMaxOrderByAggregateInput = {
	id?: Prisma.SortOrder;
	name?: Prisma.SortOrder;
	level?: Prisma.SortOrder;
	category?: Prisma.SortOrder;
	description?: Prisma.SortOrder;
	yearsOfExp?: Prisma.SortOrder;
	certified?: Prisma.SortOrder;
	isNew?: Prisma.SortOrder;
	order?: Prisma.SortOrder;
	technologyId?: Prisma.SortOrder;
};

export type SkillMinOrderByAggregateInput = {
	id?: Prisma.SortOrder;
	name?: Prisma.SortOrder;
	level?: Prisma.SortOrder;
	category?: Prisma.SortOrder;
	description?: Prisma.SortOrder;
	yearsOfExp?: Prisma.SortOrder;
	certified?: Prisma.SortOrder;
	isNew?: Prisma.SortOrder;
	order?: Prisma.SortOrder;
	technologyId?: Prisma.SortOrder;
};

export type SkillSumOrderByAggregateInput = {
	level?: Prisma.SortOrder;
	yearsOfExp?: Prisma.SortOrder;
	order?: Prisma.SortOrder;
};

export type SkillScalarRelationFilter = {
	is?: Prisma.SkillWhereInput;
	isNot?: Prisma.SkillWhereInput;
};

export type SkillCreateNestedManyWithoutTechnologyInput = {
	create?:
		| Prisma.XOR<
				Prisma.SkillCreateWithoutTechnologyInput,
				Prisma.SkillUncheckedCreateWithoutTechnologyInput
		  >
		| Prisma.SkillCreateWithoutTechnologyInput[]
		| Prisma.SkillUncheckedCreateWithoutTechnologyInput[];
	connectOrCreate?:
		| Prisma.SkillCreateOrConnectWithoutTechnologyInput
		| Prisma.SkillCreateOrConnectWithoutTechnologyInput[];
	createMany?: Prisma.SkillCreateManyTechnologyInputEnvelope;
	connect?: Prisma.SkillWhereUniqueInput | Prisma.SkillWhereUniqueInput[];
};

export type SkillUncheckedCreateNestedManyWithoutTechnologyInput = {
	create?:
		| Prisma.XOR<
				Prisma.SkillCreateWithoutTechnologyInput,
				Prisma.SkillUncheckedCreateWithoutTechnologyInput
		  >
		| Prisma.SkillCreateWithoutTechnologyInput[]
		| Prisma.SkillUncheckedCreateWithoutTechnologyInput[];
	connectOrCreate?:
		| Prisma.SkillCreateOrConnectWithoutTechnologyInput
		| Prisma.SkillCreateOrConnectWithoutTechnologyInput[];
	createMany?: Prisma.SkillCreateManyTechnologyInputEnvelope;
	connect?: Prisma.SkillWhereUniqueInput | Prisma.SkillWhereUniqueInput[];
};

export type SkillUpdateManyWithoutTechnologyNestedInput = {
	create?:
		| Prisma.XOR<
				Prisma.SkillCreateWithoutTechnologyInput,
				Prisma.SkillUncheckedCreateWithoutTechnologyInput
		  >
		| Prisma.SkillCreateWithoutTechnologyInput[]
		| Prisma.SkillUncheckedCreateWithoutTechnologyInput[];
	connectOrCreate?:
		| Prisma.SkillCreateOrConnectWithoutTechnologyInput
		| Prisma.SkillCreateOrConnectWithoutTechnologyInput[];
	upsert?:
		| Prisma.SkillUpsertWithWhereUniqueWithoutTechnologyInput
		| Prisma.SkillUpsertWithWhereUniqueWithoutTechnologyInput[];
	createMany?: Prisma.SkillCreateManyTechnologyInputEnvelope;
	set?: Prisma.SkillWhereUniqueInput | Prisma.SkillWhereUniqueInput[];
	disconnect?: Prisma.SkillWhereUniqueInput | Prisma.SkillWhereUniqueInput[];
	delete?: Prisma.SkillWhereUniqueInput | Prisma.SkillWhereUniqueInput[];
	connect?: Prisma.SkillWhereUniqueInput | Prisma.SkillWhereUniqueInput[];
	update?:
		| Prisma.SkillUpdateWithWhereUniqueWithoutTechnologyInput
		| Prisma.SkillUpdateWithWhereUniqueWithoutTechnologyInput[];
	updateMany?:
		| Prisma.SkillUpdateManyWithWhereWithoutTechnologyInput
		| Prisma.SkillUpdateManyWithWhereWithoutTechnologyInput[];
	deleteMany?: Prisma.SkillScalarWhereInput | Prisma.SkillScalarWhereInput[];
};

export type SkillUncheckedUpdateManyWithoutTechnologyNestedInput = {
	create?:
		| Prisma.XOR<
				Prisma.SkillCreateWithoutTechnologyInput,
				Prisma.SkillUncheckedCreateWithoutTechnologyInput
		  >
		| Prisma.SkillCreateWithoutTechnologyInput[]
		| Prisma.SkillUncheckedCreateWithoutTechnologyInput[];
	connectOrCreate?:
		| Prisma.SkillCreateOrConnectWithoutTechnologyInput
		| Prisma.SkillCreateOrConnectWithoutTechnologyInput[];
	upsert?:
		| Prisma.SkillUpsertWithWhereUniqueWithoutTechnologyInput
		| Prisma.SkillUpsertWithWhereUniqueWithoutTechnologyInput[];
	createMany?: Prisma.SkillCreateManyTechnologyInputEnvelope;
	set?: Prisma.SkillWhereUniqueInput | Prisma.SkillWhereUniqueInput[];
	disconnect?: Prisma.SkillWhereUniqueInput | Prisma.SkillWhereUniqueInput[];
	delete?: Prisma.SkillWhereUniqueInput | Prisma.SkillWhereUniqueInput[];
	connect?: Prisma.SkillWhereUniqueInput | Prisma.SkillWhereUniqueInput[];
	update?:
		| Prisma.SkillUpdateWithWhereUniqueWithoutTechnologyInput
		| Prisma.SkillUpdateWithWhereUniqueWithoutTechnologyInput[];
	updateMany?:
		| Prisma.SkillUpdateManyWithWhereWithoutTechnologyInput
		| Prisma.SkillUpdateManyWithWhereWithoutTechnologyInput[];
	deleteMany?: Prisma.SkillScalarWhereInput | Prisma.SkillScalarWhereInput[];
};

export type EnumSkillCategoryFieldUpdateOperationsInput = {
	set?: $Enums.SkillCategory;
};

export type SkillCreateNestedOneWithoutTranslationsInput = {
	create?: Prisma.XOR<
		Prisma.SkillCreateWithoutTranslationsInput,
		Prisma.SkillUncheckedCreateWithoutTranslationsInput
	>;
	connectOrCreate?: Prisma.SkillCreateOrConnectWithoutTranslationsInput;
	connect?: Prisma.SkillWhereUniqueInput;
};

export type SkillUpdateOneRequiredWithoutTranslationsNestedInput = {
	create?: Prisma.XOR<
		Prisma.SkillCreateWithoutTranslationsInput,
		Prisma.SkillUncheckedCreateWithoutTranslationsInput
	>;
	connectOrCreate?: Prisma.SkillCreateOrConnectWithoutTranslationsInput;
	upsert?: Prisma.SkillUpsertWithoutTranslationsInput;
	connect?: Prisma.SkillWhereUniqueInput;
	update?: Prisma.XOR<
		Prisma.XOR<
			Prisma.SkillUpdateToOneWithWhereWithoutTranslationsInput,
			Prisma.SkillUpdateWithoutTranslationsInput
		>,
		Prisma.SkillUncheckedUpdateWithoutTranslationsInput
	>;
};

export type SkillCreateWithoutTechnologyInput = {
	id?: string;
	name: string;
	level: number;
	category: $Enums.SkillCategory;
	description?: string | null;
	yearsOfExp?: number;
	certified?: boolean;
	isNew?: boolean;
	order?: number;
	translations?: Prisma.SkillTranslationCreateNestedManyWithoutSkillInput;
};

export type SkillUncheckedCreateWithoutTechnologyInput = {
	id?: string;
	name: string;
	level: number;
	category: $Enums.SkillCategory;
	description?: string | null;
	yearsOfExp?: number;
	certified?: boolean;
	isNew?: boolean;
	order?: number;
	translations?: Prisma.SkillTranslationUncheckedCreateNestedManyWithoutSkillInput;
};

export type SkillCreateOrConnectWithoutTechnologyInput = {
	where: Prisma.SkillWhereUniqueInput;
	create: Prisma.XOR<
		Prisma.SkillCreateWithoutTechnologyInput,
		Prisma.SkillUncheckedCreateWithoutTechnologyInput
	>;
};

export type SkillCreateManyTechnologyInputEnvelope = {
	data:
		| Prisma.SkillCreateManyTechnologyInput
		| Prisma.SkillCreateManyTechnologyInput[];
	skipDuplicates?: boolean;
};

export type SkillUpsertWithWhereUniqueWithoutTechnologyInput = {
	where: Prisma.SkillWhereUniqueInput;
	update: Prisma.XOR<
		Prisma.SkillUpdateWithoutTechnologyInput,
		Prisma.SkillUncheckedUpdateWithoutTechnologyInput
	>;
	create: Prisma.XOR<
		Prisma.SkillCreateWithoutTechnologyInput,
		Prisma.SkillUncheckedCreateWithoutTechnologyInput
	>;
};

export type SkillUpdateWithWhereUniqueWithoutTechnologyInput = {
	where: Prisma.SkillWhereUniqueInput;
	data: Prisma.XOR<
		Prisma.SkillUpdateWithoutTechnologyInput,
		Prisma.SkillUncheckedUpdateWithoutTechnologyInput
	>;
};

export type SkillUpdateManyWithWhereWithoutTechnologyInput = {
	where: Prisma.SkillScalarWhereInput;
	data: Prisma.XOR<
		Prisma.SkillUpdateManyMutationInput,
		Prisma.SkillUncheckedUpdateManyWithoutTechnologyInput
	>;
};

export type SkillScalarWhereInput = {
	AND?: Prisma.SkillScalarWhereInput | Prisma.SkillScalarWhereInput[];
	OR?: Prisma.SkillScalarWhereInput[];
	NOT?: Prisma.SkillScalarWhereInput | Prisma.SkillScalarWhereInput[];
	id?: Prisma.StringFilter<"Skill"> | string;
	name?: Prisma.StringFilter<"Skill"> | string;
	level?: Prisma.IntFilter<"Skill"> | number;
	category?: Prisma.EnumSkillCategoryFilter<"Skill"> | $Enums.SkillCategory;
	description?: Prisma.StringNullableFilter<"Skill"> | string | null;
	yearsOfExp?: Prisma.IntFilter<"Skill"> | number;
	certified?: Prisma.BoolFilter<"Skill"> | boolean;
	isNew?: Prisma.BoolFilter<"Skill"> | boolean;
	order?: Prisma.IntFilter<"Skill"> | number;
	technologyId?: Prisma.StringNullableFilter<"Skill"> | string | null;
};

export type SkillCreateWithoutTranslationsInput = {
	id?: string;
	name: string;
	level: number;
	category: $Enums.SkillCategory;
	description?: string | null;
	yearsOfExp?: number;
	certified?: boolean;
	isNew?: boolean;
	order?: number;
	technology?: Prisma.TechnologyCreateNestedOneWithoutSkillsInput;
};

export type SkillUncheckedCreateWithoutTranslationsInput = {
	id?: string;
	name: string;
	level: number;
	category: $Enums.SkillCategory;
	description?: string | null;
	yearsOfExp?: number;
	certified?: boolean;
	isNew?: boolean;
	order?: number;
	technologyId?: string | null;
};

export type SkillCreateOrConnectWithoutTranslationsInput = {
	where: Prisma.SkillWhereUniqueInput;
	create: Prisma.XOR<
		Prisma.SkillCreateWithoutTranslationsInput,
		Prisma.SkillUncheckedCreateWithoutTranslationsInput
	>;
};

export type SkillUpsertWithoutTranslationsInput = {
	update: Prisma.XOR<
		Prisma.SkillUpdateWithoutTranslationsInput,
		Prisma.SkillUncheckedUpdateWithoutTranslationsInput
	>;
	create: Prisma.XOR<
		Prisma.SkillCreateWithoutTranslationsInput,
		Prisma.SkillUncheckedCreateWithoutTranslationsInput
	>;
	where?: Prisma.SkillWhereInput;
};

export type SkillUpdateToOneWithWhereWithoutTranslationsInput = {
	where?: Prisma.SkillWhereInput;
	data: Prisma.XOR<
		Prisma.SkillUpdateWithoutTranslationsInput,
		Prisma.SkillUncheckedUpdateWithoutTranslationsInput
	>;
};

export type SkillUpdateWithoutTranslationsInput = {
	id?: Prisma.StringFieldUpdateOperationsInput | string;
	name?: Prisma.StringFieldUpdateOperationsInput | string;
	level?: Prisma.IntFieldUpdateOperationsInput | number;
	category?:
		| Prisma.EnumSkillCategoryFieldUpdateOperationsInput
		| $Enums.SkillCategory;
	description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
	yearsOfExp?: Prisma.IntFieldUpdateOperationsInput | number;
	certified?: Prisma.BoolFieldUpdateOperationsInput | boolean;
	isNew?: Prisma.BoolFieldUpdateOperationsInput | boolean;
	order?: Prisma.IntFieldUpdateOperationsInput | number;
	technology?: Prisma.TechnologyUpdateOneWithoutSkillsNestedInput;
};

export type SkillUncheckedUpdateWithoutTranslationsInput = {
	id?: Prisma.StringFieldUpdateOperationsInput | string;
	name?: Prisma.StringFieldUpdateOperationsInput | string;
	level?: Prisma.IntFieldUpdateOperationsInput | number;
	category?:
		| Prisma.EnumSkillCategoryFieldUpdateOperationsInput
		| $Enums.SkillCategory;
	description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
	yearsOfExp?: Prisma.IntFieldUpdateOperationsInput | number;
	certified?: Prisma.BoolFieldUpdateOperationsInput | boolean;
	isNew?: Prisma.BoolFieldUpdateOperationsInput | boolean;
	order?: Prisma.IntFieldUpdateOperationsInput | number;
	technologyId?:
		| Prisma.NullableStringFieldUpdateOperationsInput
		| string
		| null;
};

export type SkillCreateManyTechnologyInput = {
	id?: string;
	name: string;
	level: number;
	category: $Enums.SkillCategory;
	description?: string | null;
	yearsOfExp?: number;
	certified?: boolean;
	isNew?: boolean;
	order?: number;
};

export type SkillUpdateWithoutTechnologyInput = {
	id?: Prisma.StringFieldUpdateOperationsInput | string;
	name?: Prisma.StringFieldUpdateOperationsInput | string;
	level?: Prisma.IntFieldUpdateOperationsInput | number;
	category?:
		| Prisma.EnumSkillCategoryFieldUpdateOperationsInput
		| $Enums.SkillCategory;
	description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
	yearsOfExp?: Prisma.IntFieldUpdateOperationsInput | number;
	certified?: Prisma.BoolFieldUpdateOperationsInput | boolean;
	isNew?: Prisma.BoolFieldUpdateOperationsInput | boolean;
	order?: Prisma.IntFieldUpdateOperationsInput | number;
	translations?: Prisma.SkillTranslationUpdateManyWithoutSkillNestedInput;
};

export type SkillUncheckedUpdateWithoutTechnologyInput = {
	id?: Prisma.StringFieldUpdateOperationsInput | string;
	name?: Prisma.StringFieldUpdateOperationsInput | string;
	level?: Prisma.IntFieldUpdateOperationsInput | number;
	category?:
		| Prisma.EnumSkillCategoryFieldUpdateOperationsInput
		| $Enums.SkillCategory;
	description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
	yearsOfExp?: Prisma.IntFieldUpdateOperationsInput | number;
	certified?: Prisma.BoolFieldUpdateOperationsInput | boolean;
	isNew?: Prisma.BoolFieldUpdateOperationsInput | boolean;
	order?: Prisma.IntFieldUpdateOperationsInput | number;
	translations?: Prisma.SkillTranslationUncheckedUpdateManyWithoutSkillNestedInput;
};

export type SkillUncheckedUpdateManyWithoutTechnologyInput = {
	id?: Prisma.StringFieldUpdateOperationsInput | string;
	name?: Prisma.StringFieldUpdateOperationsInput | string;
	level?: Prisma.IntFieldUpdateOperationsInput | number;
	category?:
		| Prisma.EnumSkillCategoryFieldUpdateOperationsInput
		| $Enums.SkillCategory;
	description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
	yearsOfExp?: Prisma.IntFieldUpdateOperationsInput | number;
	certified?: Prisma.BoolFieldUpdateOperationsInput | boolean;
	isNew?: Prisma.BoolFieldUpdateOperationsInput | boolean;
	order?: Prisma.IntFieldUpdateOperationsInput | number;
};

/**
 * Count Type SkillCountOutputType
 */

export type SkillCountOutputType = {
	translations: number;
};

export type SkillCountOutputTypeSelect<
	_ExtArgs extends
		runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
	translations?: boolean | SkillCountOutputTypeCountTranslationsArgs;
};

/**
 * SkillCountOutputType without action
 */
export type SkillCountOutputTypeDefaultArgs<
	ExtArgs extends
		runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
	/**
	 * Select specific fields to fetch from the SkillCountOutputType
	 */
	select?: Prisma.SkillCountOutputTypeSelect<ExtArgs> | null;
};

/**
 * SkillCountOutputType without action
 */
export type SkillCountOutputTypeCountTranslationsArgs<
	_ExtArgs extends
		runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
	where?: Prisma.SkillTranslationWhereInput;
};

export type SkillSelect<
	ExtArgs extends
		runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = runtime.Types.Extensions.GetSelect<
	{
		id?: boolean;
		name?: boolean;
		level?: boolean;
		category?: boolean;
		description?: boolean;
		yearsOfExp?: boolean;
		certified?: boolean;
		isNew?: boolean;
		order?: boolean;
		technologyId?: boolean;
		technology?: boolean | Prisma.Skill$technologyArgs<ExtArgs>;
		translations?: boolean | Prisma.Skill$translationsArgs<ExtArgs>;
		_count?: boolean | Prisma.SkillCountOutputTypeDefaultArgs<ExtArgs>;
	},
	ExtArgs["result"]["skill"]
>;

export type SkillSelectCreateManyAndReturn<
	ExtArgs extends
		runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = runtime.Types.Extensions.GetSelect<
	{
		id?: boolean;
		name?: boolean;
		level?: boolean;
		category?: boolean;
		description?: boolean;
		yearsOfExp?: boolean;
		certified?: boolean;
		isNew?: boolean;
		order?: boolean;
		technologyId?: boolean;
		technology?: boolean | Prisma.Skill$technologyArgs<ExtArgs>;
	},
	ExtArgs["result"]["skill"]
>;

export type SkillSelectUpdateManyAndReturn<
	ExtArgs extends
		runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = runtime.Types.Extensions.GetSelect<
	{
		id?: boolean;
		name?: boolean;
		level?: boolean;
		category?: boolean;
		description?: boolean;
		yearsOfExp?: boolean;
		certified?: boolean;
		isNew?: boolean;
		order?: boolean;
		technologyId?: boolean;
		technology?: boolean | Prisma.Skill$technologyArgs<ExtArgs>;
	},
	ExtArgs["result"]["skill"]
>;

export type SkillSelectScalar = {
	id?: boolean;
	name?: boolean;
	level?: boolean;
	category?: boolean;
	description?: boolean;
	yearsOfExp?: boolean;
	certified?: boolean;
	isNew?: boolean;
	order?: boolean;
	technologyId?: boolean;
};

export type SkillOmit<
	ExtArgs extends
		runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = runtime.Types.Extensions.GetOmit<
	| "id"
	| "name"
	| "level"
	| "category"
	| "description"
	| "yearsOfExp"
	| "certified"
	| "isNew"
	| "order"
	| "technologyId",
	ExtArgs["result"]["skill"]
>;
export type SkillInclude<
	ExtArgs extends
		runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
	technology?: boolean | Prisma.Skill$technologyArgs<ExtArgs>;
	translations?: boolean | Prisma.Skill$translationsArgs<ExtArgs>;
	_count?: boolean | Prisma.SkillCountOutputTypeDefaultArgs<ExtArgs>;
};
export type SkillIncludeCreateManyAndReturn<
	ExtArgs extends
		runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
	technology?: boolean | Prisma.Skill$technologyArgs<ExtArgs>;
};
export type SkillIncludeUpdateManyAndReturn<
	ExtArgs extends
		runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
	technology?: boolean | Prisma.Skill$technologyArgs<ExtArgs>;
};

export type $SkillPayload<
	ExtArgs extends
		runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
	name: "Skill";
	objects: {
		technology: Prisma.$TechnologyPayload<ExtArgs> | null;
		translations: Prisma.$SkillTranslationPayload<ExtArgs>[];
	};
	scalars: runtime.Types.Extensions.GetPayloadResult<
		{
			id: string;
			name: string;
			level: number;
			category: $Enums.SkillCategory;
			description: string | null;
			yearsOfExp: number;
			certified: boolean;
			isNew: boolean;
			order: number;
			technologyId: string | null;
		},
		ExtArgs["result"]["skill"]
	>;
	composites: {};
};

export type SkillGetPayload<
	S extends boolean | null | undefined | SkillDefaultArgs,
> = runtime.Types.Result.GetResult<Prisma.$SkillPayload, S>;

export type SkillCountArgs<
	_ExtArgs extends
		runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = Omit<SkillFindManyArgs, "select" | "include" | "distinct" | "omit"> & {
	select?: SkillCountAggregateInputType | true;
};

export interface SkillDelegate<
	ExtArgs extends
		runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
	GlobalOmitOptions = {},
> {
	[K: symbol]: {
		types: Prisma.TypeMap<ExtArgs>["model"]["Skill"];
		meta: { name: "Skill" };
	};
	/**
	 * Find zero or one Skill that matches the filter.
	 * @param {SkillFindUniqueArgs} args - Arguments to find a Skill
	 * @example
	 * // Get one Skill
	 * const skill = await prisma.skill.findUnique({
	 *   where: {
	 *     // ... provide filter here
	 *   }
	 * })
	 */
	findUnique<T extends SkillFindUniqueArgs>(
		args: Prisma.SelectSubset<T, SkillFindUniqueArgs<ExtArgs>>,
	): Prisma.Prisma__SkillClient<
		runtime.Types.Result.GetResult<
			Prisma.$SkillPayload<ExtArgs>,
			T,
			"findUnique",
			GlobalOmitOptions
		> | null,
		null,
		ExtArgs,
		GlobalOmitOptions
	>;

	/**
	 * Find one Skill that matches the filter or throw an error with `error.code='P2025'`
	 * if no matches were found.
	 * @param {SkillFindUniqueOrThrowArgs} args - Arguments to find a Skill
	 * @example
	 * // Get one Skill
	 * const skill = await prisma.skill.findUniqueOrThrow({
	 *   where: {
	 *     // ... provide filter here
	 *   }
	 * })
	 */
	findUniqueOrThrow<T extends SkillFindUniqueOrThrowArgs>(
		args: Prisma.SelectSubset<T, SkillFindUniqueOrThrowArgs<ExtArgs>>,
	): Prisma.Prisma__SkillClient<
		runtime.Types.Result.GetResult<
			Prisma.$SkillPayload<ExtArgs>,
			T,
			"findUniqueOrThrow",
			GlobalOmitOptions
		>,
		never,
		ExtArgs,
		GlobalOmitOptions
	>;

	/**
	 * Find the first Skill that matches the filter.
	 * Note, that providing `undefined` is treated as the value not being there.
	 * Read more here: https://pris.ly/d/null-undefined
	 * @param {SkillFindFirstArgs} args - Arguments to find a Skill
	 * @example
	 * // Get one Skill
	 * const skill = await prisma.skill.findFirst({
	 *   where: {
	 *     // ... provide filter here
	 *   }
	 * })
	 */
	findFirst<T extends SkillFindFirstArgs>(
		args?: Prisma.SelectSubset<T, SkillFindFirstArgs<ExtArgs>>,
	): Prisma.Prisma__SkillClient<
		runtime.Types.Result.GetResult<
			Prisma.$SkillPayload<ExtArgs>,
			T,
			"findFirst",
			GlobalOmitOptions
		> | null,
		null,
		ExtArgs,
		GlobalOmitOptions
	>;

	/**
	 * Find the first Skill that matches the filter or
	 * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
	 * Note, that providing `undefined` is treated as the value not being there.
	 * Read more here: https://pris.ly/d/null-undefined
	 * @param {SkillFindFirstOrThrowArgs} args - Arguments to find a Skill
	 * @example
	 * // Get one Skill
	 * const skill = await prisma.skill.findFirstOrThrow({
	 *   where: {
	 *     // ... provide filter here
	 *   }
	 * })
	 */
	findFirstOrThrow<T extends SkillFindFirstOrThrowArgs>(
		args?: Prisma.SelectSubset<T, SkillFindFirstOrThrowArgs<ExtArgs>>,
	): Prisma.Prisma__SkillClient<
		runtime.Types.Result.GetResult<
			Prisma.$SkillPayload<ExtArgs>,
			T,
			"findFirstOrThrow",
			GlobalOmitOptions
		>,
		never,
		ExtArgs,
		GlobalOmitOptions
	>;

	/**
	 * Find zero or more Skills that matches the filter.
	 * Note, that providing `undefined` is treated as the value not being there.
	 * Read more here: https://pris.ly/d/null-undefined
	 * @param {SkillFindManyArgs} args - Arguments to filter and select certain fields only.
	 * @example
	 * // Get all Skills
	 * const skills = await prisma.skill.findMany()
	 *
	 * // Get first 10 Skills
	 * const skills = await prisma.skill.findMany({ take: 10 })
	 *
	 * // Only select the `id`
	 * const skillWithIdOnly = await prisma.skill.findMany({ select: { id: true } })
	 *
	 */
	findMany<T extends SkillFindManyArgs>(
		args?: Prisma.SelectSubset<T, SkillFindManyArgs<ExtArgs>>,
	): Prisma.PrismaPromise<
		runtime.Types.Result.GetResult<
			Prisma.$SkillPayload<ExtArgs>,
			T,
			"findMany",
			GlobalOmitOptions
		>
	>;

	/**
	 * Create a Skill.
	 * @param {SkillCreateArgs} args - Arguments to create a Skill.
	 * @example
	 * // Create one Skill
	 * const Skill = await prisma.skill.create({
	 *   data: {
	 *     // ... data to create a Skill
	 *   }
	 * })
	 *
	 */
	create<T extends SkillCreateArgs>(
		args: Prisma.SelectSubset<T, SkillCreateArgs<ExtArgs>>,
	): Prisma.Prisma__SkillClient<
		runtime.Types.Result.GetResult<
			Prisma.$SkillPayload<ExtArgs>,
			T,
			"create",
			GlobalOmitOptions
		>,
		never,
		ExtArgs,
		GlobalOmitOptions
	>;

	/**
	 * Create many Skills.
	 * @param {SkillCreateManyArgs} args - Arguments to create many Skills.
	 * @example
	 * // Create many Skills
	 * const skill = await prisma.skill.createMany({
	 *   data: [
	 *     // ... provide data here
	 *   ]
	 * })
	 *
	 */
	createMany<T extends SkillCreateManyArgs>(
		args?: Prisma.SelectSubset<T, SkillCreateManyArgs<ExtArgs>>,
	): Prisma.PrismaPromise<Prisma.BatchPayload>;

	/**
	 * Create many Skills and returns the data saved in the database.
	 * @param {SkillCreateManyAndReturnArgs} args - Arguments to create many Skills.
	 * @example
	 * // Create many Skills
	 * const skill = await prisma.skill.createManyAndReturn({
	 *   data: [
	 *     // ... provide data here
	 *   ]
	 * })
	 *
	 * // Create many Skills and only return the `id`
	 * const skillWithIdOnly = await prisma.skill.createManyAndReturn({
	 *   select: { id: true },
	 *   data: [
	 *     // ... provide data here
	 *   ]
	 * })
	 * Note, that providing `undefined` is treated as the value not being there.
	 * Read more here: https://pris.ly/d/null-undefined
	 *
	 */
	createManyAndReturn<T extends SkillCreateManyAndReturnArgs>(
		args?: Prisma.SelectSubset<T, SkillCreateManyAndReturnArgs<ExtArgs>>,
	): Prisma.PrismaPromise<
		runtime.Types.Result.GetResult<
			Prisma.$SkillPayload<ExtArgs>,
			T,
			"createManyAndReturn",
			GlobalOmitOptions
		>
	>;

	/**
	 * Delete a Skill.
	 * @param {SkillDeleteArgs} args - Arguments to delete one Skill.
	 * @example
	 * // Delete one Skill
	 * const Skill = await prisma.skill.delete({
	 *   where: {
	 *     // ... filter to delete one Skill
	 *   }
	 * })
	 *
	 */
	delete<T extends SkillDeleteArgs>(
		args: Prisma.SelectSubset<T, SkillDeleteArgs<ExtArgs>>,
	): Prisma.Prisma__SkillClient<
		runtime.Types.Result.GetResult<
			Prisma.$SkillPayload<ExtArgs>,
			T,
			"delete",
			GlobalOmitOptions
		>,
		never,
		ExtArgs,
		GlobalOmitOptions
	>;

	/**
	 * Update one Skill.
	 * @param {SkillUpdateArgs} args - Arguments to update one Skill.
	 * @example
	 * // Update one Skill
	 * const skill = await prisma.skill.update({
	 *   where: {
	 *     // ... provide filter here
	 *   },
	 *   data: {
	 *     // ... provide data here
	 *   }
	 * })
	 *
	 */
	update<T extends SkillUpdateArgs>(
		args: Prisma.SelectSubset<T, SkillUpdateArgs<ExtArgs>>,
	): Prisma.Prisma__SkillClient<
		runtime.Types.Result.GetResult<
			Prisma.$SkillPayload<ExtArgs>,
			T,
			"update",
			GlobalOmitOptions
		>,
		never,
		ExtArgs,
		GlobalOmitOptions
	>;

	/**
	 * Delete zero or more Skills.
	 * @param {SkillDeleteManyArgs} args - Arguments to filter Skills to delete.
	 * @example
	 * // Delete a few Skills
	 * const { count } = await prisma.skill.deleteMany({
	 *   where: {
	 *     // ... provide filter here
	 *   }
	 * })
	 *
	 */
	deleteMany<T extends SkillDeleteManyArgs>(
		args?: Prisma.SelectSubset<T, SkillDeleteManyArgs<ExtArgs>>,
	): Prisma.PrismaPromise<Prisma.BatchPayload>;

	/**
	 * Update zero or more Skills.
	 * Note, that providing `undefined` is treated as the value not being there.
	 * Read more here: https://pris.ly/d/null-undefined
	 * @param {SkillUpdateManyArgs} args - Arguments to update one or more rows.
	 * @example
	 * // Update many Skills
	 * const skill = await prisma.skill.updateMany({
	 *   where: {
	 *     // ... provide filter here
	 *   },
	 *   data: {
	 *     // ... provide data here
	 *   }
	 * })
	 *
	 */
	updateMany<T extends SkillUpdateManyArgs>(
		args: Prisma.SelectSubset<T, SkillUpdateManyArgs<ExtArgs>>,
	): Prisma.PrismaPromise<Prisma.BatchPayload>;

	/**
	 * Update zero or more Skills and returns the data updated in the database.
	 * @param {SkillUpdateManyAndReturnArgs} args - Arguments to update many Skills.
	 * @example
	 * // Update many Skills
	 * const skill = await prisma.skill.updateManyAndReturn({
	 *   where: {
	 *     // ... provide filter here
	 *   },
	 *   data: [
	 *     // ... provide data here
	 *   ]
	 * })
	 *
	 * // Update zero or more Skills and only return the `id`
	 * const skillWithIdOnly = await prisma.skill.updateManyAndReturn({
	 *   select: { id: true },
	 *   where: {
	 *     // ... provide filter here
	 *   },
	 *   data: [
	 *     // ... provide data here
	 *   ]
	 * })
	 * Note, that providing `undefined` is treated as the value not being there.
	 * Read more here: https://pris.ly/d/null-undefined
	 *
	 */
	updateManyAndReturn<T extends SkillUpdateManyAndReturnArgs>(
		args: Prisma.SelectSubset<T, SkillUpdateManyAndReturnArgs<ExtArgs>>,
	): Prisma.PrismaPromise<
		runtime.Types.Result.GetResult<
			Prisma.$SkillPayload<ExtArgs>,
			T,
			"updateManyAndReturn",
			GlobalOmitOptions
		>
	>;

	/**
	 * Create or update one Skill.
	 * @param {SkillUpsertArgs} args - Arguments to update or create a Skill.
	 * @example
	 * // Update or create a Skill
	 * const skill = await prisma.skill.upsert({
	 *   create: {
	 *     // ... data to create a Skill
	 *   },
	 *   update: {
	 *     // ... in case it already exists, update
	 *   },
	 *   where: {
	 *     // ... the filter for the Skill we want to update
	 *   }
	 * })
	 */
	upsert<T extends SkillUpsertArgs>(
		args: Prisma.SelectSubset<T, SkillUpsertArgs<ExtArgs>>,
	): Prisma.Prisma__SkillClient<
		runtime.Types.Result.GetResult<
			Prisma.$SkillPayload<ExtArgs>,
			T,
			"upsert",
			GlobalOmitOptions
		>,
		never,
		ExtArgs,
		GlobalOmitOptions
	>;

	/**
	 * Count the number of Skills.
	 * Note, that providing `undefined` is treated as the value not being there.
	 * Read more here: https://pris.ly/d/null-undefined
	 * @param {SkillCountArgs} args - Arguments to filter Skills to count.
	 * @example
	 * // Count the number of Skills
	 * const count = await prisma.skill.count({
	 *   where: {
	 *     // ... the filter for the Skills we want to count
	 *   }
	 * })
	 **/
	count<T extends SkillCountArgs>(
		args?: Prisma.Subset<T, SkillCountArgs>,
	): Prisma.PrismaPromise<
		T extends runtime.Types.Utils.Record<"select", any>
			? T["select"] extends true
				? number
				: Prisma.GetScalarType<T["select"], SkillCountAggregateOutputType>
			: number
	>;

	/**
	 * Allows you to perform aggregations operations on a Skill.
	 * Note, that providing `undefined` is treated as the value not being there.
	 * Read more here: https://pris.ly/d/null-undefined
	 * @param {SkillAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
	 * @example
	 * // Ordered by age ascending
	 * // Where email contains prisma.io
	 * // Limited to the 10 users
	 * const aggregations = await prisma.user.aggregate({
	 *   _avg: {
	 *     age: true,
	 *   },
	 *   where: {
	 *     email: {
	 *       contains: "prisma.io",
	 *     },
	 *   },
	 *   orderBy: {
	 *     age: "asc",
	 *   },
	 *   take: 10,
	 * })
	 **/
	aggregate<T extends SkillAggregateArgs>(
		args: Prisma.Subset<T, SkillAggregateArgs>,
	): Prisma.PrismaPromise<GetSkillAggregateType<T>>;

	/**
	 * Group by Skill.
	 * Note, that providing `undefined` is treated as the value not being there.
	 * Read more here: https://pris.ly/d/null-undefined
	 * @param {SkillGroupByArgs} args - Group by arguments.
	 * @example
	 * // Group by city, order by createdAt, get count
	 * const result = await prisma.user.groupBy({
	 *   by: ['city', 'createdAt'],
	 *   orderBy: {
	 *     createdAt: true
	 *   },
	 *   _count: {
	 *     _all: true
	 *   },
	 * })
	 *
	 **/
	groupBy<
		T extends SkillGroupByArgs,
		HasSelectOrTake extends Prisma.Or<
			Prisma.Extends<"skip", Prisma.Keys<T>>,
			Prisma.Extends<"take", Prisma.Keys<T>>
		>,
		OrderByArg extends Prisma.True extends HasSelectOrTake
			? { orderBy: SkillGroupByArgs["orderBy"] }
			: { orderBy?: SkillGroupByArgs["orderBy"] },
		OrderFields extends Prisma.ExcludeUnderscoreKeys<
			Prisma.Keys<Prisma.MaybeTupleToUnion<T["orderBy"]>>
		>,
		ByFields extends Prisma.MaybeTupleToUnion<T["by"]>,
		ByValid extends Prisma.Has<ByFields, OrderFields>,
		HavingFields extends Prisma.GetHavingFields<T["having"]>,
		HavingValid extends Prisma.Has<ByFields, HavingFields>,
		ByEmpty extends T["by"] extends never[] ? Prisma.True : Prisma.False,
		InputErrors extends ByEmpty extends Prisma.True
			? `Error: "by" must not be empty.`
			: HavingValid extends Prisma.False
				? {
						[P in HavingFields]: P extends ByFields
							? never
							: P extends string
								? `Error: Field "${P}" used in "having" needs to be provided in "by".`
								: [
										Error,
										"Field ",
										P,
										` in "having" needs to be provided in "by"`,
									];
					}[HavingFields]
				: "take" extends Prisma.Keys<T>
					? "orderBy" extends Prisma.Keys<T>
						? ByValid extends Prisma.True
							? {}
							: {
									[P in OrderFields]: P extends ByFields
										? never
										: `Error: Field "${P}" in "orderBy" needs to be provided in "by"`;
								}[OrderFields]
						: 'Error: If you provide "take", you also need to provide "orderBy"'
					: "skip" extends Prisma.Keys<T>
						? "orderBy" extends Prisma.Keys<T>
							? ByValid extends Prisma.True
								? {}
								: {
										[P in OrderFields]: P extends ByFields
											? never
											: `Error: Field "${P}" in "orderBy" needs to be provided in "by"`;
									}[OrderFields]
							: 'Error: If you provide "skip", you also need to provide "orderBy"'
						: ByValid extends Prisma.True
							? {}
							: {
									[P in OrderFields]: P extends ByFields
										? never
										: `Error: Field "${P}" in "orderBy" needs to be provided in "by"`;
								}[OrderFields],
	>(
		args: Prisma.SubsetIntersection<T, SkillGroupByArgs, OrderByArg> &
			InputErrors,
	): {} extends InputErrors
		? GetSkillGroupByPayload<T>
		: Prisma.PrismaPromise<InputErrors>;
	/**
	 * Fields of the Skill model
	 */
	readonly fields: SkillFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for Skill.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__SkillClient<
	T,
	Null = never,
	ExtArgs extends
		runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
	GlobalOmitOptions = {},
> extends Prisma.PrismaPromise<T> {
	readonly [Symbol.toStringTag]: "PrismaPromise";
	technology<T extends Prisma.Skill$technologyArgs<ExtArgs> = {}>(
		args?: Prisma.Subset<T, Prisma.Skill$technologyArgs<ExtArgs>>,
	): Prisma.Prisma__TechnologyClient<
		runtime.Types.Result.GetResult<
			Prisma.$TechnologyPayload<ExtArgs>,
			T,
			"findUniqueOrThrow",
			GlobalOmitOptions
		> | null,
		null,
		ExtArgs,
		GlobalOmitOptions
	>;
	translations<T extends Prisma.Skill$translationsArgs<ExtArgs> = {}>(
		args?: Prisma.Subset<T, Prisma.Skill$translationsArgs<ExtArgs>>,
	): Prisma.PrismaPromise<
		| runtime.Types.Result.GetResult<
				Prisma.$SkillTranslationPayload<ExtArgs>,
				T,
				"findMany",
				GlobalOmitOptions
		  >
		| Null
	>;
	/**
	 * Attaches callbacks for the resolution and/or rejection of the Promise.
	 * @param onfulfilled The callback to execute when the Promise is resolved.
	 * @param onrejected The callback to execute when the Promise is rejected.
	 * @returns A Promise for the completion of which ever callback is executed.
	 */
	then<TResult1 = T, TResult2 = never>(
		onfulfilled?:
			| ((value: T) => TResult1 | PromiseLike<TResult1>)
			| undefined
			| null,
		onrejected?:
			| ((reason: any) => TResult2 | PromiseLike<TResult2>)
			| undefined
			| null,
	): runtime.Types.Utils.JsPromise<TResult1 | TResult2>;
	/**
	 * Attaches a callback for only the rejection of the Promise.
	 * @param onrejected The callback to execute when the Promise is rejected.
	 * @returns A Promise for the completion of the callback.
	 */
	catch<TResult = never>(
		onrejected?:
			| ((reason: any) => TResult | PromiseLike<TResult>)
			| undefined
			| null,
	): runtime.Types.Utils.JsPromise<T | TResult>;
	/**
	 * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
	 * resolved value cannot be modified from the callback.
	 * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
	 * @returns A Promise for the completion of the callback.
	 */
	finally(
		onfinally?: (() => void) | undefined | null,
	): runtime.Types.Utils.JsPromise<T>;
}

/**
 * Fields of the Skill model
 */
export interface SkillFieldRefs {
	readonly id: Prisma.FieldRef<"Skill", "String">;
	readonly name: Prisma.FieldRef<"Skill", "String">;
	readonly level: Prisma.FieldRef<"Skill", "Int">;
	readonly category: Prisma.FieldRef<"Skill", "SkillCategory">;
	readonly description: Prisma.FieldRef<"Skill", "String">;
	readonly yearsOfExp: Prisma.FieldRef<"Skill", "Int">;
	readonly certified: Prisma.FieldRef<"Skill", "Boolean">;
	readonly isNew: Prisma.FieldRef<"Skill", "Boolean">;
	readonly order: Prisma.FieldRef<"Skill", "Int">;
	readonly technologyId: Prisma.FieldRef<"Skill", "String">;
}

// Custom InputTypes
/**
 * Skill findUnique
 */
export type SkillFindUniqueArgs<
	ExtArgs extends
		runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
	/**
	 * Select specific fields to fetch from the Skill
	 */
	select?: Prisma.SkillSelect<ExtArgs> | null;
	/**
	 * Omit specific fields from the Skill
	 */
	omit?: Prisma.SkillOmit<ExtArgs> | null;
	/**
	 * Choose, which related nodes to fetch as well
	 */
	include?: Prisma.SkillInclude<ExtArgs> | null;
	/**
	 * Filter, which Skill to fetch.
	 */
	where: Prisma.SkillWhereUniqueInput;
};

/**
 * Skill findUniqueOrThrow
 */
export type SkillFindUniqueOrThrowArgs<
	ExtArgs extends
		runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
	/**
	 * Select specific fields to fetch from the Skill
	 */
	select?: Prisma.SkillSelect<ExtArgs> | null;
	/**
	 * Omit specific fields from the Skill
	 */
	omit?: Prisma.SkillOmit<ExtArgs> | null;
	/**
	 * Choose, which related nodes to fetch as well
	 */
	include?: Prisma.SkillInclude<ExtArgs> | null;
	/**
	 * Filter, which Skill to fetch.
	 */
	where: Prisma.SkillWhereUniqueInput;
};

/**
 * Skill findFirst
 */
export type SkillFindFirstArgs<
	ExtArgs extends
		runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
	/**
	 * Select specific fields to fetch from the Skill
	 */
	select?: Prisma.SkillSelect<ExtArgs> | null;
	/**
	 * Omit specific fields from the Skill
	 */
	omit?: Prisma.SkillOmit<ExtArgs> | null;
	/**
	 * Choose, which related nodes to fetch as well
	 */
	include?: Prisma.SkillInclude<ExtArgs> | null;
	/**
	 * Filter, which Skill to fetch.
	 */
	where?: Prisma.SkillWhereInput;
	/**
	 * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
	 *
	 * Determine the order of Skills to fetch.
	 */
	orderBy?:
		| Prisma.SkillOrderByWithRelationInput
		| Prisma.SkillOrderByWithRelationInput[];
	/**
	 * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
	 *
	 * Sets the position for searching for Skills.
	 */
	cursor?: Prisma.SkillWhereUniqueInput;
	/**
	 * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
	 *
	 * Take `Â±n` Skills from the position of the cursor.
	 */
	take?: number;
	/**
	 * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
	 *
	 * Skip the first `n` Skills.
	 */
	skip?: number;
	/**
	 * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
	 *
	 * Filter by unique combinations of Skills.
	 */
	distinct?: Prisma.SkillScalarFieldEnum | Prisma.SkillScalarFieldEnum[];
};

/**
 * Skill findFirstOrThrow
 */
export type SkillFindFirstOrThrowArgs<
	ExtArgs extends
		runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
	/**
	 * Select specific fields to fetch from the Skill
	 */
	select?: Prisma.SkillSelect<ExtArgs> | null;
	/**
	 * Omit specific fields from the Skill
	 */
	omit?: Prisma.SkillOmit<ExtArgs> | null;
	/**
	 * Choose, which related nodes to fetch as well
	 */
	include?: Prisma.SkillInclude<ExtArgs> | null;
	/**
	 * Filter, which Skill to fetch.
	 */
	where?: Prisma.SkillWhereInput;
	/**
	 * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
	 *
	 * Determine the order of Skills to fetch.
	 */
	orderBy?:
		| Prisma.SkillOrderByWithRelationInput
		| Prisma.SkillOrderByWithRelationInput[];
	/**
	 * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
	 *
	 * Sets the position for searching for Skills.
	 */
	cursor?: Prisma.SkillWhereUniqueInput;
	/**
	 * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
	 *
	 * Take `Â±n` Skills from the position of the cursor.
	 */
	take?: number;
	/**
	 * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
	 *
	 * Skip the first `n` Skills.
	 */
	skip?: number;
	/**
	 * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
	 *
	 * Filter by unique combinations of Skills.
	 */
	distinct?: Prisma.SkillScalarFieldEnum | Prisma.SkillScalarFieldEnum[];
};

/**
 * Skill findMany
 */
export type SkillFindManyArgs<
	ExtArgs extends
		runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
	/**
	 * Select specific fields to fetch from the Skill
	 */
	select?: Prisma.SkillSelect<ExtArgs> | null;
	/**
	 * Omit specific fields from the Skill
	 */
	omit?: Prisma.SkillOmit<ExtArgs> | null;
	/**
	 * Choose, which related nodes to fetch as well
	 */
	include?: Prisma.SkillInclude<ExtArgs> | null;
	/**
	 * Filter, which Skills to fetch.
	 */
	where?: Prisma.SkillWhereInput;
	/**
	 * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
	 *
	 * Determine the order of Skills to fetch.
	 */
	orderBy?:
		| Prisma.SkillOrderByWithRelationInput
		| Prisma.SkillOrderByWithRelationInput[];
	/**
	 * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
	 *
	 * Sets the position for listing Skills.
	 */
	cursor?: Prisma.SkillWhereUniqueInput;
	/**
	 * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
	 *
	 * Take `Â±n` Skills from the position of the cursor.
	 */
	take?: number;
	/**
	 * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
	 *
	 * Skip the first `n` Skills.
	 */
	skip?: number;
	distinct?: Prisma.SkillScalarFieldEnum | Prisma.SkillScalarFieldEnum[];
};

/**
 * Skill create
 */
export type SkillCreateArgs<
	ExtArgs extends
		runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
	/**
	 * Select specific fields to fetch from the Skill
	 */
	select?: Prisma.SkillSelect<ExtArgs> | null;
	/**
	 * Omit specific fields from the Skill
	 */
	omit?: Prisma.SkillOmit<ExtArgs> | null;
	/**
	 * Choose, which related nodes to fetch as well
	 */
	include?: Prisma.SkillInclude<ExtArgs> | null;
	/**
	 * The data needed to create a Skill.
	 */
	data: Prisma.XOR<Prisma.SkillCreateInput, Prisma.SkillUncheckedCreateInput>;
};

/**
 * Skill createMany
 */
export type SkillCreateManyArgs<
	_ExtArgs extends
		runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
	/**
	 * The data used to create many Skills.
	 */
	data: Prisma.SkillCreateManyInput | Prisma.SkillCreateManyInput[];
	skipDuplicates?: boolean;
};

/**
 * Skill createManyAndReturn
 */
export type SkillCreateManyAndReturnArgs<
	ExtArgs extends
		runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
	/**
	 * Select specific fields to fetch from the Skill
	 */
	select?: Prisma.SkillSelectCreateManyAndReturn<ExtArgs> | null;
	/**
	 * Omit specific fields from the Skill
	 */
	omit?: Prisma.SkillOmit<ExtArgs> | null;
	/**
	 * The data used to create many Skills.
	 */
	data: Prisma.SkillCreateManyInput | Prisma.SkillCreateManyInput[];
	skipDuplicates?: boolean;
	/**
	 * Choose, which related nodes to fetch as well
	 */
	include?: Prisma.SkillIncludeCreateManyAndReturn<ExtArgs> | null;
};

/**
 * Skill update
 */
export type SkillUpdateArgs<
	ExtArgs extends
		runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
	/**
	 * Select specific fields to fetch from the Skill
	 */
	select?: Prisma.SkillSelect<ExtArgs> | null;
	/**
	 * Omit specific fields from the Skill
	 */
	omit?: Prisma.SkillOmit<ExtArgs> | null;
	/**
	 * Choose, which related nodes to fetch as well
	 */
	include?: Prisma.SkillInclude<ExtArgs> | null;
	/**
	 * The data needed to update a Skill.
	 */
	data: Prisma.XOR<Prisma.SkillUpdateInput, Prisma.SkillUncheckedUpdateInput>;
	/**
	 * Choose, which Skill to update.
	 */
	where: Prisma.SkillWhereUniqueInput;
};

/**
 * Skill updateMany
 */
export type SkillUpdateManyArgs<
	_ExtArgs extends
		runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
	/**
	 * The data used to update Skills.
	 */
	data: Prisma.XOR<
		Prisma.SkillUpdateManyMutationInput,
		Prisma.SkillUncheckedUpdateManyInput
	>;
	/**
	 * Filter which Skills to update
	 */
	where?: Prisma.SkillWhereInput;
	/**
	 * Limit how many Skills to update.
	 */
	limit?: number;
};

/**
 * Skill updateManyAndReturn
 */
export type SkillUpdateManyAndReturnArgs<
	ExtArgs extends
		runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
	/**
	 * Select specific fields to fetch from the Skill
	 */
	select?: Prisma.SkillSelectUpdateManyAndReturn<ExtArgs> | null;
	/**
	 * Omit specific fields from the Skill
	 */
	omit?: Prisma.SkillOmit<ExtArgs> | null;
	/**
	 * The data used to update Skills.
	 */
	data: Prisma.XOR<
		Prisma.SkillUpdateManyMutationInput,
		Prisma.SkillUncheckedUpdateManyInput
	>;
	/**
	 * Filter which Skills to update
	 */
	where?: Prisma.SkillWhereInput;
	/**
	 * Limit how many Skills to update.
	 */
	limit?: number;
	/**
	 * Choose, which related nodes to fetch as well
	 */
	include?: Prisma.SkillIncludeUpdateManyAndReturn<ExtArgs> | null;
};

/**
 * Skill upsert
 */
export type SkillUpsertArgs<
	ExtArgs extends
		runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
	/**
	 * Select specific fields to fetch from the Skill
	 */
	select?: Prisma.SkillSelect<ExtArgs> | null;
	/**
	 * Omit specific fields from the Skill
	 */
	omit?: Prisma.SkillOmit<ExtArgs> | null;
	/**
	 * Choose, which related nodes to fetch as well
	 */
	include?: Prisma.SkillInclude<ExtArgs> | null;
	/**
	 * The filter to search for the Skill to update in case it exists.
	 */
	where: Prisma.SkillWhereUniqueInput;
	/**
	 * In case the Skill found by the `where` argument doesn't exist, create a new Skill with this data.
	 */
	create: Prisma.XOR<Prisma.SkillCreateInput, Prisma.SkillUncheckedCreateInput>;
	/**
	 * In case the Skill was found with the provided `where` argument, update it with this data.
	 */
	update: Prisma.XOR<Prisma.SkillUpdateInput, Prisma.SkillUncheckedUpdateInput>;
};

/**
 * Skill delete
 */
export type SkillDeleteArgs<
	ExtArgs extends
		runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
	/**
	 * Select specific fields to fetch from the Skill
	 */
	select?: Prisma.SkillSelect<ExtArgs> | null;
	/**
	 * Omit specific fields from the Skill
	 */
	omit?: Prisma.SkillOmit<ExtArgs> | null;
	/**
	 * Choose, which related nodes to fetch as well
	 */
	include?: Prisma.SkillInclude<ExtArgs> | null;
	/**
	 * Filter which Skill to delete.
	 */
	where: Prisma.SkillWhereUniqueInput;
};

/**
 * Skill deleteMany
 */
export type SkillDeleteManyArgs<
	_ExtArgs extends
		runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
	/**
	 * Filter which Skills to delete
	 */
	where?: Prisma.SkillWhereInput;
	/**
	 * Limit how many Skills to delete.
	 */
	limit?: number;
};

/**
 * Skill.technology
 */
export type Skill$technologyArgs<
	ExtArgs extends
		runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
	/**
	 * Select specific fields to fetch from the Technology
	 */
	select?: Prisma.TechnologySelect<ExtArgs> | null;
	/**
	 * Omit specific fields from the Technology
	 */
	omit?: Prisma.TechnologyOmit<ExtArgs> | null;
	/**
	 * Choose, which related nodes to fetch as well
	 */
	include?: Prisma.TechnologyInclude<ExtArgs> | null;
	where?: Prisma.TechnologyWhereInput;
};

/**
 * Skill.translations
 */
export type Skill$translationsArgs<
	ExtArgs extends
		runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
	/**
	 * Select specific fields to fetch from the SkillTranslation
	 */
	select?: Prisma.SkillTranslationSelect<ExtArgs> | null;
	/**
	 * Omit specific fields from the SkillTranslation
	 */
	omit?: Prisma.SkillTranslationOmit<ExtArgs> | null;
	/**
	 * Choose, which related nodes to fetch as well
	 */
	include?: Prisma.SkillTranslationInclude<ExtArgs> | null;
	where?: Prisma.SkillTranslationWhereInput;
	orderBy?:
		| Prisma.SkillTranslationOrderByWithRelationInput
		| Prisma.SkillTranslationOrderByWithRelationInput[];
	cursor?: Prisma.SkillTranslationWhereUniqueInput;
	take?: number;
	skip?: number;
	distinct?:
		| Prisma.SkillTranslationScalarFieldEnum
		| Prisma.SkillTranslationScalarFieldEnum[];
};

/**
 * Skill without action
 */
export type SkillDefaultArgs<
	ExtArgs extends
		runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
	/**
	 * Select specific fields to fetch from the Skill
	 */
	select?: Prisma.SkillSelect<ExtArgs> | null;
	/**
	 * Omit specific fields from the Skill
	 */
	omit?: Prisma.SkillOmit<ExtArgs> | null;
	/**
	 * Choose, which related nodes to fetch as well
	 */
	include?: Prisma.SkillInclude<ExtArgs> | null;
};
