/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck
/**
 * This file exports the `ImplementationPlan` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import type * as runtime from "@prisma/client/runtime/library";
import type * as $Enums from "../enums";
import type * as Prisma from "../internal/prismaNamespace";

/**
 * Model ImplementationPlan
 *
 */
export type ImplementationPlanModel =
	runtime.Types.Result.DefaultSelection<Prisma.$ImplementationPlanPayload>;

export type AggregateImplementationPlan = {
	_count: ImplementationPlanCountAggregateOutputType | null;
	_avg: ImplementationPlanAvgAggregateOutputType | null;
	_sum: ImplementationPlanSumAggregateOutputType | null;
	_min: ImplementationPlanMinAggregateOutputType | null;
	_max: ImplementationPlanMaxAggregateOutputType | null;
};

export type ImplementationPlanAvgAggregateOutputType = {
	order: number | null;
};

export type ImplementationPlanSumAggregateOutputType = {
	order: number | null;
};

export type ImplementationPlanMinAggregateOutputType = {
	id: string | null;
	title: string | null;
	description: string | null;
	category: $Enums.ImplementationCategory | null;
	priority: $Enums.ImplementationPriority | null;
	estimatedTime: string | null;
	order: number | null;
	createdAt: Date | null;
	updatedAt: Date | null;
};

export type ImplementationPlanMaxAggregateOutputType = {
	id: string | null;
	title: string | null;
	description: string | null;
	category: $Enums.ImplementationCategory | null;
	priority: $Enums.ImplementationPriority | null;
	estimatedTime: string | null;
	order: number | null;
	createdAt: Date | null;
	updatedAt: Date | null;
};

export type ImplementationPlanCountAggregateOutputType = {
	id: number;
	title: number;
	description: number;
	category: number;
	priority: number;
	estimatedTime: number;
	dependencies: number;
	order: number;
	createdAt: number;
	updatedAt: number;
	_all: number;
};

export type ImplementationPlanAvgAggregateInputType = {
	order?: true;
};

export type ImplementationPlanSumAggregateInputType = {
	order?: true;
};

export type ImplementationPlanMinAggregateInputType = {
	id?: true;
	title?: true;
	description?: true;
	category?: true;
	priority?: true;
	estimatedTime?: true;
	order?: true;
	createdAt?: true;
	updatedAt?: true;
};

export type ImplementationPlanMaxAggregateInputType = {
	id?: true;
	title?: true;
	description?: true;
	category?: true;
	priority?: true;
	estimatedTime?: true;
	order?: true;
	createdAt?: true;
	updatedAt?: true;
};

export type ImplementationPlanCountAggregateInputType = {
	id?: true;
	title?: true;
	description?: true;
	category?: true;
	priority?: true;
	estimatedTime?: true;
	dependencies?: true;
	order?: true;
	createdAt?: true;
	updatedAt?: true;
	_all?: true;
};

export type ImplementationPlanAggregateArgs<
	_ExtArgs extends
		runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
	/**
	 * Filter which ImplementationPlan to aggregate.
	 */
	where?: Prisma.ImplementationPlanWhereInput;
	/**
	 * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
	 *
	 * Determine the order of ImplementationPlans to fetch.
	 */
	orderBy?:
		| Prisma.ImplementationPlanOrderByWithRelationInput
		| Prisma.ImplementationPlanOrderByWithRelationInput[];
	/**
	 * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
	 *
	 * Sets the start position
	 */
	cursor?: Prisma.ImplementationPlanWhereUniqueInput;
	/**
	 * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
	 *
	 * Take `Â±n` ImplementationPlans from the position of the cursor.
	 */
	take?: number;
	/**
	 * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
	 *
	 * Skip the first `n` ImplementationPlans.
	 */
	skip?: number;
	/**
	 * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
	 *
	 * Count returned ImplementationPlans
	 **/
	_count?: true | ImplementationPlanCountAggregateInputType;
	/**
	 * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
	 *
	 * Select which fields to average
	 **/
	_avg?: ImplementationPlanAvgAggregateInputType;
	/**
	 * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
	 *
	 * Select which fields to sum
	 **/
	_sum?: ImplementationPlanSumAggregateInputType;
	/**
	 * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
	 *
	 * Select which fields to find the minimum value
	 **/
	_min?: ImplementationPlanMinAggregateInputType;
	/**
	 * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
	 *
	 * Select which fields to find the maximum value
	 **/
	_max?: ImplementationPlanMaxAggregateInputType;
};

export type GetImplementationPlanAggregateType<
	T extends ImplementationPlanAggregateArgs,
> = {
	[P in keyof T & keyof AggregateImplementationPlan]: P extends
		| "_count"
		| "count"
		? T[P] extends true
			? number
			: Prisma.GetScalarType<T[P], AggregateImplementationPlan[P]>
		: Prisma.GetScalarType<T[P], AggregateImplementationPlan[P]>;
};

export type ImplementationPlanGroupByArgs<
	_ExtArgs extends
		runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
	where?: Prisma.ImplementationPlanWhereInput;
	orderBy?:
		| Prisma.ImplementationPlanOrderByWithAggregationInput
		| Prisma.ImplementationPlanOrderByWithAggregationInput[];
	by:
		| Prisma.ImplementationPlanScalarFieldEnum[]
		| Prisma.ImplementationPlanScalarFieldEnum;
	having?: Prisma.ImplementationPlanScalarWhereWithAggregatesInput;
	take?: number;
	skip?: number;
	_count?: ImplementationPlanCountAggregateInputType | true;
	_avg?: ImplementationPlanAvgAggregateInputType;
	_sum?: ImplementationPlanSumAggregateInputType;
	_min?: ImplementationPlanMinAggregateInputType;
	_max?: ImplementationPlanMaxAggregateInputType;
};

export type ImplementationPlanGroupByOutputType = {
	id: string;
	title: string;
	description: string;
	category: $Enums.ImplementationCategory;
	priority: $Enums.ImplementationPriority;
	estimatedTime: string | null;
	dependencies: string[];
	order: number;
	createdAt: Date;
	updatedAt: Date;
	_count: ImplementationPlanCountAggregateOutputType | null;
	_avg: ImplementationPlanAvgAggregateOutputType | null;
	_sum: ImplementationPlanSumAggregateOutputType | null;
	_min: ImplementationPlanMinAggregateOutputType | null;
	_max: ImplementationPlanMaxAggregateOutputType | null;
};

type GetImplementationPlanGroupByPayload<
	T extends ImplementationPlanGroupByArgs,
> = Prisma.PrismaPromise<
	Array<
		Prisma.PickEnumerable<ImplementationPlanGroupByOutputType, T["by"]> & {
			[P in keyof T &
				keyof ImplementationPlanGroupByOutputType]: P extends "_count"
				? T[P] extends boolean
					? number
					: Prisma.GetScalarType<T[P], ImplementationPlanGroupByOutputType[P]>
				: Prisma.GetScalarType<T[P], ImplementationPlanGroupByOutputType[P]>;
		}
	>
>;

export type ImplementationPlanWhereInput = {
	AND?:
		| Prisma.ImplementationPlanWhereInput
		| Prisma.ImplementationPlanWhereInput[];
	OR?: Prisma.ImplementationPlanWhereInput[];
	NOT?:
		| Prisma.ImplementationPlanWhereInput
		| Prisma.ImplementationPlanWhereInput[];
	id?: Prisma.StringFilter<"ImplementationPlan"> | string;
	title?: Prisma.StringFilter<"ImplementationPlan"> | string;
	description?: Prisma.StringFilter<"ImplementationPlan"> | string;
	category?:
		| Prisma.EnumImplementationCategoryFilter<"ImplementationPlan">
		| $Enums.ImplementationCategory;
	priority?:
		| Prisma.EnumImplementationPriorityFilter<"ImplementationPlan">
		| $Enums.ImplementationPriority;
	estimatedTime?:
		| Prisma.StringNullableFilter<"ImplementationPlan">
		| string
		| null;
	dependencies?: Prisma.StringNullableListFilter<"ImplementationPlan">;
	order?: Prisma.IntFilter<"ImplementationPlan"> | number;
	createdAt?: Prisma.DateTimeFilter<"ImplementationPlan"> | Date | string;
	updatedAt?: Prisma.DateTimeFilter<"ImplementationPlan"> | Date | string;
};

export type ImplementationPlanOrderByWithRelationInput = {
	id?: Prisma.SortOrder;
	title?: Prisma.SortOrder;
	description?: Prisma.SortOrder;
	category?: Prisma.SortOrder;
	priority?: Prisma.SortOrder;
	estimatedTime?: Prisma.SortOrderInput | Prisma.SortOrder;
	dependencies?: Prisma.SortOrder;
	order?: Prisma.SortOrder;
	createdAt?: Prisma.SortOrder;
	updatedAt?: Prisma.SortOrder;
};

export type ImplementationPlanWhereUniqueInput = Prisma.AtLeast<
	{
		id?: string;
		AND?:
			| Prisma.ImplementationPlanWhereInput
			| Prisma.ImplementationPlanWhereInput[];
		OR?: Prisma.ImplementationPlanWhereInput[];
		NOT?:
			| Prisma.ImplementationPlanWhereInput
			| Prisma.ImplementationPlanWhereInput[];
		title?: Prisma.StringFilter<"ImplementationPlan"> | string;
		description?: Prisma.StringFilter<"ImplementationPlan"> | string;
		category?:
			| Prisma.EnumImplementationCategoryFilter<"ImplementationPlan">
			| $Enums.ImplementationCategory;
		priority?:
			| Prisma.EnumImplementationPriorityFilter<"ImplementationPlan">
			| $Enums.ImplementationPriority;
		estimatedTime?:
			| Prisma.StringNullableFilter<"ImplementationPlan">
			| string
			| null;
		dependencies?: Prisma.StringNullableListFilter<"ImplementationPlan">;
		order?: Prisma.IntFilter<"ImplementationPlan"> | number;
		createdAt?: Prisma.DateTimeFilter<"ImplementationPlan"> | Date | string;
		updatedAt?: Prisma.DateTimeFilter<"ImplementationPlan"> | Date | string;
	},
	"id"
>;

export type ImplementationPlanOrderByWithAggregationInput = {
	id?: Prisma.SortOrder;
	title?: Prisma.SortOrder;
	description?: Prisma.SortOrder;
	category?: Prisma.SortOrder;
	priority?: Prisma.SortOrder;
	estimatedTime?: Prisma.SortOrderInput | Prisma.SortOrder;
	dependencies?: Prisma.SortOrder;
	order?: Prisma.SortOrder;
	createdAt?: Prisma.SortOrder;
	updatedAt?: Prisma.SortOrder;
	_count?: Prisma.ImplementationPlanCountOrderByAggregateInput;
	_avg?: Prisma.ImplementationPlanAvgOrderByAggregateInput;
	_max?: Prisma.ImplementationPlanMaxOrderByAggregateInput;
	_min?: Prisma.ImplementationPlanMinOrderByAggregateInput;
	_sum?: Prisma.ImplementationPlanSumOrderByAggregateInput;
};

export type ImplementationPlanScalarWhereWithAggregatesInput = {
	AND?:
		| Prisma.ImplementationPlanScalarWhereWithAggregatesInput
		| Prisma.ImplementationPlanScalarWhereWithAggregatesInput[];
	OR?: Prisma.ImplementationPlanScalarWhereWithAggregatesInput[];
	NOT?:
		| Prisma.ImplementationPlanScalarWhereWithAggregatesInput
		| Prisma.ImplementationPlanScalarWhereWithAggregatesInput[];
	id?: Prisma.StringWithAggregatesFilter<"ImplementationPlan"> | string;
	title?: Prisma.StringWithAggregatesFilter<"ImplementationPlan"> | string;
	description?:
		| Prisma.StringWithAggregatesFilter<"ImplementationPlan">
		| string;
	category?:
		| Prisma.EnumImplementationCategoryWithAggregatesFilter<"ImplementationPlan">
		| $Enums.ImplementationCategory;
	priority?:
		| Prisma.EnumImplementationPriorityWithAggregatesFilter<"ImplementationPlan">
		| $Enums.ImplementationPriority;
	estimatedTime?:
		| Prisma.StringNullableWithAggregatesFilter<"ImplementationPlan">
		| string
		| null;
	dependencies?: Prisma.StringNullableListFilter<"ImplementationPlan">;
	order?: Prisma.IntWithAggregatesFilter<"ImplementationPlan"> | number;
	createdAt?:
		| Prisma.DateTimeWithAggregatesFilter<"ImplementationPlan">
		| Date
		| string;
	updatedAt?:
		| Prisma.DateTimeWithAggregatesFilter<"ImplementationPlan">
		| Date
		| string;
};

export type ImplementationPlanCreateInput = {
	id?: string;
	title: string;
	description: string;
	category?: $Enums.ImplementationCategory;
	priority?: $Enums.ImplementationPriority;
	estimatedTime?: string | null;
	dependencies?: Prisma.ImplementationPlanCreatedependenciesInput | string[];
	order?: number;
	createdAt?: Date | string;
	updatedAt?: Date | string;
};

export type ImplementationPlanUncheckedCreateInput = {
	id?: string;
	title: string;
	description: string;
	category?: $Enums.ImplementationCategory;
	priority?: $Enums.ImplementationPriority;
	estimatedTime?: string | null;
	dependencies?: Prisma.ImplementationPlanCreatedependenciesInput | string[];
	order?: number;
	createdAt?: Date | string;
	updatedAt?: Date | string;
};

export type ImplementationPlanUpdateInput = {
	id?: Prisma.StringFieldUpdateOperationsInput | string;
	title?: Prisma.StringFieldUpdateOperationsInput | string;
	description?: Prisma.StringFieldUpdateOperationsInput | string;
	category?:
		| Prisma.EnumImplementationCategoryFieldUpdateOperationsInput
		| $Enums.ImplementationCategory;
	priority?:
		| Prisma.EnumImplementationPriorityFieldUpdateOperationsInput
		| $Enums.ImplementationPriority;
	estimatedTime?:
		| Prisma.NullableStringFieldUpdateOperationsInput
		| string
		| null;
	dependencies?: Prisma.ImplementationPlanUpdatedependenciesInput | string[];
	order?: Prisma.IntFieldUpdateOperationsInput | number;
	createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
	updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
};

export type ImplementationPlanUncheckedUpdateInput = {
	id?: Prisma.StringFieldUpdateOperationsInput | string;
	title?: Prisma.StringFieldUpdateOperationsInput | string;
	description?: Prisma.StringFieldUpdateOperationsInput | string;
	category?:
		| Prisma.EnumImplementationCategoryFieldUpdateOperationsInput
		| $Enums.ImplementationCategory;
	priority?:
		| Prisma.EnumImplementationPriorityFieldUpdateOperationsInput
		| $Enums.ImplementationPriority;
	estimatedTime?:
		| Prisma.NullableStringFieldUpdateOperationsInput
		| string
		| null;
	dependencies?: Prisma.ImplementationPlanUpdatedependenciesInput | string[];
	order?: Prisma.IntFieldUpdateOperationsInput | number;
	createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
	updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
};

export type ImplementationPlanCreateManyInput = {
	id?: string;
	title: string;
	description: string;
	category?: $Enums.ImplementationCategory;
	priority?: $Enums.ImplementationPriority;
	estimatedTime?: string | null;
	dependencies?: Prisma.ImplementationPlanCreatedependenciesInput | string[];
	order?: number;
	createdAt?: Date | string;
	updatedAt?: Date | string;
};

export type ImplementationPlanUpdateManyMutationInput = {
	id?: Prisma.StringFieldUpdateOperationsInput | string;
	title?: Prisma.StringFieldUpdateOperationsInput | string;
	description?: Prisma.StringFieldUpdateOperationsInput | string;
	category?:
		| Prisma.EnumImplementationCategoryFieldUpdateOperationsInput
		| $Enums.ImplementationCategory;
	priority?:
		| Prisma.EnumImplementationPriorityFieldUpdateOperationsInput
		| $Enums.ImplementationPriority;
	estimatedTime?:
		| Prisma.NullableStringFieldUpdateOperationsInput
		| string
		| null;
	dependencies?: Prisma.ImplementationPlanUpdatedependenciesInput | string[];
	order?: Prisma.IntFieldUpdateOperationsInput | number;
	createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
	updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
};

export type ImplementationPlanUncheckedUpdateManyInput = {
	id?: Prisma.StringFieldUpdateOperationsInput | string;
	title?: Prisma.StringFieldUpdateOperationsInput | string;
	description?: Prisma.StringFieldUpdateOperationsInput | string;
	category?:
		| Prisma.EnumImplementationCategoryFieldUpdateOperationsInput
		| $Enums.ImplementationCategory;
	priority?:
		| Prisma.EnumImplementationPriorityFieldUpdateOperationsInput
		| $Enums.ImplementationPriority;
	estimatedTime?:
		| Prisma.NullableStringFieldUpdateOperationsInput
		| string
		| null;
	dependencies?: Prisma.ImplementationPlanUpdatedependenciesInput | string[];
	order?: Prisma.IntFieldUpdateOperationsInput | number;
	createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
	updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
};

export type StringNullableListFilter<$PrismaModel = never> = {
	equals?: string[] | Prisma.ListStringFieldRefInput<$PrismaModel> | null;
	has?: string | Prisma.StringFieldRefInput<$PrismaModel> | null;
	hasEvery?: string[] | Prisma.ListStringFieldRefInput<$PrismaModel>;
	hasSome?: string[] | Prisma.ListStringFieldRefInput<$PrismaModel>;
	isEmpty?: boolean;
};

export type ImplementationPlanCountOrderByAggregateInput = {
	id?: Prisma.SortOrder;
	title?: Prisma.SortOrder;
	description?: Prisma.SortOrder;
	category?: Prisma.SortOrder;
	priority?: Prisma.SortOrder;
	estimatedTime?: Prisma.SortOrder;
	dependencies?: Prisma.SortOrder;
	order?: Prisma.SortOrder;
	createdAt?: Prisma.SortOrder;
	updatedAt?: Prisma.SortOrder;
};

export type ImplementationPlanAvgOrderByAggregateInput = {
	order?: Prisma.SortOrder;
};

export type ImplementationPlanMaxOrderByAggregateInput = {
	id?: Prisma.SortOrder;
	title?: Prisma.SortOrder;
	description?: Prisma.SortOrder;
	category?: Prisma.SortOrder;
	priority?: Prisma.SortOrder;
	estimatedTime?: Prisma.SortOrder;
	order?: Prisma.SortOrder;
	createdAt?: Prisma.SortOrder;
	updatedAt?: Prisma.SortOrder;
};

export type ImplementationPlanMinOrderByAggregateInput = {
	id?: Prisma.SortOrder;
	title?: Prisma.SortOrder;
	description?: Prisma.SortOrder;
	category?: Prisma.SortOrder;
	priority?: Prisma.SortOrder;
	estimatedTime?: Prisma.SortOrder;
	order?: Prisma.SortOrder;
	createdAt?: Prisma.SortOrder;
	updatedAt?: Prisma.SortOrder;
};

export type ImplementationPlanSumOrderByAggregateInput = {
	order?: Prisma.SortOrder;
};

export type ImplementationPlanCreatedependenciesInput = {
	set: string[];
};

export type EnumImplementationCategoryFieldUpdateOperationsInput = {
	set?: $Enums.ImplementationCategory;
};

export type EnumImplementationPriorityFieldUpdateOperationsInput = {
	set?: $Enums.ImplementationPriority;
};

export type ImplementationPlanUpdatedependenciesInput = {
	set?: string[];
	push?: string | string[];
};

export type ImplementationPlanSelect<
	ExtArgs extends
		runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = runtime.Types.Extensions.GetSelect<
	{
		id?: boolean;
		title?: boolean;
		description?: boolean;
		category?: boolean;
		priority?: boolean;
		estimatedTime?: boolean;
		dependencies?: boolean;
		order?: boolean;
		createdAt?: boolean;
		updatedAt?: boolean;
	},
	ExtArgs["result"]["implementationPlan"]
>;

export type ImplementationPlanSelectCreateManyAndReturn<
	ExtArgs extends
		runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = runtime.Types.Extensions.GetSelect<
	{
		id?: boolean;
		title?: boolean;
		description?: boolean;
		category?: boolean;
		priority?: boolean;
		estimatedTime?: boolean;
		dependencies?: boolean;
		order?: boolean;
		createdAt?: boolean;
		updatedAt?: boolean;
	},
	ExtArgs["result"]["implementationPlan"]
>;

export type ImplementationPlanSelectUpdateManyAndReturn<
	ExtArgs extends
		runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = runtime.Types.Extensions.GetSelect<
	{
		id?: boolean;
		title?: boolean;
		description?: boolean;
		category?: boolean;
		priority?: boolean;
		estimatedTime?: boolean;
		dependencies?: boolean;
		order?: boolean;
		createdAt?: boolean;
		updatedAt?: boolean;
	},
	ExtArgs["result"]["implementationPlan"]
>;

export type ImplementationPlanSelectScalar = {
	id?: boolean;
	title?: boolean;
	description?: boolean;
	category?: boolean;
	priority?: boolean;
	estimatedTime?: boolean;
	dependencies?: boolean;
	order?: boolean;
	createdAt?: boolean;
	updatedAt?: boolean;
};

export type ImplementationPlanOmit<
	ExtArgs extends
		runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = runtime.Types.Extensions.GetOmit<
	| "id"
	| "title"
	| "description"
	| "category"
	| "priority"
	| "estimatedTime"
	| "dependencies"
	| "order"
	| "createdAt"
	| "updatedAt",
	ExtArgs["result"]["implementationPlan"]
>;

export type $ImplementationPlanPayload<
	ExtArgs extends
		runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
	name: "ImplementationPlan";
	objects: {};
	scalars: runtime.Types.Extensions.GetPayloadResult<
		{
			id: string;
			title: string;
			description: string;
			category: $Enums.ImplementationCategory;
			priority: $Enums.ImplementationPriority;
			estimatedTime: string | null;
			dependencies: string[];
			order: number;
			createdAt: Date;
			updatedAt: Date;
		},
		ExtArgs["result"]["implementationPlan"]
	>;
	composites: {};
};

export type ImplementationPlanGetPayload<
	S extends boolean | null | undefined | ImplementationPlanDefaultArgs,
> = runtime.Types.Result.GetResult<Prisma.$ImplementationPlanPayload, S>;

export type ImplementationPlanCountArgs<
	_ExtArgs extends
		runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = Omit<
	ImplementationPlanFindManyArgs,
	"select" | "include" | "distinct" | "omit"
> & {
	select?: ImplementationPlanCountAggregateInputType | true;
};

export interface ImplementationPlanDelegate<
	ExtArgs extends
		runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
	GlobalOmitOptions = {},
> {
	[K: symbol]: {
		types: Prisma.TypeMap<ExtArgs>["model"]["ImplementationPlan"];
		meta: { name: "ImplementationPlan" };
	};
	/**
	 * Find zero or one ImplementationPlan that matches the filter.
	 * @param {ImplementationPlanFindUniqueArgs} args - Arguments to find a ImplementationPlan
	 * @example
	 * // Get one ImplementationPlan
	 * const implementationPlan = await prisma.implementationPlan.findUnique({
	 *   where: {
	 *     // ... provide filter here
	 *   }
	 * })
	 */
	findUnique<T extends ImplementationPlanFindUniqueArgs>(
		args: Prisma.SelectSubset<T, ImplementationPlanFindUniqueArgs<ExtArgs>>,
	): Prisma.Prisma__ImplementationPlanClient<
		runtime.Types.Result.GetResult<
			Prisma.$ImplementationPlanPayload<ExtArgs>,
			T,
			"findUnique",
			GlobalOmitOptions
		> | null,
		null,
		ExtArgs,
		GlobalOmitOptions
	>;

	/**
	 * Find one ImplementationPlan that matches the filter or throw an error with `error.code='P2025'`
	 * if no matches were found.
	 * @param {ImplementationPlanFindUniqueOrThrowArgs} args - Arguments to find a ImplementationPlan
	 * @example
	 * // Get one ImplementationPlan
	 * const implementationPlan = await prisma.implementationPlan.findUniqueOrThrow({
	 *   where: {
	 *     // ... provide filter here
	 *   }
	 * })
	 */
	findUniqueOrThrow<T extends ImplementationPlanFindUniqueOrThrowArgs>(
		args: Prisma.SelectSubset<
			T,
			ImplementationPlanFindUniqueOrThrowArgs<ExtArgs>
		>,
	): Prisma.Prisma__ImplementationPlanClient<
		runtime.Types.Result.GetResult<
			Prisma.$ImplementationPlanPayload<ExtArgs>,
			T,
			"findUniqueOrThrow",
			GlobalOmitOptions
		>,
		never,
		ExtArgs,
		GlobalOmitOptions
	>;

	/**
	 * Find the first ImplementationPlan that matches the filter.
	 * Note, that providing `undefined` is treated as the value not being there.
	 * Read more here: https://pris.ly/d/null-undefined
	 * @param {ImplementationPlanFindFirstArgs} args - Arguments to find a ImplementationPlan
	 * @example
	 * // Get one ImplementationPlan
	 * const implementationPlan = await prisma.implementationPlan.findFirst({
	 *   where: {
	 *     // ... provide filter here
	 *   }
	 * })
	 */
	findFirst<T extends ImplementationPlanFindFirstArgs>(
		args?: Prisma.SelectSubset<T, ImplementationPlanFindFirstArgs<ExtArgs>>,
	): Prisma.Prisma__ImplementationPlanClient<
		runtime.Types.Result.GetResult<
			Prisma.$ImplementationPlanPayload<ExtArgs>,
			T,
			"findFirst",
			GlobalOmitOptions
		> | null,
		null,
		ExtArgs,
		GlobalOmitOptions
	>;

	/**
	 * Find the first ImplementationPlan that matches the filter or
	 * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
	 * Note, that providing `undefined` is treated as the value not being there.
	 * Read more here: https://pris.ly/d/null-undefined
	 * @param {ImplementationPlanFindFirstOrThrowArgs} args - Arguments to find a ImplementationPlan
	 * @example
	 * // Get one ImplementationPlan
	 * const implementationPlan = await prisma.implementationPlan.findFirstOrThrow({
	 *   where: {
	 *     // ... provide filter here
	 *   }
	 * })
	 */
	findFirstOrThrow<T extends ImplementationPlanFindFirstOrThrowArgs>(
		args?: Prisma.SelectSubset<
			T,
			ImplementationPlanFindFirstOrThrowArgs<ExtArgs>
		>,
	): Prisma.Prisma__ImplementationPlanClient<
		runtime.Types.Result.GetResult<
			Prisma.$ImplementationPlanPayload<ExtArgs>,
			T,
			"findFirstOrThrow",
			GlobalOmitOptions
		>,
		never,
		ExtArgs,
		GlobalOmitOptions
	>;

	/**
	 * Find zero or more ImplementationPlans that matches the filter.
	 * Note, that providing `undefined` is treated as the value not being there.
	 * Read more here: https://pris.ly/d/null-undefined
	 * @param {ImplementationPlanFindManyArgs} args - Arguments to filter and select certain fields only.
	 * @example
	 * // Get all ImplementationPlans
	 * const implementationPlans = await prisma.implementationPlan.findMany()
	 *
	 * // Get first 10 ImplementationPlans
	 * const implementationPlans = await prisma.implementationPlan.findMany({ take: 10 })
	 *
	 * // Only select the `id`
	 * const implementationPlanWithIdOnly = await prisma.implementationPlan.findMany({ select: { id: true } })
	 *
	 */
	findMany<T extends ImplementationPlanFindManyArgs>(
		args?: Prisma.SelectSubset<T, ImplementationPlanFindManyArgs<ExtArgs>>,
	): Prisma.PrismaPromise<
		runtime.Types.Result.GetResult<
			Prisma.$ImplementationPlanPayload<ExtArgs>,
			T,
			"findMany",
			GlobalOmitOptions
		>
	>;

	/**
	 * Create a ImplementationPlan.
	 * @param {ImplementationPlanCreateArgs} args - Arguments to create a ImplementationPlan.
	 * @example
	 * // Create one ImplementationPlan
	 * const ImplementationPlan = await prisma.implementationPlan.create({
	 *   data: {
	 *     // ... data to create a ImplementationPlan
	 *   }
	 * })
	 *
	 */
	create<T extends ImplementationPlanCreateArgs>(
		args: Prisma.SelectSubset<T, ImplementationPlanCreateArgs<ExtArgs>>,
	): Prisma.Prisma__ImplementationPlanClient<
		runtime.Types.Result.GetResult<
			Prisma.$ImplementationPlanPayload<ExtArgs>,
			T,
			"create",
			GlobalOmitOptions
		>,
		never,
		ExtArgs,
		GlobalOmitOptions
	>;

	/**
	 * Create many ImplementationPlans.
	 * @param {ImplementationPlanCreateManyArgs} args - Arguments to create many ImplementationPlans.
	 * @example
	 * // Create many ImplementationPlans
	 * const implementationPlan = await prisma.implementationPlan.createMany({
	 *   data: [
	 *     // ... provide data here
	 *   ]
	 * })
	 *
	 */
	createMany<T extends ImplementationPlanCreateManyArgs>(
		args?: Prisma.SelectSubset<T, ImplementationPlanCreateManyArgs<ExtArgs>>,
	): Prisma.PrismaPromise<Prisma.BatchPayload>;

	/**
	 * Create many ImplementationPlans and returns the data saved in the database.
	 * @param {ImplementationPlanCreateManyAndReturnArgs} args - Arguments to create many ImplementationPlans.
	 * @example
	 * // Create many ImplementationPlans
	 * const implementationPlan = await prisma.implementationPlan.createManyAndReturn({
	 *   data: [
	 *     // ... provide data here
	 *   ]
	 * })
	 *
	 * // Create many ImplementationPlans and only return the `id`
	 * const implementationPlanWithIdOnly = await prisma.implementationPlan.createManyAndReturn({
	 *   select: { id: true },
	 *   data: [
	 *     // ... provide data here
	 *   ]
	 * })
	 * Note, that providing `undefined` is treated as the value not being there.
	 * Read more here: https://pris.ly/d/null-undefined
	 *
	 */
	createManyAndReturn<T extends ImplementationPlanCreateManyAndReturnArgs>(
		args?: Prisma.SelectSubset<
			T,
			ImplementationPlanCreateManyAndReturnArgs<ExtArgs>
		>,
	): Prisma.PrismaPromise<
		runtime.Types.Result.GetResult<
			Prisma.$ImplementationPlanPayload<ExtArgs>,
			T,
			"createManyAndReturn",
			GlobalOmitOptions
		>
	>;

	/**
	 * Delete a ImplementationPlan.
	 * @param {ImplementationPlanDeleteArgs} args - Arguments to delete one ImplementationPlan.
	 * @example
	 * // Delete one ImplementationPlan
	 * const ImplementationPlan = await prisma.implementationPlan.delete({
	 *   where: {
	 *     // ... filter to delete one ImplementationPlan
	 *   }
	 * })
	 *
	 */
	delete<T extends ImplementationPlanDeleteArgs>(
		args: Prisma.SelectSubset<T, ImplementationPlanDeleteArgs<ExtArgs>>,
	): Prisma.Prisma__ImplementationPlanClient<
		runtime.Types.Result.GetResult<
			Prisma.$ImplementationPlanPayload<ExtArgs>,
			T,
			"delete",
			GlobalOmitOptions
		>,
		never,
		ExtArgs,
		GlobalOmitOptions
	>;

	/**
	 * Update one ImplementationPlan.
	 * @param {ImplementationPlanUpdateArgs} args - Arguments to update one ImplementationPlan.
	 * @example
	 * // Update one ImplementationPlan
	 * const implementationPlan = await prisma.implementationPlan.update({
	 *   where: {
	 *     // ... provide filter here
	 *   },
	 *   data: {
	 *     // ... provide data here
	 *   }
	 * })
	 *
	 */
	update<T extends ImplementationPlanUpdateArgs>(
		args: Prisma.SelectSubset<T, ImplementationPlanUpdateArgs<ExtArgs>>,
	): Prisma.Prisma__ImplementationPlanClient<
		runtime.Types.Result.GetResult<
			Prisma.$ImplementationPlanPayload<ExtArgs>,
			T,
			"update",
			GlobalOmitOptions
		>,
		never,
		ExtArgs,
		GlobalOmitOptions
	>;

	/**
	 * Delete zero or more ImplementationPlans.
	 * @param {ImplementationPlanDeleteManyArgs} args - Arguments to filter ImplementationPlans to delete.
	 * @example
	 * // Delete a few ImplementationPlans
	 * const { count } = await prisma.implementationPlan.deleteMany({
	 *   where: {
	 *     // ... provide filter here
	 *   }
	 * })
	 *
	 */
	deleteMany<T extends ImplementationPlanDeleteManyArgs>(
		args?: Prisma.SelectSubset<T, ImplementationPlanDeleteManyArgs<ExtArgs>>,
	): Prisma.PrismaPromise<Prisma.BatchPayload>;

	/**
	 * Update zero or more ImplementationPlans.
	 * Note, that providing `undefined` is treated as the value not being there.
	 * Read more here: https://pris.ly/d/null-undefined
	 * @param {ImplementationPlanUpdateManyArgs} args - Arguments to update one or more rows.
	 * @example
	 * // Update many ImplementationPlans
	 * const implementationPlan = await prisma.implementationPlan.updateMany({
	 *   where: {
	 *     // ... provide filter here
	 *   },
	 *   data: {
	 *     // ... provide data here
	 *   }
	 * })
	 *
	 */
	updateMany<T extends ImplementationPlanUpdateManyArgs>(
		args: Prisma.SelectSubset<T, ImplementationPlanUpdateManyArgs<ExtArgs>>,
	): Prisma.PrismaPromise<Prisma.BatchPayload>;

	/**
	 * Update zero or more ImplementationPlans and returns the data updated in the database.
	 * @param {ImplementationPlanUpdateManyAndReturnArgs} args - Arguments to update many ImplementationPlans.
	 * @example
	 * // Update many ImplementationPlans
	 * const implementationPlan = await prisma.implementationPlan.updateManyAndReturn({
	 *   where: {
	 *     // ... provide filter here
	 *   },
	 *   data: [
	 *     // ... provide data here
	 *   ]
	 * })
	 *
	 * // Update zero or more ImplementationPlans and only return the `id`
	 * const implementationPlanWithIdOnly = await prisma.implementationPlan.updateManyAndReturn({
	 *   select: { id: true },
	 *   where: {
	 *     // ... provide filter here
	 *   },
	 *   data: [
	 *     // ... provide data here
	 *   ]
	 * })
	 * Note, that providing `undefined` is treated as the value not being there.
	 * Read more here: https://pris.ly/d/null-undefined
	 *
	 */
	updateManyAndReturn<T extends ImplementationPlanUpdateManyAndReturnArgs>(
		args: Prisma.SelectSubset<
			T,
			ImplementationPlanUpdateManyAndReturnArgs<ExtArgs>
		>,
	): Prisma.PrismaPromise<
		runtime.Types.Result.GetResult<
			Prisma.$ImplementationPlanPayload<ExtArgs>,
			T,
			"updateManyAndReturn",
			GlobalOmitOptions
		>
	>;

	/**
	 * Create or update one ImplementationPlan.
	 * @param {ImplementationPlanUpsertArgs} args - Arguments to update or create a ImplementationPlan.
	 * @example
	 * // Update or create a ImplementationPlan
	 * const implementationPlan = await prisma.implementationPlan.upsert({
	 *   create: {
	 *     // ... data to create a ImplementationPlan
	 *   },
	 *   update: {
	 *     // ... in case it already exists, update
	 *   },
	 *   where: {
	 *     // ... the filter for the ImplementationPlan we want to update
	 *   }
	 * })
	 */
	upsert<T extends ImplementationPlanUpsertArgs>(
		args: Prisma.SelectSubset<T, ImplementationPlanUpsertArgs<ExtArgs>>,
	): Prisma.Prisma__ImplementationPlanClient<
		runtime.Types.Result.GetResult<
			Prisma.$ImplementationPlanPayload<ExtArgs>,
			T,
			"upsert",
			GlobalOmitOptions
		>,
		never,
		ExtArgs,
		GlobalOmitOptions
	>;

	/**
	 * Count the number of ImplementationPlans.
	 * Note, that providing `undefined` is treated as the value not being there.
	 * Read more here: https://pris.ly/d/null-undefined
	 * @param {ImplementationPlanCountArgs} args - Arguments to filter ImplementationPlans to count.
	 * @example
	 * // Count the number of ImplementationPlans
	 * const count = await prisma.implementationPlan.count({
	 *   where: {
	 *     // ... the filter for the ImplementationPlans we want to count
	 *   }
	 * })
	 **/
	count<T extends ImplementationPlanCountArgs>(
		args?: Prisma.Subset<T, ImplementationPlanCountArgs>,
	): Prisma.PrismaPromise<
		T extends runtime.Types.Utils.Record<"select", any>
			? T["select"] extends true
				? number
				: Prisma.GetScalarType<
						T["select"],
						ImplementationPlanCountAggregateOutputType
					>
			: number
	>;

	/**
	 * Allows you to perform aggregations operations on a ImplementationPlan.
	 * Note, that providing `undefined` is treated as the value not being there.
	 * Read more here: https://pris.ly/d/null-undefined
	 * @param {ImplementationPlanAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
	 * @example
	 * // Ordered by age ascending
	 * // Where email contains prisma.io
	 * // Limited to the 10 users
	 * const aggregations = await prisma.user.aggregate({
	 *   _avg: {
	 *     age: true,
	 *   },
	 *   where: {
	 *     email: {
	 *       contains: "prisma.io",
	 *     },
	 *   },
	 *   orderBy: {
	 *     age: "asc",
	 *   },
	 *   take: 10,
	 * })
	 **/
	aggregate<T extends ImplementationPlanAggregateArgs>(
		args: Prisma.Subset<T, ImplementationPlanAggregateArgs>,
	): Prisma.PrismaPromise<GetImplementationPlanAggregateType<T>>;

	/**
	 * Group by ImplementationPlan.
	 * Note, that providing `undefined` is treated as the value not being there.
	 * Read more here: https://pris.ly/d/null-undefined
	 * @param {ImplementationPlanGroupByArgs} args - Group by arguments.
	 * @example
	 * // Group by city, order by createdAt, get count
	 * const result = await prisma.user.groupBy({
	 *   by: ['city', 'createdAt'],
	 *   orderBy: {
	 *     createdAt: true
	 *   },
	 *   _count: {
	 *     _all: true
	 *   },
	 * })
	 *
	 **/
	groupBy<
		T extends ImplementationPlanGroupByArgs,
		HasSelectOrTake extends Prisma.Or<
			Prisma.Extends<"skip", Prisma.Keys<T>>,
			Prisma.Extends<"take", Prisma.Keys<T>>
		>,
		OrderByArg extends Prisma.True extends HasSelectOrTake
			? { orderBy: ImplementationPlanGroupByArgs["orderBy"] }
			: { orderBy?: ImplementationPlanGroupByArgs["orderBy"] },
		OrderFields extends Prisma.ExcludeUnderscoreKeys<
			Prisma.Keys<Prisma.MaybeTupleToUnion<T["orderBy"]>>
		>,
		ByFields extends Prisma.MaybeTupleToUnion<T["by"]>,
		ByValid extends Prisma.Has<ByFields, OrderFields>,
		HavingFields extends Prisma.GetHavingFields<T["having"]>,
		HavingValid extends Prisma.Has<ByFields, HavingFields>,
		ByEmpty extends T["by"] extends never[] ? Prisma.True : Prisma.False,
		InputErrors extends ByEmpty extends Prisma.True
			? `Error: "by" must not be empty.`
			: HavingValid extends Prisma.False
				? {
						[P in HavingFields]: P extends ByFields
							? never
							: P extends string
								? `Error: Field "${P}" used in "having" needs to be provided in "by".`
								: [
										Error,
										"Field ",
										P,
										` in "having" needs to be provided in "by"`,
									];
					}[HavingFields]
				: "take" extends Prisma.Keys<T>
					? "orderBy" extends Prisma.Keys<T>
						? ByValid extends Prisma.True
							? {}
							: {
									[P in OrderFields]: P extends ByFields
										? never
										: `Error: Field "${P}" in "orderBy" needs to be provided in "by"`;
								}[OrderFields]
						: 'Error: If you provide "take", you also need to provide "orderBy"'
					: "skip" extends Prisma.Keys<T>
						? "orderBy" extends Prisma.Keys<T>
							? ByValid extends Prisma.True
								? {}
								: {
										[P in OrderFields]: P extends ByFields
											? never
											: `Error: Field "${P}" in "orderBy" needs to be provided in "by"`;
									}[OrderFields]
							: 'Error: If you provide "skip", you also need to provide "orderBy"'
						: ByValid extends Prisma.True
							? {}
							: {
									[P in OrderFields]: P extends ByFields
										? never
										: `Error: Field "${P}" in "orderBy" needs to be provided in "by"`;
								}[OrderFields],
	>(
		args: Prisma.SubsetIntersection<
			T,
			ImplementationPlanGroupByArgs,
			OrderByArg
		> &
			InputErrors,
	): {} extends InputErrors
		? GetImplementationPlanGroupByPayload<T>
		: Prisma.PrismaPromise<InputErrors>;
	/**
	 * Fields of the ImplementationPlan model
	 */
	readonly fields: ImplementationPlanFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for ImplementationPlan.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__ImplementationPlanClient<
	T,
	_Null = never,
	_ExtArgs extends
		runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
	_GlobalOmitOptions = {},
> extends Prisma.PrismaPromise<T> {
	readonly [Symbol.toStringTag]: "PrismaPromise";
	/**
	 * Attaches callbacks for the resolution and/or rejection of the Promise.
	 * @param onfulfilled The callback to execute when the Promise is resolved.
	 * @param onrejected The callback to execute when the Promise is rejected.
	 * @returns A Promise for the completion of which ever callback is executed.
	 */
	then<TResult1 = T, TResult2 = never>(
		onfulfilled?:
			| ((value: T) => TResult1 | PromiseLike<TResult1>)
			| undefined
			| null,
		onrejected?:
			| ((reason: any) => TResult2 | PromiseLike<TResult2>)
			| undefined
			| null,
	): runtime.Types.Utils.JsPromise<TResult1 | TResult2>;
	/**
	 * Attaches a callback for only the rejection of the Promise.
	 * @param onrejected The callback to execute when the Promise is rejected.
	 * @returns A Promise for the completion of the callback.
	 */
	catch<TResult = never>(
		onrejected?:
			| ((reason: any) => TResult | PromiseLike<TResult>)
			| undefined
			| null,
	): runtime.Types.Utils.JsPromise<T | TResult>;
	/**
	 * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
	 * resolved value cannot be modified from the callback.
	 * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
	 * @returns A Promise for the completion of the callback.
	 */
	finally(
		onfinally?: (() => void) | undefined | null,
	): runtime.Types.Utils.JsPromise<T>;
}

/**
 * Fields of the ImplementationPlan model
 */
export interface ImplementationPlanFieldRefs {
	readonly id: Prisma.FieldRef<"ImplementationPlan", "String">;
	readonly title: Prisma.FieldRef<"ImplementationPlan", "String">;
	readonly description: Prisma.FieldRef<"ImplementationPlan", "String">;
	readonly category: Prisma.FieldRef<
		"ImplementationPlan",
		"ImplementationCategory"
	>;
	readonly priority: Prisma.FieldRef<
		"ImplementationPlan",
		"ImplementationPriority"
	>;
	readonly estimatedTime: Prisma.FieldRef<"ImplementationPlan", "String">;
	readonly dependencies: Prisma.FieldRef<"ImplementationPlan", "String[]">;
	readonly order: Prisma.FieldRef<"ImplementationPlan", "Int">;
	readonly createdAt: Prisma.FieldRef<"ImplementationPlan", "DateTime">;
	readonly updatedAt: Prisma.FieldRef<"ImplementationPlan", "DateTime">;
}

// Custom InputTypes
/**
 * ImplementationPlan findUnique
 */
export type ImplementationPlanFindUniqueArgs<
	ExtArgs extends
		runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
	/**
	 * Select specific fields to fetch from the ImplementationPlan
	 */
	select?: Prisma.ImplementationPlanSelect<ExtArgs> | null;
	/**
	 * Omit specific fields from the ImplementationPlan
	 */
	omit?: Prisma.ImplementationPlanOmit<ExtArgs> | null;
	/**
	 * Filter, which ImplementationPlan to fetch.
	 */
	where: Prisma.ImplementationPlanWhereUniqueInput;
};

/**
 * ImplementationPlan findUniqueOrThrow
 */
export type ImplementationPlanFindUniqueOrThrowArgs<
	ExtArgs extends
		runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
	/**
	 * Select specific fields to fetch from the ImplementationPlan
	 */
	select?: Prisma.ImplementationPlanSelect<ExtArgs> | null;
	/**
	 * Omit specific fields from the ImplementationPlan
	 */
	omit?: Prisma.ImplementationPlanOmit<ExtArgs> | null;
	/**
	 * Filter, which ImplementationPlan to fetch.
	 */
	where: Prisma.ImplementationPlanWhereUniqueInput;
};

/**
 * ImplementationPlan findFirst
 */
export type ImplementationPlanFindFirstArgs<
	ExtArgs extends
		runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
	/**
	 * Select specific fields to fetch from the ImplementationPlan
	 */
	select?: Prisma.ImplementationPlanSelect<ExtArgs> | null;
	/**
	 * Omit specific fields from the ImplementationPlan
	 */
	omit?: Prisma.ImplementationPlanOmit<ExtArgs> | null;
	/**
	 * Filter, which ImplementationPlan to fetch.
	 */
	where?: Prisma.ImplementationPlanWhereInput;
	/**
	 * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
	 *
	 * Determine the order of ImplementationPlans to fetch.
	 */
	orderBy?:
		| Prisma.ImplementationPlanOrderByWithRelationInput
		| Prisma.ImplementationPlanOrderByWithRelationInput[];
	/**
	 * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
	 *
	 * Sets the position for searching for ImplementationPlans.
	 */
	cursor?: Prisma.ImplementationPlanWhereUniqueInput;
	/**
	 * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
	 *
	 * Take `Â±n` ImplementationPlans from the position of the cursor.
	 */
	take?: number;
	/**
	 * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
	 *
	 * Skip the first `n` ImplementationPlans.
	 */
	skip?: number;
	/**
	 * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
	 *
	 * Filter by unique combinations of ImplementationPlans.
	 */
	distinct?:
		| Prisma.ImplementationPlanScalarFieldEnum
		| Prisma.ImplementationPlanScalarFieldEnum[];
};

/**
 * ImplementationPlan findFirstOrThrow
 */
export type ImplementationPlanFindFirstOrThrowArgs<
	ExtArgs extends
		runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
	/**
	 * Select specific fields to fetch from the ImplementationPlan
	 */
	select?: Prisma.ImplementationPlanSelect<ExtArgs> | null;
	/**
	 * Omit specific fields from the ImplementationPlan
	 */
	omit?: Prisma.ImplementationPlanOmit<ExtArgs> | null;
	/**
	 * Filter, which ImplementationPlan to fetch.
	 */
	where?: Prisma.ImplementationPlanWhereInput;
	/**
	 * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
	 *
	 * Determine the order of ImplementationPlans to fetch.
	 */
	orderBy?:
		| Prisma.ImplementationPlanOrderByWithRelationInput
		| Prisma.ImplementationPlanOrderByWithRelationInput[];
	/**
	 * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
	 *
	 * Sets the position for searching for ImplementationPlans.
	 */
	cursor?: Prisma.ImplementationPlanWhereUniqueInput;
	/**
	 * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
	 *
	 * Take `Â±n` ImplementationPlans from the position of the cursor.
	 */
	take?: number;
	/**
	 * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
	 *
	 * Skip the first `n` ImplementationPlans.
	 */
	skip?: number;
	/**
	 * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
	 *
	 * Filter by unique combinations of ImplementationPlans.
	 */
	distinct?:
		| Prisma.ImplementationPlanScalarFieldEnum
		| Prisma.ImplementationPlanScalarFieldEnum[];
};

/**
 * ImplementationPlan findMany
 */
export type ImplementationPlanFindManyArgs<
	ExtArgs extends
		runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
	/**
	 * Select specific fields to fetch from the ImplementationPlan
	 */
	select?: Prisma.ImplementationPlanSelect<ExtArgs> | null;
	/**
	 * Omit specific fields from the ImplementationPlan
	 */
	omit?: Prisma.ImplementationPlanOmit<ExtArgs> | null;
	/**
	 * Filter, which ImplementationPlans to fetch.
	 */
	where?: Prisma.ImplementationPlanWhereInput;
	/**
	 * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
	 *
	 * Determine the order of ImplementationPlans to fetch.
	 */
	orderBy?:
		| Prisma.ImplementationPlanOrderByWithRelationInput
		| Prisma.ImplementationPlanOrderByWithRelationInput[];
	/**
	 * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
	 *
	 * Sets the position for listing ImplementationPlans.
	 */
	cursor?: Prisma.ImplementationPlanWhereUniqueInput;
	/**
	 * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
	 *
	 * Take `Â±n` ImplementationPlans from the position of the cursor.
	 */
	take?: number;
	/**
	 * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
	 *
	 * Skip the first `n` ImplementationPlans.
	 */
	skip?: number;
	distinct?:
		| Prisma.ImplementationPlanScalarFieldEnum
		| Prisma.ImplementationPlanScalarFieldEnum[];
};

/**
 * ImplementationPlan create
 */
export type ImplementationPlanCreateArgs<
	ExtArgs extends
		runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
	/**
	 * Select specific fields to fetch from the ImplementationPlan
	 */
	select?: Prisma.ImplementationPlanSelect<ExtArgs> | null;
	/**
	 * Omit specific fields from the ImplementationPlan
	 */
	omit?: Prisma.ImplementationPlanOmit<ExtArgs> | null;
	/**
	 * The data needed to create a ImplementationPlan.
	 */
	data: Prisma.XOR<
		Prisma.ImplementationPlanCreateInput,
		Prisma.ImplementationPlanUncheckedCreateInput
	>;
};

/**
 * ImplementationPlan createMany
 */
export type ImplementationPlanCreateManyArgs<
	_ExtArgs extends
		runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
	/**
	 * The data used to create many ImplementationPlans.
	 */
	data:
		| Prisma.ImplementationPlanCreateManyInput
		| Prisma.ImplementationPlanCreateManyInput[];
	skipDuplicates?: boolean;
};

/**
 * ImplementationPlan createManyAndReturn
 */
export type ImplementationPlanCreateManyAndReturnArgs<
	ExtArgs extends
		runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
	/**
	 * Select specific fields to fetch from the ImplementationPlan
	 */
	select?: Prisma.ImplementationPlanSelectCreateManyAndReturn<ExtArgs> | null;
	/**
	 * Omit specific fields from the ImplementationPlan
	 */
	omit?: Prisma.ImplementationPlanOmit<ExtArgs> | null;
	/**
	 * The data used to create many ImplementationPlans.
	 */
	data:
		| Prisma.ImplementationPlanCreateManyInput
		| Prisma.ImplementationPlanCreateManyInput[];
	skipDuplicates?: boolean;
};

/**
 * ImplementationPlan update
 */
export type ImplementationPlanUpdateArgs<
	ExtArgs extends
		runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
	/**
	 * Select specific fields to fetch from the ImplementationPlan
	 */
	select?: Prisma.ImplementationPlanSelect<ExtArgs> | null;
	/**
	 * Omit specific fields from the ImplementationPlan
	 */
	omit?: Prisma.ImplementationPlanOmit<ExtArgs> | null;
	/**
	 * The data needed to update a ImplementationPlan.
	 */
	data: Prisma.XOR<
		Prisma.ImplementationPlanUpdateInput,
		Prisma.ImplementationPlanUncheckedUpdateInput
	>;
	/**
	 * Choose, which ImplementationPlan to update.
	 */
	where: Prisma.ImplementationPlanWhereUniqueInput;
};

/**
 * ImplementationPlan updateMany
 */
export type ImplementationPlanUpdateManyArgs<
	_ExtArgs extends
		runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
	/**
	 * The data used to update ImplementationPlans.
	 */
	data: Prisma.XOR<
		Prisma.ImplementationPlanUpdateManyMutationInput,
		Prisma.ImplementationPlanUncheckedUpdateManyInput
	>;
	/**
	 * Filter which ImplementationPlans to update
	 */
	where?: Prisma.ImplementationPlanWhereInput;
	/**
	 * Limit how many ImplementationPlans to update.
	 */
	limit?: number;
};

/**
 * ImplementationPlan updateManyAndReturn
 */
export type ImplementationPlanUpdateManyAndReturnArgs<
	ExtArgs extends
		runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
	/**
	 * Select specific fields to fetch from the ImplementationPlan
	 */
	select?: Prisma.ImplementationPlanSelectUpdateManyAndReturn<ExtArgs> | null;
	/**
	 * Omit specific fields from the ImplementationPlan
	 */
	omit?: Prisma.ImplementationPlanOmit<ExtArgs> | null;
	/**
	 * The data used to update ImplementationPlans.
	 */
	data: Prisma.XOR<
		Prisma.ImplementationPlanUpdateManyMutationInput,
		Prisma.ImplementationPlanUncheckedUpdateManyInput
	>;
	/**
	 * Filter which ImplementationPlans to update
	 */
	where?: Prisma.ImplementationPlanWhereInput;
	/**
	 * Limit how many ImplementationPlans to update.
	 */
	limit?: number;
};

/**
 * ImplementationPlan upsert
 */
export type ImplementationPlanUpsertArgs<
	ExtArgs extends
		runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
	/**
	 * Select specific fields to fetch from the ImplementationPlan
	 */
	select?: Prisma.ImplementationPlanSelect<ExtArgs> | null;
	/**
	 * Omit specific fields from the ImplementationPlan
	 */
	omit?: Prisma.ImplementationPlanOmit<ExtArgs> | null;
	/**
	 * The filter to search for the ImplementationPlan to update in case it exists.
	 */
	where: Prisma.ImplementationPlanWhereUniqueInput;
	/**
	 * In case the ImplementationPlan found by the `where` argument doesn't exist, create a new ImplementationPlan with this data.
	 */
	create: Prisma.XOR<
		Prisma.ImplementationPlanCreateInput,
		Prisma.ImplementationPlanUncheckedCreateInput
	>;
	/**
	 * In case the ImplementationPlan was found with the provided `where` argument, update it with this data.
	 */
	update: Prisma.XOR<
		Prisma.ImplementationPlanUpdateInput,
		Prisma.ImplementationPlanUncheckedUpdateInput
	>;
};

/**
 * ImplementationPlan delete
 */
export type ImplementationPlanDeleteArgs<
	ExtArgs extends
		runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
	/**
	 * Select specific fields to fetch from the ImplementationPlan
	 */
	select?: Prisma.ImplementationPlanSelect<ExtArgs> | null;
	/**
	 * Omit specific fields from the ImplementationPlan
	 */
	omit?: Prisma.ImplementationPlanOmit<ExtArgs> | null;
	/**
	 * Filter which ImplementationPlan to delete.
	 */
	where: Prisma.ImplementationPlanWhereUniqueInput;
};

/**
 * ImplementationPlan deleteMany
 */
export type ImplementationPlanDeleteManyArgs<
	_ExtArgs extends
		runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
	/**
	 * Filter which ImplementationPlans to delete
	 */
	where?: Prisma.ImplementationPlanWhereInput;
	/**
	 * Limit how many ImplementationPlans to delete.
	 */
	limit?: number;
};

/**
 * ImplementationPlan without action
 */
export type ImplementationPlanDefaultArgs<
	ExtArgs extends
		runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
	/**
	 * Select specific fields to fetch from the ImplementationPlan
	 */
	select?: Prisma.ImplementationPlanSelect<ExtArgs> | null;
	/**
	 * Omit specific fields from the ImplementationPlan
	 */
	omit?: Prisma.ImplementationPlanOmit<ExtArgs> | null;
};
