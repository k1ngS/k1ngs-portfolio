/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck
/**
 * This file exports the `Project` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import type * as runtime from "@prisma/client/runtime/library";
import type * as $Enums from "../enums";
import type * as Prisma from "../internal/prismaNamespace";

/**
 * Model Project
 *
 */
export type ProjectModel =
	runtime.Types.Result.DefaultSelection<Prisma.$ProjectPayload>;

export type AggregateProject = {
	_count: ProjectCountAggregateOutputType | null;
	_avg: ProjectAvgAggregateOutputType | null;
	_sum: ProjectSumAggregateOutputType | null;
	_min: ProjectMinAggregateOutputType | null;
	_max: ProjectMaxAggregateOutputType | null;
};

export type ProjectAvgAggregateOutputType = {
	order: number | null;
};

export type ProjectSumAggregateOutputType = {
	order: number | null;
};

export type ProjectMinAggregateOutputType = {
	id: string | null;
	title: string | null;
	description: string | null;
	content: string | null;
	category: $Enums.ProjectCategory | null;
	status: $Enums.ProjectStatus | null;
	featured: boolean | null;
	githubUrl: string | null;
	demoUrl: string | null;
	imageUrl: string | null;
	order: number | null;
	createdAt: Date | null;
	updatedAt: Date | null;
};

export type ProjectMaxAggregateOutputType = {
	id: string | null;
	title: string | null;
	description: string | null;
	content: string | null;
	category: $Enums.ProjectCategory | null;
	status: $Enums.ProjectStatus | null;
	featured: boolean | null;
	githubUrl: string | null;
	demoUrl: string | null;
	imageUrl: string | null;
	order: number | null;
	createdAt: Date | null;
	updatedAt: Date | null;
};

export type ProjectCountAggregateOutputType = {
	id: number;
	title: number;
	description: number;
	content: number;
	category: number;
	status: number;
	featured: number;
	githubUrl: number;
	demoUrl: number;
	imageUrl: number;
	order: number;
	createdAt: number;
	updatedAt: number;
	_all: number;
};

export type ProjectAvgAggregateInputType = {
	order?: true;
};

export type ProjectSumAggregateInputType = {
	order?: true;
};

export type ProjectMinAggregateInputType = {
	id?: true;
	title?: true;
	description?: true;
	content?: true;
	category?: true;
	status?: true;
	featured?: true;
	githubUrl?: true;
	demoUrl?: true;
	imageUrl?: true;
	order?: true;
	createdAt?: true;
	updatedAt?: true;
};

export type ProjectMaxAggregateInputType = {
	id?: true;
	title?: true;
	description?: true;
	content?: true;
	category?: true;
	status?: true;
	featured?: true;
	githubUrl?: true;
	demoUrl?: true;
	imageUrl?: true;
	order?: true;
	createdAt?: true;
	updatedAt?: true;
};

export type ProjectCountAggregateInputType = {
	id?: true;
	title?: true;
	description?: true;
	content?: true;
	category?: true;
	status?: true;
	featured?: true;
	githubUrl?: true;
	demoUrl?: true;
	imageUrl?: true;
	order?: true;
	createdAt?: true;
	updatedAt?: true;
	_all?: true;
};

export type ProjectAggregateArgs<
	_ExtArgs extends
		runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
	/**
	 * Filter which Project to aggregate.
	 */
	where?: Prisma.ProjectWhereInput;
	/**
	 * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
	 *
	 * Determine the order of Projects to fetch.
	 */
	orderBy?:
		| Prisma.ProjectOrderByWithRelationInput
		| Prisma.ProjectOrderByWithRelationInput[];
	/**
	 * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
	 *
	 * Sets the start position
	 */
	cursor?: Prisma.ProjectWhereUniqueInput;
	/**
	 * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
	 *
	 * Take `Â±n` Projects from the position of the cursor.
	 */
	take?: number;
	/**
	 * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
	 *
	 * Skip the first `n` Projects.
	 */
	skip?: number;
	/**
	 * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
	 *
	 * Count returned Projects
	 **/
	_count?: true | ProjectCountAggregateInputType;
	/**
	 * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
	 *
	 * Select which fields to average
	 **/
	_avg?: ProjectAvgAggregateInputType;
	/**
	 * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
	 *
	 * Select which fields to sum
	 **/
	_sum?: ProjectSumAggregateInputType;
	/**
	 * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
	 *
	 * Select which fields to find the minimum value
	 **/
	_min?: ProjectMinAggregateInputType;
	/**
	 * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
	 *
	 * Select which fields to find the maximum value
	 **/
	_max?: ProjectMaxAggregateInputType;
};

export type GetProjectAggregateType<T extends ProjectAggregateArgs> = {
	[P in keyof T & keyof AggregateProject]: P extends "_count" | "count"
		? T[P] extends true
			? number
			: Prisma.GetScalarType<T[P], AggregateProject[P]>
		: Prisma.GetScalarType<T[P], AggregateProject[P]>;
};

export type ProjectGroupByArgs<
	_ExtArgs extends
		runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
	where?: Prisma.ProjectWhereInput;
	orderBy?:
		| Prisma.ProjectOrderByWithAggregationInput
		| Prisma.ProjectOrderByWithAggregationInput[];
	by: Prisma.ProjectScalarFieldEnum[] | Prisma.ProjectScalarFieldEnum;
	having?: Prisma.ProjectScalarWhereWithAggregatesInput;
	take?: number;
	skip?: number;
	_count?: ProjectCountAggregateInputType | true;
	_avg?: ProjectAvgAggregateInputType;
	_sum?: ProjectSumAggregateInputType;
	_min?: ProjectMinAggregateInputType;
	_max?: ProjectMaxAggregateInputType;
};

export type ProjectGroupByOutputType = {
	id: string;
	title: string;
	description: string;
	content: string | null;
	category: $Enums.ProjectCategory;
	status: $Enums.ProjectStatus;
	featured: boolean;
	githubUrl: string | null;
	demoUrl: string | null;
	imageUrl: string | null;
	order: number;
	createdAt: Date;
	updatedAt: Date;
	_count: ProjectCountAggregateOutputType | null;
	_avg: ProjectAvgAggregateOutputType | null;
	_sum: ProjectSumAggregateOutputType | null;
	_min: ProjectMinAggregateOutputType | null;
	_max: ProjectMaxAggregateOutputType | null;
};

type GetProjectGroupByPayload<T extends ProjectGroupByArgs> =
	Prisma.PrismaPromise<
		Array<
			Prisma.PickEnumerable<ProjectGroupByOutputType, T["by"]> & {
				[P in keyof T & keyof ProjectGroupByOutputType]: P extends "_count"
					? T[P] extends boolean
						? number
						: Prisma.GetScalarType<T[P], ProjectGroupByOutputType[P]>
					: Prisma.GetScalarType<T[P], ProjectGroupByOutputType[P]>;
			}
		>
	>;

export type ProjectWhereInput = {
	AND?: Prisma.ProjectWhereInput | Prisma.ProjectWhereInput[];
	OR?: Prisma.ProjectWhereInput[];
	NOT?: Prisma.ProjectWhereInput | Prisma.ProjectWhereInput[];
	id?: Prisma.StringFilter<"Project"> | string;
	title?: Prisma.StringFilter<"Project"> | string;
	description?: Prisma.StringFilter<"Project"> | string;
	content?: Prisma.StringNullableFilter<"Project"> | string | null;
	category?:
		| Prisma.EnumProjectCategoryFilter<"Project">
		| $Enums.ProjectCategory;
	status?: Prisma.EnumProjectStatusFilter<"Project"> | $Enums.ProjectStatus;
	featured?: Prisma.BoolFilter<"Project"> | boolean;
	githubUrl?: Prisma.StringNullableFilter<"Project"> | string | null;
	demoUrl?: Prisma.StringNullableFilter<"Project"> | string | null;
	imageUrl?: Prisma.StringNullableFilter<"Project"> | string | null;
	order?: Prisma.IntFilter<"Project"> | number;
	createdAt?: Prisma.DateTimeFilter<"Project"> | Date | string;
	updatedAt?: Prisma.DateTimeFilter<"Project"> | Date | string;
	technologies?: Prisma.ProjectTechnologyListRelationFilter;
	tags?: Prisma.ProjectTagListRelationFilter;
	translations?: Prisma.ProjectTranslationListRelationFilter;
};

export type ProjectOrderByWithRelationInput = {
	id?: Prisma.SortOrder;
	title?: Prisma.SortOrder;
	description?: Prisma.SortOrder;
	content?: Prisma.SortOrderInput | Prisma.SortOrder;
	category?: Prisma.SortOrder;
	status?: Prisma.SortOrder;
	featured?: Prisma.SortOrder;
	githubUrl?: Prisma.SortOrderInput | Prisma.SortOrder;
	demoUrl?: Prisma.SortOrderInput | Prisma.SortOrder;
	imageUrl?: Prisma.SortOrderInput | Prisma.SortOrder;
	order?: Prisma.SortOrder;
	createdAt?: Prisma.SortOrder;
	updatedAt?: Prisma.SortOrder;
	technologies?: Prisma.ProjectTechnologyOrderByRelationAggregateInput;
	tags?: Prisma.ProjectTagOrderByRelationAggregateInput;
	translations?: Prisma.ProjectTranslationOrderByRelationAggregateInput;
};

export type ProjectWhereUniqueInput = Prisma.AtLeast<
	{
		id?: string;
		AND?: Prisma.ProjectWhereInput | Prisma.ProjectWhereInput[];
		OR?: Prisma.ProjectWhereInput[];
		NOT?: Prisma.ProjectWhereInput | Prisma.ProjectWhereInput[];
		title?: Prisma.StringFilter<"Project"> | string;
		description?: Prisma.StringFilter<"Project"> | string;
		content?: Prisma.StringNullableFilter<"Project"> | string | null;
		category?:
			| Prisma.EnumProjectCategoryFilter<"Project">
			| $Enums.ProjectCategory;
		status?: Prisma.EnumProjectStatusFilter<"Project"> | $Enums.ProjectStatus;
		featured?: Prisma.BoolFilter<"Project"> | boolean;
		githubUrl?: Prisma.StringNullableFilter<"Project"> | string | null;
		demoUrl?: Prisma.StringNullableFilter<"Project"> | string | null;
		imageUrl?: Prisma.StringNullableFilter<"Project"> | string | null;
		order?: Prisma.IntFilter<"Project"> | number;
		createdAt?: Prisma.DateTimeFilter<"Project"> | Date | string;
		updatedAt?: Prisma.DateTimeFilter<"Project"> | Date | string;
		technologies?: Prisma.ProjectTechnologyListRelationFilter;
		tags?: Prisma.ProjectTagListRelationFilter;
		translations?: Prisma.ProjectTranslationListRelationFilter;
	},
	"id"
>;

export type ProjectOrderByWithAggregationInput = {
	id?: Prisma.SortOrder;
	title?: Prisma.SortOrder;
	description?: Prisma.SortOrder;
	content?: Prisma.SortOrderInput | Prisma.SortOrder;
	category?: Prisma.SortOrder;
	status?: Prisma.SortOrder;
	featured?: Prisma.SortOrder;
	githubUrl?: Prisma.SortOrderInput | Prisma.SortOrder;
	demoUrl?: Prisma.SortOrderInput | Prisma.SortOrder;
	imageUrl?: Prisma.SortOrderInput | Prisma.SortOrder;
	order?: Prisma.SortOrder;
	createdAt?: Prisma.SortOrder;
	updatedAt?: Prisma.SortOrder;
	_count?: Prisma.ProjectCountOrderByAggregateInput;
	_avg?: Prisma.ProjectAvgOrderByAggregateInput;
	_max?: Prisma.ProjectMaxOrderByAggregateInput;
	_min?: Prisma.ProjectMinOrderByAggregateInput;
	_sum?: Prisma.ProjectSumOrderByAggregateInput;
};

export type ProjectScalarWhereWithAggregatesInput = {
	AND?:
		| Prisma.ProjectScalarWhereWithAggregatesInput
		| Prisma.ProjectScalarWhereWithAggregatesInput[];
	OR?: Prisma.ProjectScalarWhereWithAggregatesInput[];
	NOT?:
		| Prisma.ProjectScalarWhereWithAggregatesInput
		| Prisma.ProjectScalarWhereWithAggregatesInput[];
	id?: Prisma.StringWithAggregatesFilter<"Project"> | string;
	title?: Prisma.StringWithAggregatesFilter<"Project"> | string;
	description?: Prisma.StringWithAggregatesFilter<"Project"> | string;
	content?:
		| Prisma.StringNullableWithAggregatesFilter<"Project">
		| string
		| null;
	category?:
		| Prisma.EnumProjectCategoryWithAggregatesFilter<"Project">
		| $Enums.ProjectCategory;
	status?:
		| Prisma.EnumProjectStatusWithAggregatesFilter<"Project">
		| $Enums.ProjectStatus;
	featured?: Prisma.BoolWithAggregatesFilter<"Project"> | boolean;
	githubUrl?:
		| Prisma.StringNullableWithAggregatesFilter<"Project">
		| string
		| null;
	demoUrl?:
		| Prisma.StringNullableWithAggregatesFilter<"Project">
		| string
		| null;
	imageUrl?:
		| Prisma.StringNullableWithAggregatesFilter<"Project">
		| string
		| null;
	order?: Prisma.IntWithAggregatesFilter<"Project"> | number;
	createdAt?: Prisma.DateTimeWithAggregatesFilter<"Project"> | Date | string;
	updatedAt?: Prisma.DateTimeWithAggregatesFilter<"Project"> | Date | string;
};

export type ProjectCreateInput = {
	id?: string;
	title: string;
	description: string;
	content?: string | null;
	category: $Enums.ProjectCategory;
	status?: $Enums.ProjectStatus;
	featured?: boolean;
	githubUrl?: string | null;
	demoUrl?: string | null;
	imageUrl?: string | null;
	order?: number;
	createdAt?: Date | string;
	updatedAt?: Date | string;
	technologies?: Prisma.ProjectTechnologyCreateNestedManyWithoutProjectInput;
	tags?: Prisma.ProjectTagCreateNestedManyWithoutProjectInput;
	translations?: Prisma.ProjectTranslationCreateNestedManyWithoutProjectInput;
};

export type ProjectUncheckedCreateInput = {
	id?: string;
	title: string;
	description: string;
	content?: string | null;
	category: $Enums.ProjectCategory;
	status?: $Enums.ProjectStatus;
	featured?: boolean;
	githubUrl?: string | null;
	demoUrl?: string | null;
	imageUrl?: string | null;
	order?: number;
	createdAt?: Date | string;
	updatedAt?: Date | string;
	technologies?: Prisma.ProjectTechnologyUncheckedCreateNestedManyWithoutProjectInput;
	tags?: Prisma.ProjectTagUncheckedCreateNestedManyWithoutProjectInput;
	translations?: Prisma.ProjectTranslationUncheckedCreateNestedManyWithoutProjectInput;
};

export type ProjectUpdateInput = {
	id?: Prisma.StringFieldUpdateOperationsInput | string;
	title?: Prisma.StringFieldUpdateOperationsInput | string;
	description?: Prisma.StringFieldUpdateOperationsInput | string;
	content?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
	category?:
		| Prisma.EnumProjectCategoryFieldUpdateOperationsInput
		| $Enums.ProjectCategory;
	status?:
		| Prisma.EnumProjectStatusFieldUpdateOperationsInput
		| $Enums.ProjectStatus;
	featured?: Prisma.BoolFieldUpdateOperationsInput | boolean;
	githubUrl?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
	demoUrl?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
	imageUrl?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
	order?: Prisma.IntFieldUpdateOperationsInput | number;
	createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
	updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
	technologies?: Prisma.ProjectTechnologyUpdateManyWithoutProjectNestedInput;
	tags?: Prisma.ProjectTagUpdateManyWithoutProjectNestedInput;
	translations?: Prisma.ProjectTranslationUpdateManyWithoutProjectNestedInput;
};

export type ProjectUncheckedUpdateInput = {
	id?: Prisma.StringFieldUpdateOperationsInput | string;
	title?: Prisma.StringFieldUpdateOperationsInput | string;
	description?: Prisma.StringFieldUpdateOperationsInput | string;
	content?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
	category?:
		| Prisma.EnumProjectCategoryFieldUpdateOperationsInput
		| $Enums.ProjectCategory;
	status?:
		| Prisma.EnumProjectStatusFieldUpdateOperationsInput
		| $Enums.ProjectStatus;
	featured?: Prisma.BoolFieldUpdateOperationsInput | boolean;
	githubUrl?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
	demoUrl?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
	imageUrl?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
	order?: Prisma.IntFieldUpdateOperationsInput | number;
	createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
	updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
	technologies?: Prisma.ProjectTechnologyUncheckedUpdateManyWithoutProjectNestedInput;
	tags?: Prisma.ProjectTagUncheckedUpdateManyWithoutProjectNestedInput;
	translations?: Prisma.ProjectTranslationUncheckedUpdateManyWithoutProjectNestedInput;
};

export type ProjectCreateManyInput = {
	id?: string;
	title: string;
	description: string;
	content?: string | null;
	category: $Enums.ProjectCategory;
	status?: $Enums.ProjectStatus;
	featured?: boolean;
	githubUrl?: string | null;
	demoUrl?: string | null;
	imageUrl?: string | null;
	order?: number;
	createdAt?: Date | string;
	updatedAt?: Date | string;
};

export type ProjectUpdateManyMutationInput = {
	id?: Prisma.StringFieldUpdateOperationsInput | string;
	title?: Prisma.StringFieldUpdateOperationsInput | string;
	description?: Prisma.StringFieldUpdateOperationsInput | string;
	content?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
	category?:
		| Prisma.EnumProjectCategoryFieldUpdateOperationsInput
		| $Enums.ProjectCategory;
	status?:
		| Prisma.EnumProjectStatusFieldUpdateOperationsInput
		| $Enums.ProjectStatus;
	featured?: Prisma.BoolFieldUpdateOperationsInput | boolean;
	githubUrl?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
	demoUrl?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
	imageUrl?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
	order?: Prisma.IntFieldUpdateOperationsInput | number;
	createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
	updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
};

export type ProjectUncheckedUpdateManyInput = {
	id?: Prisma.StringFieldUpdateOperationsInput | string;
	title?: Prisma.StringFieldUpdateOperationsInput | string;
	description?: Prisma.StringFieldUpdateOperationsInput | string;
	content?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
	category?:
		| Prisma.EnumProjectCategoryFieldUpdateOperationsInput
		| $Enums.ProjectCategory;
	status?:
		| Prisma.EnumProjectStatusFieldUpdateOperationsInput
		| $Enums.ProjectStatus;
	featured?: Prisma.BoolFieldUpdateOperationsInput | boolean;
	githubUrl?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
	demoUrl?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
	imageUrl?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
	order?: Prisma.IntFieldUpdateOperationsInput | number;
	createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
	updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
};

export type ProjectCountOrderByAggregateInput = {
	id?: Prisma.SortOrder;
	title?: Prisma.SortOrder;
	description?: Prisma.SortOrder;
	content?: Prisma.SortOrder;
	category?: Prisma.SortOrder;
	status?: Prisma.SortOrder;
	featured?: Prisma.SortOrder;
	githubUrl?: Prisma.SortOrder;
	demoUrl?: Prisma.SortOrder;
	imageUrl?: Prisma.SortOrder;
	order?: Prisma.SortOrder;
	createdAt?: Prisma.SortOrder;
	updatedAt?: Prisma.SortOrder;
};

export type ProjectAvgOrderByAggregateInput = {
	order?: Prisma.SortOrder;
};

export type ProjectMaxOrderByAggregateInput = {
	id?: Prisma.SortOrder;
	title?: Prisma.SortOrder;
	description?: Prisma.SortOrder;
	content?: Prisma.SortOrder;
	category?: Prisma.SortOrder;
	status?: Prisma.SortOrder;
	featured?: Prisma.SortOrder;
	githubUrl?: Prisma.SortOrder;
	demoUrl?: Prisma.SortOrder;
	imageUrl?: Prisma.SortOrder;
	order?: Prisma.SortOrder;
	createdAt?: Prisma.SortOrder;
	updatedAt?: Prisma.SortOrder;
};

export type ProjectMinOrderByAggregateInput = {
	id?: Prisma.SortOrder;
	title?: Prisma.SortOrder;
	description?: Prisma.SortOrder;
	content?: Prisma.SortOrder;
	category?: Prisma.SortOrder;
	status?: Prisma.SortOrder;
	featured?: Prisma.SortOrder;
	githubUrl?: Prisma.SortOrder;
	demoUrl?: Prisma.SortOrder;
	imageUrl?: Prisma.SortOrder;
	order?: Prisma.SortOrder;
	createdAt?: Prisma.SortOrder;
	updatedAt?: Prisma.SortOrder;
};

export type ProjectSumOrderByAggregateInput = {
	order?: Prisma.SortOrder;
};

export type ProjectScalarRelationFilter = {
	is?: Prisma.ProjectWhereInput;
	isNot?: Prisma.ProjectWhereInput;
};

export type EnumProjectCategoryFieldUpdateOperationsInput = {
	set?: $Enums.ProjectCategory;
};

export type EnumProjectStatusFieldUpdateOperationsInput = {
	set?: $Enums.ProjectStatus;
};

export type IntFieldUpdateOperationsInput = {
	set?: number;
	increment?: number;
	decrement?: number;
	multiply?: number;
	divide?: number;
};

export type ProjectCreateNestedOneWithoutTranslationsInput = {
	create?: Prisma.XOR<
		Prisma.ProjectCreateWithoutTranslationsInput,
		Prisma.ProjectUncheckedCreateWithoutTranslationsInput
	>;
	connectOrCreate?: Prisma.ProjectCreateOrConnectWithoutTranslationsInput;
	connect?: Prisma.ProjectWhereUniqueInput;
};

export type ProjectUpdateOneRequiredWithoutTranslationsNestedInput = {
	create?: Prisma.XOR<
		Prisma.ProjectCreateWithoutTranslationsInput,
		Prisma.ProjectUncheckedCreateWithoutTranslationsInput
	>;
	connectOrCreate?: Prisma.ProjectCreateOrConnectWithoutTranslationsInput;
	upsert?: Prisma.ProjectUpsertWithoutTranslationsInput;
	connect?: Prisma.ProjectWhereUniqueInput;
	update?: Prisma.XOR<
		Prisma.XOR<
			Prisma.ProjectUpdateToOneWithWhereWithoutTranslationsInput,
			Prisma.ProjectUpdateWithoutTranslationsInput
		>,
		Prisma.ProjectUncheckedUpdateWithoutTranslationsInput
	>;
};

export type ProjectCreateNestedOneWithoutTechnologiesInput = {
	create?: Prisma.XOR<
		Prisma.ProjectCreateWithoutTechnologiesInput,
		Prisma.ProjectUncheckedCreateWithoutTechnologiesInput
	>;
	connectOrCreate?: Prisma.ProjectCreateOrConnectWithoutTechnologiesInput;
	connect?: Prisma.ProjectWhereUniqueInput;
};

export type ProjectUpdateOneRequiredWithoutTechnologiesNestedInput = {
	create?: Prisma.XOR<
		Prisma.ProjectCreateWithoutTechnologiesInput,
		Prisma.ProjectUncheckedCreateWithoutTechnologiesInput
	>;
	connectOrCreate?: Prisma.ProjectCreateOrConnectWithoutTechnologiesInput;
	upsert?: Prisma.ProjectUpsertWithoutTechnologiesInput;
	connect?: Prisma.ProjectWhereUniqueInput;
	update?: Prisma.XOR<
		Prisma.XOR<
			Prisma.ProjectUpdateToOneWithWhereWithoutTechnologiesInput,
			Prisma.ProjectUpdateWithoutTechnologiesInput
		>,
		Prisma.ProjectUncheckedUpdateWithoutTechnologiesInput
	>;
};

export type ProjectCreateNestedOneWithoutTagsInput = {
	create?: Prisma.XOR<
		Prisma.ProjectCreateWithoutTagsInput,
		Prisma.ProjectUncheckedCreateWithoutTagsInput
	>;
	connectOrCreate?: Prisma.ProjectCreateOrConnectWithoutTagsInput;
	connect?: Prisma.ProjectWhereUniqueInput;
};

export type ProjectUpdateOneRequiredWithoutTagsNestedInput = {
	create?: Prisma.XOR<
		Prisma.ProjectCreateWithoutTagsInput,
		Prisma.ProjectUncheckedCreateWithoutTagsInput
	>;
	connectOrCreate?: Prisma.ProjectCreateOrConnectWithoutTagsInput;
	upsert?: Prisma.ProjectUpsertWithoutTagsInput;
	connect?: Prisma.ProjectWhereUniqueInput;
	update?: Prisma.XOR<
		Prisma.XOR<
			Prisma.ProjectUpdateToOneWithWhereWithoutTagsInput,
			Prisma.ProjectUpdateWithoutTagsInput
		>,
		Prisma.ProjectUncheckedUpdateWithoutTagsInput
	>;
};

export type ProjectCreateWithoutTranslationsInput = {
	id?: string;
	title: string;
	description: string;
	content?: string | null;
	category: $Enums.ProjectCategory;
	status?: $Enums.ProjectStatus;
	featured?: boolean;
	githubUrl?: string | null;
	demoUrl?: string | null;
	imageUrl?: string | null;
	order?: number;
	createdAt?: Date | string;
	updatedAt?: Date | string;
	technologies?: Prisma.ProjectTechnologyCreateNestedManyWithoutProjectInput;
	tags?: Prisma.ProjectTagCreateNestedManyWithoutProjectInput;
};

export type ProjectUncheckedCreateWithoutTranslationsInput = {
	id?: string;
	title: string;
	description: string;
	content?: string | null;
	category: $Enums.ProjectCategory;
	status?: $Enums.ProjectStatus;
	featured?: boolean;
	githubUrl?: string | null;
	demoUrl?: string | null;
	imageUrl?: string | null;
	order?: number;
	createdAt?: Date | string;
	updatedAt?: Date | string;
	technologies?: Prisma.ProjectTechnologyUncheckedCreateNestedManyWithoutProjectInput;
	tags?: Prisma.ProjectTagUncheckedCreateNestedManyWithoutProjectInput;
};

export type ProjectCreateOrConnectWithoutTranslationsInput = {
	where: Prisma.ProjectWhereUniqueInput;
	create: Prisma.XOR<
		Prisma.ProjectCreateWithoutTranslationsInput,
		Prisma.ProjectUncheckedCreateWithoutTranslationsInput
	>;
};

export type ProjectUpsertWithoutTranslationsInput = {
	update: Prisma.XOR<
		Prisma.ProjectUpdateWithoutTranslationsInput,
		Prisma.ProjectUncheckedUpdateWithoutTranslationsInput
	>;
	create: Prisma.XOR<
		Prisma.ProjectCreateWithoutTranslationsInput,
		Prisma.ProjectUncheckedCreateWithoutTranslationsInput
	>;
	where?: Prisma.ProjectWhereInput;
};

export type ProjectUpdateToOneWithWhereWithoutTranslationsInput = {
	where?: Prisma.ProjectWhereInput;
	data: Prisma.XOR<
		Prisma.ProjectUpdateWithoutTranslationsInput,
		Prisma.ProjectUncheckedUpdateWithoutTranslationsInput
	>;
};

export type ProjectUpdateWithoutTranslationsInput = {
	id?: Prisma.StringFieldUpdateOperationsInput | string;
	title?: Prisma.StringFieldUpdateOperationsInput | string;
	description?: Prisma.StringFieldUpdateOperationsInput | string;
	content?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
	category?:
		| Prisma.EnumProjectCategoryFieldUpdateOperationsInput
		| $Enums.ProjectCategory;
	status?:
		| Prisma.EnumProjectStatusFieldUpdateOperationsInput
		| $Enums.ProjectStatus;
	featured?: Prisma.BoolFieldUpdateOperationsInput | boolean;
	githubUrl?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
	demoUrl?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
	imageUrl?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
	order?: Prisma.IntFieldUpdateOperationsInput | number;
	createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
	updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
	technologies?: Prisma.ProjectTechnologyUpdateManyWithoutProjectNestedInput;
	tags?: Prisma.ProjectTagUpdateManyWithoutProjectNestedInput;
};

export type ProjectUncheckedUpdateWithoutTranslationsInput = {
	id?: Prisma.StringFieldUpdateOperationsInput | string;
	title?: Prisma.StringFieldUpdateOperationsInput | string;
	description?: Prisma.StringFieldUpdateOperationsInput | string;
	content?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
	category?:
		| Prisma.EnumProjectCategoryFieldUpdateOperationsInput
		| $Enums.ProjectCategory;
	status?:
		| Prisma.EnumProjectStatusFieldUpdateOperationsInput
		| $Enums.ProjectStatus;
	featured?: Prisma.BoolFieldUpdateOperationsInput | boolean;
	githubUrl?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
	demoUrl?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
	imageUrl?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
	order?: Prisma.IntFieldUpdateOperationsInput | number;
	createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
	updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
	technologies?: Prisma.ProjectTechnologyUncheckedUpdateManyWithoutProjectNestedInput;
	tags?: Prisma.ProjectTagUncheckedUpdateManyWithoutProjectNestedInput;
};

export type ProjectCreateWithoutTechnologiesInput = {
	id?: string;
	title: string;
	description: string;
	content?: string | null;
	category: $Enums.ProjectCategory;
	status?: $Enums.ProjectStatus;
	featured?: boolean;
	githubUrl?: string | null;
	demoUrl?: string | null;
	imageUrl?: string | null;
	order?: number;
	createdAt?: Date | string;
	updatedAt?: Date | string;
	tags?: Prisma.ProjectTagCreateNestedManyWithoutProjectInput;
	translations?: Prisma.ProjectTranslationCreateNestedManyWithoutProjectInput;
};

export type ProjectUncheckedCreateWithoutTechnologiesInput = {
	id?: string;
	title: string;
	description: string;
	content?: string | null;
	category: $Enums.ProjectCategory;
	status?: $Enums.ProjectStatus;
	featured?: boolean;
	githubUrl?: string | null;
	demoUrl?: string | null;
	imageUrl?: string | null;
	order?: number;
	createdAt?: Date | string;
	updatedAt?: Date | string;
	tags?: Prisma.ProjectTagUncheckedCreateNestedManyWithoutProjectInput;
	translations?: Prisma.ProjectTranslationUncheckedCreateNestedManyWithoutProjectInput;
};

export type ProjectCreateOrConnectWithoutTechnologiesInput = {
	where: Prisma.ProjectWhereUniqueInput;
	create: Prisma.XOR<
		Prisma.ProjectCreateWithoutTechnologiesInput,
		Prisma.ProjectUncheckedCreateWithoutTechnologiesInput
	>;
};

export type ProjectUpsertWithoutTechnologiesInput = {
	update: Prisma.XOR<
		Prisma.ProjectUpdateWithoutTechnologiesInput,
		Prisma.ProjectUncheckedUpdateWithoutTechnologiesInput
	>;
	create: Prisma.XOR<
		Prisma.ProjectCreateWithoutTechnologiesInput,
		Prisma.ProjectUncheckedCreateWithoutTechnologiesInput
	>;
	where?: Prisma.ProjectWhereInput;
};

export type ProjectUpdateToOneWithWhereWithoutTechnologiesInput = {
	where?: Prisma.ProjectWhereInput;
	data: Prisma.XOR<
		Prisma.ProjectUpdateWithoutTechnologiesInput,
		Prisma.ProjectUncheckedUpdateWithoutTechnologiesInput
	>;
};

export type ProjectUpdateWithoutTechnologiesInput = {
	id?: Prisma.StringFieldUpdateOperationsInput | string;
	title?: Prisma.StringFieldUpdateOperationsInput | string;
	description?: Prisma.StringFieldUpdateOperationsInput | string;
	content?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
	category?:
		| Prisma.EnumProjectCategoryFieldUpdateOperationsInput
		| $Enums.ProjectCategory;
	status?:
		| Prisma.EnumProjectStatusFieldUpdateOperationsInput
		| $Enums.ProjectStatus;
	featured?: Prisma.BoolFieldUpdateOperationsInput | boolean;
	githubUrl?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
	demoUrl?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
	imageUrl?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
	order?: Prisma.IntFieldUpdateOperationsInput | number;
	createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
	updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
	tags?: Prisma.ProjectTagUpdateManyWithoutProjectNestedInput;
	translations?: Prisma.ProjectTranslationUpdateManyWithoutProjectNestedInput;
};

export type ProjectUncheckedUpdateWithoutTechnologiesInput = {
	id?: Prisma.StringFieldUpdateOperationsInput | string;
	title?: Prisma.StringFieldUpdateOperationsInput | string;
	description?: Prisma.StringFieldUpdateOperationsInput | string;
	content?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
	category?:
		| Prisma.EnumProjectCategoryFieldUpdateOperationsInput
		| $Enums.ProjectCategory;
	status?:
		| Prisma.EnumProjectStatusFieldUpdateOperationsInput
		| $Enums.ProjectStatus;
	featured?: Prisma.BoolFieldUpdateOperationsInput | boolean;
	githubUrl?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
	demoUrl?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
	imageUrl?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
	order?: Prisma.IntFieldUpdateOperationsInput | number;
	createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
	updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
	tags?: Prisma.ProjectTagUncheckedUpdateManyWithoutProjectNestedInput;
	translations?: Prisma.ProjectTranslationUncheckedUpdateManyWithoutProjectNestedInput;
};

export type ProjectCreateWithoutTagsInput = {
	id?: string;
	title: string;
	description: string;
	content?: string | null;
	category: $Enums.ProjectCategory;
	status?: $Enums.ProjectStatus;
	featured?: boolean;
	githubUrl?: string | null;
	demoUrl?: string | null;
	imageUrl?: string | null;
	order?: number;
	createdAt?: Date | string;
	updatedAt?: Date | string;
	technologies?: Prisma.ProjectTechnologyCreateNestedManyWithoutProjectInput;
	translations?: Prisma.ProjectTranslationCreateNestedManyWithoutProjectInput;
};

export type ProjectUncheckedCreateWithoutTagsInput = {
	id?: string;
	title: string;
	description: string;
	content?: string | null;
	category: $Enums.ProjectCategory;
	status?: $Enums.ProjectStatus;
	featured?: boolean;
	githubUrl?: string | null;
	demoUrl?: string | null;
	imageUrl?: string | null;
	order?: number;
	createdAt?: Date | string;
	updatedAt?: Date | string;
	technologies?: Prisma.ProjectTechnologyUncheckedCreateNestedManyWithoutProjectInput;
	translations?: Prisma.ProjectTranslationUncheckedCreateNestedManyWithoutProjectInput;
};

export type ProjectCreateOrConnectWithoutTagsInput = {
	where: Prisma.ProjectWhereUniqueInput;
	create: Prisma.XOR<
		Prisma.ProjectCreateWithoutTagsInput,
		Prisma.ProjectUncheckedCreateWithoutTagsInput
	>;
};

export type ProjectUpsertWithoutTagsInput = {
	update: Prisma.XOR<
		Prisma.ProjectUpdateWithoutTagsInput,
		Prisma.ProjectUncheckedUpdateWithoutTagsInput
	>;
	create: Prisma.XOR<
		Prisma.ProjectCreateWithoutTagsInput,
		Prisma.ProjectUncheckedCreateWithoutTagsInput
	>;
	where?: Prisma.ProjectWhereInput;
};

export type ProjectUpdateToOneWithWhereWithoutTagsInput = {
	where?: Prisma.ProjectWhereInput;
	data: Prisma.XOR<
		Prisma.ProjectUpdateWithoutTagsInput,
		Prisma.ProjectUncheckedUpdateWithoutTagsInput
	>;
};

export type ProjectUpdateWithoutTagsInput = {
	id?: Prisma.StringFieldUpdateOperationsInput | string;
	title?: Prisma.StringFieldUpdateOperationsInput | string;
	description?: Prisma.StringFieldUpdateOperationsInput | string;
	content?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
	category?:
		| Prisma.EnumProjectCategoryFieldUpdateOperationsInput
		| $Enums.ProjectCategory;
	status?:
		| Prisma.EnumProjectStatusFieldUpdateOperationsInput
		| $Enums.ProjectStatus;
	featured?: Prisma.BoolFieldUpdateOperationsInput | boolean;
	githubUrl?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
	demoUrl?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
	imageUrl?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
	order?: Prisma.IntFieldUpdateOperationsInput | number;
	createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
	updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
	technologies?: Prisma.ProjectTechnologyUpdateManyWithoutProjectNestedInput;
	translations?: Prisma.ProjectTranslationUpdateManyWithoutProjectNestedInput;
};

export type ProjectUncheckedUpdateWithoutTagsInput = {
	id?: Prisma.StringFieldUpdateOperationsInput | string;
	title?: Prisma.StringFieldUpdateOperationsInput | string;
	description?: Prisma.StringFieldUpdateOperationsInput | string;
	content?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
	category?:
		| Prisma.EnumProjectCategoryFieldUpdateOperationsInput
		| $Enums.ProjectCategory;
	status?:
		| Prisma.EnumProjectStatusFieldUpdateOperationsInput
		| $Enums.ProjectStatus;
	featured?: Prisma.BoolFieldUpdateOperationsInput | boolean;
	githubUrl?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
	demoUrl?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
	imageUrl?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
	order?: Prisma.IntFieldUpdateOperationsInput | number;
	createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
	updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
	technologies?: Prisma.ProjectTechnologyUncheckedUpdateManyWithoutProjectNestedInput;
	translations?: Prisma.ProjectTranslationUncheckedUpdateManyWithoutProjectNestedInput;
};

/**
 * Count Type ProjectCountOutputType
 */

export type ProjectCountOutputType = {
	technologies: number;
	tags: number;
	translations: number;
};

export type ProjectCountOutputTypeSelect<
	_ExtArgs extends
		runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
	technologies?: boolean | ProjectCountOutputTypeCountTechnologiesArgs;
	tags?: boolean | ProjectCountOutputTypeCountTagsArgs;
	translations?: boolean | ProjectCountOutputTypeCountTranslationsArgs;
};

/**
 * ProjectCountOutputType without action
 */
export type ProjectCountOutputTypeDefaultArgs<
	ExtArgs extends
		runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
	/**
	 * Select specific fields to fetch from the ProjectCountOutputType
	 */
	select?: Prisma.ProjectCountOutputTypeSelect<ExtArgs> | null;
};

/**
 * ProjectCountOutputType without action
 */
export type ProjectCountOutputTypeCountTechnologiesArgs<
	_ExtArgs extends
		runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
	where?: Prisma.ProjectTechnologyWhereInput;
};

/**
 * ProjectCountOutputType without action
 */
export type ProjectCountOutputTypeCountTagsArgs<
	_ExtArgs extends
		runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
	where?: Prisma.ProjectTagWhereInput;
};

/**
 * ProjectCountOutputType without action
 */
export type ProjectCountOutputTypeCountTranslationsArgs<
	_ExtArgs extends
		runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
	where?: Prisma.ProjectTranslationWhereInput;
};

export type ProjectSelect<
	ExtArgs extends
		runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = runtime.Types.Extensions.GetSelect<
	{
		id?: boolean;
		title?: boolean;
		description?: boolean;
		content?: boolean;
		category?: boolean;
		status?: boolean;
		featured?: boolean;
		githubUrl?: boolean;
		demoUrl?: boolean;
		imageUrl?: boolean;
		order?: boolean;
		createdAt?: boolean;
		updatedAt?: boolean;
		technologies?: boolean | Prisma.Project$technologiesArgs<ExtArgs>;
		tags?: boolean | Prisma.Project$tagsArgs<ExtArgs>;
		translations?: boolean | Prisma.Project$translationsArgs<ExtArgs>;
		_count?: boolean | Prisma.ProjectCountOutputTypeDefaultArgs<ExtArgs>;
	},
	ExtArgs["result"]["project"]
>;

export type ProjectSelectCreateManyAndReturn<
	ExtArgs extends
		runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = runtime.Types.Extensions.GetSelect<
	{
		id?: boolean;
		title?: boolean;
		description?: boolean;
		content?: boolean;
		category?: boolean;
		status?: boolean;
		featured?: boolean;
		githubUrl?: boolean;
		demoUrl?: boolean;
		imageUrl?: boolean;
		order?: boolean;
		createdAt?: boolean;
		updatedAt?: boolean;
	},
	ExtArgs["result"]["project"]
>;

export type ProjectSelectUpdateManyAndReturn<
	ExtArgs extends
		runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = runtime.Types.Extensions.GetSelect<
	{
		id?: boolean;
		title?: boolean;
		description?: boolean;
		content?: boolean;
		category?: boolean;
		status?: boolean;
		featured?: boolean;
		githubUrl?: boolean;
		demoUrl?: boolean;
		imageUrl?: boolean;
		order?: boolean;
		createdAt?: boolean;
		updatedAt?: boolean;
	},
	ExtArgs["result"]["project"]
>;

export type ProjectSelectScalar = {
	id?: boolean;
	title?: boolean;
	description?: boolean;
	content?: boolean;
	category?: boolean;
	status?: boolean;
	featured?: boolean;
	githubUrl?: boolean;
	demoUrl?: boolean;
	imageUrl?: boolean;
	order?: boolean;
	createdAt?: boolean;
	updatedAt?: boolean;
};

export type ProjectOmit<
	ExtArgs extends
		runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = runtime.Types.Extensions.GetOmit<
	| "id"
	| "title"
	| "description"
	| "content"
	| "category"
	| "status"
	| "featured"
	| "githubUrl"
	| "demoUrl"
	| "imageUrl"
	| "order"
	| "createdAt"
	| "updatedAt",
	ExtArgs["result"]["project"]
>;
export type ProjectInclude<
	ExtArgs extends
		runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
	technologies?: boolean | Prisma.Project$technologiesArgs<ExtArgs>;
	tags?: boolean | Prisma.Project$tagsArgs<ExtArgs>;
	translations?: boolean | Prisma.Project$translationsArgs<ExtArgs>;
	_count?: boolean | Prisma.ProjectCountOutputTypeDefaultArgs<ExtArgs>;
};
export type ProjectIncludeCreateManyAndReturn<
	_ExtArgs extends
		runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {};
export type ProjectIncludeUpdateManyAndReturn<
	_ExtArgs extends
		runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {};

export type $ProjectPayload<
	ExtArgs extends
		runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
	name: "Project";
	objects: {
		technologies: Prisma.$ProjectTechnologyPayload<ExtArgs>[];
		tags: Prisma.$ProjectTagPayload<ExtArgs>[];
		translations: Prisma.$ProjectTranslationPayload<ExtArgs>[];
	};
	scalars: runtime.Types.Extensions.GetPayloadResult<
		{
			id: string;
			title: string;
			description: string;
			content: string | null;
			category: $Enums.ProjectCategory;
			status: $Enums.ProjectStatus;
			featured: boolean;
			githubUrl: string | null;
			demoUrl: string | null;
			imageUrl: string | null;
			order: number;
			createdAt: Date;
			updatedAt: Date;
		},
		ExtArgs["result"]["project"]
	>;
	composites: {};
};

export type ProjectGetPayload<
	S extends boolean | null | undefined | ProjectDefaultArgs,
> = runtime.Types.Result.GetResult<Prisma.$ProjectPayload, S>;

export type ProjectCountArgs<
	_ExtArgs extends
		runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = Omit<ProjectFindManyArgs, "select" | "include" | "distinct" | "omit"> & {
	select?: ProjectCountAggregateInputType | true;
};

export interface ProjectDelegate<
	ExtArgs extends
		runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
	GlobalOmitOptions = {},
> {
	[K: symbol]: {
		types: Prisma.TypeMap<ExtArgs>["model"]["Project"];
		meta: { name: "Project" };
	};
	/**
	 * Find zero or one Project that matches the filter.
	 * @param {ProjectFindUniqueArgs} args - Arguments to find a Project
	 * @example
	 * // Get one Project
	 * const project = await prisma.project.findUnique({
	 *   where: {
	 *     // ... provide filter here
	 *   }
	 * })
	 */
	findUnique<T extends ProjectFindUniqueArgs>(
		args: Prisma.SelectSubset<T, ProjectFindUniqueArgs<ExtArgs>>,
	): Prisma.Prisma__ProjectClient<
		runtime.Types.Result.GetResult<
			Prisma.$ProjectPayload<ExtArgs>,
			T,
			"findUnique",
			GlobalOmitOptions
		> | null,
		null,
		ExtArgs,
		GlobalOmitOptions
	>;

	/**
	 * Find one Project that matches the filter or throw an error with `error.code='P2025'`
	 * if no matches were found.
	 * @param {ProjectFindUniqueOrThrowArgs} args - Arguments to find a Project
	 * @example
	 * // Get one Project
	 * const project = await prisma.project.findUniqueOrThrow({
	 *   where: {
	 *     // ... provide filter here
	 *   }
	 * })
	 */
	findUniqueOrThrow<T extends ProjectFindUniqueOrThrowArgs>(
		args: Prisma.SelectSubset<T, ProjectFindUniqueOrThrowArgs<ExtArgs>>,
	): Prisma.Prisma__ProjectClient<
		runtime.Types.Result.GetResult<
			Prisma.$ProjectPayload<ExtArgs>,
			T,
			"findUniqueOrThrow",
			GlobalOmitOptions
		>,
		never,
		ExtArgs,
		GlobalOmitOptions
	>;

	/**
	 * Find the first Project that matches the filter.
	 * Note, that providing `undefined` is treated as the value not being there.
	 * Read more here: https://pris.ly/d/null-undefined
	 * @param {ProjectFindFirstArgs} args - Arguments to find a Project
	 * @example
	 * // Get one Project
	 * const project = await prisma.project.findFirst({
	 *   where: {
	 *     // ... provide filter here
	 *   }
	 * })
	 */
	findFirst<T extends ProjectFindFirstArgs>(
		args?: Prisma.SelectSubset<T, ProjectFindFirstArgs<ExtArgs>>,
	): Prisma.Prisma__ProjectClient<
		runtime.Types.Result.GetResult<
			Prisma.$ProjectPayload<ExtArgs>,
			T,
			"findFirst",
			GlobalOmitOptions
		> | null,
		null,
		ExtArgs,
		GlobalOmitOptions
	>;

	/**
	 * Find the first Project that matches the filter or
	 * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
	 * Note, that providing `undefined` is treated as the value not being there.
	 * Read more here: https://pris.ly/d/null-undefined
	 * @param {ProjectFindFirstOrThrowArgs} args - Arguments to find a Project
	 * @example
	 * // Get one Project
	 * const project = await prisma.project.findFirstOrThrow({
	 *   where: {
	 *     // ... provide filter here
	 *   }
	 * })
	 */
	findFirstOrThrow<T extends ProjectFindFirstOrThrowArgs>(
		args?: Prisma.SelectSubset<T, ProjectFindFirstOrThrowArgs<ExtArgs>>,
	): Prisma.Prisma__ProjectClient<
		runtime.Types.Result.GetResult<
			Prisma.$ProjectPayload<ExtArgs>,
			T,
			"findFirstOrThrow",
			GlobalOmitOptions
		>,
		never,
		ExtArgs,
		GlobalOmitOptions
	>;

	/**
	 * Find zero or more Projects that matches the filter.
	 * Note, that providing `undefined` is treated as the value not being there.
	 * Read more here: https://pris.ly/d/null-undefined
	 * @param {ProjectFindManyArgs} args - Arguments to filter and select certain fields only.
	 * @example
	 * // Get all Projects
	 * const projects = await prisma.project.findMany()
	 *
	 * // Get first 10 Projects
	 * const projects = await prisma.project.findMany({ take: 10 })
	 *
	 * // Only select the `id`
	 * const projectWithIdOnly = await prisma.project.findMany({ select: { id: true } })
	 *
	 */
	findMany<T extends ProjectFindManyArgs>(
		args?: Prisma.SelectSubset<T, ProjectFindManyArgs<ExtArgs>>,
	): Prisma.PrismaPromise<
		runtime.Types.Result.GetResult<
			Prisma.$ProjectPayload<ExtArgs>,
			T,
			"findMany",
			GlobalOmitOptions
		>
	>;

	/**
	 * Create a Project.
	 * @param {ProjectCreateArgs} args - Arguments to create a Project.
	 * @example
	 * // Create one Project
	 * const Project = await prisma.project.create({
	 *   data: {
	 *     // ... data to create a Project
	 *   }
	 * })
	 *
	 */
	create<T extends ProjectCreateArgs>(
		args: Prisma.SelectSubset<T, ProjectCreateArgs<ExtArgs>>,
	): Prisma.Prisma__ProjectClient<
		runtime.Types.Result.GetResult<
			Prisma.$ProjectPayload<ExtArgs>,
			T,
			"create",
			GlobalOmitOptions
		>,
		never,
		ExtArgs,
		GlobalOmitOptions
	>;

	/**
	 * Create many Projects.
	 * @param {ProjectCreateManyArgs} args - Arguments to create many Projects.
	 * @example
	 * // Create many Projects
	 * const project = await prisma.project.createMany({
	 *   data: [
	 *     // ... provide data here
	 *   ]
	 * })
	 *
	 */
	createMany<T extends ProjectCreateManyArgs>(
		args?: Prisma.SelectSubset<T, ProjectCreateManyArgs<ExtArgs>>,
	): Prisma.PrismaPromise<Prisma.BatchPayload>;

	/**
	 * Create many Projects and returns the data saved in the database.
	 * @param {ProjectCreateManyAndReturnArgs} args - Arguments to create many Projects.
	 * @example
	 * // Create many Projects
	 * const project = await prisma.project.createManyAndReturn({
	 *   data: [
	 *     // ... provide data here
	 *   ]
	 * })
	 *
	 * // Create many Projects and only return the `id`
	 * const projectWithIdOnly = await prisma.project.createManyAndReturn({
	 *   select: { id: true },
	 *   data: [
	 *     // ... provide data here
	 *   ]
	 * })
	 * Note, that providing `undefined` is treated as the value not being there.
	 * Read more here: https://pris.ly/d/null-undefined
	 *
	 */
	createManyAndReturn<T extends ProjectCreateManyAndReturnArgs>(
		args?: Prisma.SelectSubset<T, ProjectCreateManyAndReturnArgs<ExtArgs>>,
	): Prisma.PrismaPromise<
		runtime.Types.Result.GetResult<
			Prisma.$ProjectPayload<ExtArgs>,
			T,
			"createManyAndReturn",
			GlobalOmitOptions
		>
	>;

	/**
	 * Delete a Project.
	 * @param {ProjectDeleteArgs} args - Arguments to delete one Project.
	 * @example
	 * // Delete one Project
	 * const Project = await prisma.project.delete({
	 *   where: {
	 *     // ... filter to delete one Project
	 *   }
	 * })
	 *
	 */
	delete<T extends ProjectDeleteArgs>(
		args: Prisma.SelectSubset<T, ProjectDeleteArgs<ExtArgs>>,
	): Prisma.Prisma__ProjectClient<
		runtime.Types.Result.GetResult<
			Prisma.$ProjectPayload<ExtArgs>,
			T,
			"delete",
			GlobalOmitOptions
		>,
		never,
		ExtArgs,
		GlobalOmitOptions
	>;

	/**
	 * Update one Project.
	 * @param {ProjectUpdateArgs} args - Arguments to update one Project.
	 * @example
	 * // Update one Project
	 * const project = await prisma.project.update({
	 *   where: {
	 *     // ... provide filter here
	 *   },
	 *   data: {
	 *     // ... provide data here
	 *   }
	 * })
	 *
	 */
	update<T extends ProjectUpdateArgs>(
		args: Prisma.SelectSubset<T, ProjectUpdateArgs<ExtArgs>>,
	): Prisma.Prisma__ProjectClient<
		runtime.Types.Result.GetResult<
			Prisma.$ProjectPayload<ExtArgs>,
			T,
			"update",
			GlobalOmitOptions
		>,
		never,
		ExtArgs,
		GlobalOmitOptions
	>;

	/**
	 * Delete zero or more Projects.
	 * @param {ProjectDeleteManyArgs} args - Arguments to filter Projects to delete.
	 * @example
	 * // Delete a few Projects
	 * const { count } = await prisma.project.deleteMany({
	 *   where: {
	 *     // ... provide filter here
	 *   }
	 * })
	 *
	 */
	deleteMany<T extends ProjectDeleteManyArgs>(
		args?: Prisma.SelectSubset<T, ProjectDeleteManyArgs<ExtArgs>>,
	): Prisma.PrismaPromise<Prisma.BatchPayload>;

	/**
	 * Update zero or more Projects.
	 * Note, that providing `undefined` is treated as the value not being there.
	 * Read more here: https://pris.ly/d/null-undefined
	 * @param {ProjectUpdateManyArgs} args - Arguments to update one or more rows.
	 * @example
	 * // Update many Projects
	 * const project = await prisma.project.updateMany({
	 *   where: {
	 *     // ... provide filter here
	 *   },
	 *   data: {
	 *     // ... provide data here
	 *   }
	 * })
	 *
	 */
	updateMany<T extends ProjectUpdateManyArgs>(
		args: Prisma.SelectSubset<T, ProjectUpdateManyArgs<ExtArgs>>,
	): Prisma.PrismaPromise<Prisma.BatchPayload>;

	/**
	 * Update zero or more Projects and returns the data updated in the database.
	 * @param {ProjectUpdateManyAndReturnArgs} args - Arguments to update many Projects.
	 * @example
	 * // Update many Projects
	 * const project = await prisma.project.updateManyAndReturn({
	 *   where: {
	 *     // ... provide filter here
	 *   },
	 *   data: [
	 *     // ... provide data here
	 *   ]
	 * })
	 *
	 * // Update zero or more Projects and only return the `id`
	 * const projectWithIdOnly = await prisma.project.updateManyAndReturn({
	 *   select: { id: true },
	 *   where: {
	 *     // ... provide filter here
	 *   },
	 *   data: [
	 *     // ... provide data here
	 *   ]
	 * })
	 * Note, that providing `undefined` is treated as the value not being there.
	 * Read more here: https://pris.ly/d/null-undefined
	 *
	 */
	updateManyAndReturn<T extends ProjectUpdateManyAndReturnArgs>(
		args: Prisma.SelectSubset<T, ProjectUpdateManyAndReturnArgs<ExtArgs>>,
	): Prisma.PrismaPromise<
		runtime.Types.Result.GetResult<
			Prisma.$ProjectPayload<ExtArgs>,
			T,
			"updateManyAndReturn",
			GlobalOmitOptions
		>
	>;

	/**
	 * Create or update one Project.
	 * @param {ProjectUpsertArgs} args - Arguments to update or create a Project.
	 * @example
	 * // Update or create a Project
	 * const project = await prisma.project.upsert({
	 *   create: {
	 *     // ... data to create a Project
	 *   },
	 *   update: {
	 *     // ... in case it already exists, update
	 *   },
	 *   where: {
	 *     // ... the filter for the Project we want to update
	 *   }
	 * })
	 */
	upsert<T extends ProjectUpsertArgs>(
		args: Prisma.SelectSubset<T, ProjectUpsertArgs<ExtArgs>>,
	): Prisma.Prisma__ProjectClient<
		runtime.Types.Result.GetResult<
			Prisma.$ProjectPayload<ExtArgs>,
			T,
			"upsert",
			GlobalOmitOptions
		>,
		never,
		ExtArgs,
		GlobalOmitOptions
	>;

	/**
	 * Count the number of Projects.
	 * Note, that providing `undefined` is treated as the value not being there.
	 * Read more here: https://pris.ly/d/null-undefined
	 * @param {ProjectCountArgs} args - Arguments to filter Projects to count.
	 * @example
	 * // Count the number of Projects
	 * const count = await prisma.project.count({
	 *   where: {
	 *     // ... the filter for the Projects we want to count
	 *   }
	 * })
	 **/
	count<T extends ProjectCountArgs>(
		args?: Prisma.Subset<T, ProjectCountArgs>,
	): Prisma.PrismaPromise<
		T extends runtime.Types.Utils.Record<"select", any>
			? T["select"] extends true
				? number
				: Prisma.GetScalarType<T["select"], ProjectCountAggregateOutputType>
			: number
	>;

	/**
	 * Allows you to perform aggregations operations on a Project.
	 * Note, that providing `undefined` is treated as the value not being there.
	 * Read more here: https://pris.ly/d/null-undefined
	 * @param {ProjectAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
	 * @example
	 * // Ordered by age ascending
	 * // Where email contains prisma.io
	 * // Limited to the 10 users
	 * const aggregations = await prisma.user.aggregate({
	 *   _avg: {
	 *     age: true,
	 *   },
	 *   where: {
	 *     email: {
	 *       contains: "prisma.io",
	 *     },
	 *   },
	 *   orderBy: {
	 *     age: "asc",
	 *   },
	 *   take: 10,
	 * })
	 **/
	aggregate<T extends ProjectAggregateArgs>(
		args: Prisma.Subset<T, ProjectAggregateArgs>,
	): Prisma.PrismaPromise<GetProjectAggregateType<T>>;

	/**
	 * Group by Project.
	 * Note, that providing `undefined` is treated as the value not being there.
	 * Read more here: https://pris.ly/d/null-undefined
	 * @param {ProjectGroupByArgs} args - Group by arguments.
	 * @example
	 * // Group by city, order by createdAt, get count
	 * const result = await prisma.user.groupBy({
	 *   by: ['city', 'createdAt'],
	 *   orderBy: {
	 *     createdAt: true
	 *   },
	 *   _count: {
	 *     _all: true
	 *   },
	 * })
	 *
	 **/
	groupBy<
		T extends ProjectGroupByArgs,
		HasSelectOrTake extends Prisma.Or<
			Prisma.Extends<"skip", Prisma.Keys<T>>,
			Prisma.Extends<"take", Prisma.Keys<T>>
		>,
		OrderByArg extends Prisma.True extends HasSelectOrTake
			? { orderBy: ProjectGroupByArgs["orderBy"] }
			: { orderBy?: ProjectGroupByArgs["orderBy"] },
		OrderFields extends Prisma.ExcludeUnderscoreKeys<
			Prisma.Keys<Prisma.MaybeTupleToUnion<T["orderBy"]>>
		>,
		ByFields extends Prisma.MaybeTupleToUnion<T["by"]>,
		ByValid extends Prisma.Has<ByFields, OrderFields>,
		HavingFields extends Prisma.GetHavingFields<T["having"]>,
		HavingValid extends Prisma.Has<ByFields, HavingFields>,
		ByEmpty extends T["by"] extends never[] ? Prisma.True : Prisma.False,
		InputErrors extends ByEmpty extends Prisma.True
			? `Error: "by" must not be empty.`
			: HavingValid extends Prisma.False
				? {
						[P in HavingFields]: P extends ByFields
							? never
							: P extends string
								? `Error: Field "${P}" used in "having" needs to be provided in "by".`
								: [
										Error,
										"Field ",
										P,
										` in "having" needs to be provided in "by"`,
									];
					}[HavingFields]
				: "take" extends Prisma.Keys<T>
					? "orderBy" extends Prisma.Keys<T>
						? ByValid extends Prisma.True
							? {}
							: {
									[P in OrderFields]: P extends ByFields
										? never
										: `Error: Field "${P}" in "orderBy" needs to be provided in "by"`;
								}[OrderFields]
						: 'Error: If you provide "take", you also need to provide "orderBy"'
					: "skip" extends Prisma.Keys<T>
						? "orderBy" extends Prisma.Keys<T>
							? ByValid extends Prisma.True
								? {}
								: {
										[P in OrderFields]: P extends ByFields
											? never
											: `Error: Field "${P}" in "orderBy" needs to be provided in "by"`;
									}[OrderFields]
							: 'Error: If you provide "skip", you also need to provide "orderBy"'
						: ByValid extends Prisma.True
							? {}
							: {
									[P in OrderFields]: P extends ByFields
										? never
										: `Error: Field "${P}" in "orderBy" needs to be provided in "by"`;
								}[OrderFields],
	>(
		args: Prisma.SubsetIntersection<T, ProjectGroupByArgs, OrderByArg> &
			InputErrors,
	): {} extends InputErrors
		? GetProjectGroupByPayload<T>
		: Prisma.PrismaPromise<InputErrors>;
	/**
	 * Fields of the Project model
	 */
	readonly fields: ProjectFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for Project.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__ProjectClient<
	T,
	Null = never,
	ExtArgs extends
		runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
	GlobalOmitOptions = {},
> extends Prisma.PrismaPromise<T> {
	readonly [Symbol.toStringTag]: "PrismaPromise";
	technologies<T extends Prisma.Project$technologiesArgs<ExtArgs> = {}>(
		args?: Prisma.Subset<T, Prisma.Project$technologiesArgs<ExtArgs>>,
	): Prisma.PrismaPromise<
		| runtime.Types.Result.GetResult<
				Prisma.$ProjectTechnologyPayload<ExtArgs>,
				T,
				"findMany",
				GlobalOmitOptions
		  >
		| Null
	>;
	tags<T extends Prisma.Project$tagsArgs<ExtArgs> = {}>(
		args?: Prisma.Subset<T, Prisma.Project$tagsArgs<ExtArgs>>,
	): Prisma.PrismaPromise<
		| runtime.Types.Result.GetResult<
				Prisma.$ProjectTagPayload<ExtArgs>,
				T,
				"findMany",
				GlobalOmitOptions
		  >
		| Null
	>;
	translations<T extends Prisma.Project$translationsArgs<ExtArgs> = {}>(
		args?: Prisma.Subset<T, Prisma.Project$translationsArgs<ExtArgs>>,
	): Prisma.PrismaPromise<
		| runtime.Types.Result.GetResult<
				Prisma.$ProjectTranslationPayload<ExtArgs>,
				T,
				"findMany",
				GlobalOmitOptions
		  >
		| Null
	>;
	/**
	 * Attaches callbacks for the resolution and/or rejection of the Promise.
	 * @param onfulfilled The callback to execute when the Promise is resolved.
	 * @param onrejected The callback to execute when the Promise is rejected.
	 * @returns A Promise for the completion of which ever callback is executed.
	 */
	then<TResult1 = T, TResult2 = never>(
		onfulfilled?:
			| ((value: T) => TResult1 | PromiseLike<TResult1>)
			| undefined
			| null,
		onrejected?:
			| ((reason: any) => TResult2 | PromiseLike<TResult2>)
			| undefined
			| null,
	): runtime.Types.Utils.JsPromise<TResult1 | TResult2>;
	/**
	 * Attaches a callback for only the rejection of the Promise.
	 * @param onrejected The callback to execute when the Promise is rejected.
	 * @returns A Promise for the completion of the callback.
	 */
	catch<TResult = never>(
		onrejected?:
			| ((reason: any) => TResult | PromiseLike<TResult>)
			| undefined
			| null,
	): runtime.Types.Utils.JsPromise<T | TResult>;
	/**
	 * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
	 * resolved value cannot be modified from the callback.
	 * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
	 * @returns A Promise for the completion of the callback.
	 */
	finally(
		onfinally?: (() => void) | undefined | null,
	): runtime.Types.Utils.JsPromise<T>;
}

/**
 * Fields of the Project model
 */
export interface ProjectFieldRefs {
	readonly id: Prisma.FieldRef<"Project", "String">;
	readonly title: Prisma.FieldRef<"Project", "String">;
	readonly description: Prisma.FieldRef<"Project", "String">;
	readonly content: Prisma.FieldRef<"Project", "String">;
	readonly category: Prisma.FieldRef<"Project", "ProjectCategory">;
	readonly status: Prisma.FieldRef<"Project", "ProjectStatus">;
	readonly featured: Prisma.FieldRef<"Project", "Boolean">;
	readonly githubUrl: Prisma.FieldRef<"Project", "String">;
	readonly demoUrl: Prisma.FieldRef<"Project", "String">;
	readonly imageUrl: Prisma.FieldRef<"Project", "String">;
	readonly order: Prisma.FieldRef<"Project", "Int">;
	readonly createdAt: Prisma.FieldRef<"Project", "DateTime">;
	readonly updatedAt: Prisma.FieldRef<"Project", "DateTime">;
}

// Custom InputTypes
/**
 * Project findUnique
 */
export type ProjectFindUniqueArgs<
	ExtArgs extends
		runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
	/**
	 * Select specific fields to fetch from the Project
	 */
	select?: Prisma.ProjectSelect<ExtArgs> | null;
	/**
	 * Omit specific fields from the Project
	 */
	omit?: Prisma.ProjectOmit<ExtArgs> | null;
	/**
	 * Choose, which related nodes to fetch as well
	 */
	include?: Prisma.ProjectInclude<ExtArgs> | null;
	/**
	 * Filter, which Project to fetch.
	 */
	where: Prisma.ProjectWhereUniqueInput;
};

/**
 * Project findUniqueOrThrow
 */
export type ProjectFindUniqueOrThrowArgs<
	ExtArgs extends
		runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
	/**
	 * Select specific fields to fetch from the Project
	 */
	select?: Prisma.ProjectSelect<ExtArgs> | null;
	/**
	 * Omit specific fields from the Project
	 */
	omit?: Prisma.ProjectOmit<ExtArgs> | null;
	/**
	 * Choose, which related nodes to fetch as well
	 */
	include?: Prisma.ProjectInclude<ExtArgs> | null;
	/**
	 * Filter, which Project to fetch.
	 */
	where: Prisma.ProjectWhereUniqueInput;
};

/**
 * Project findFirst
 */
export type ProjectFindFirstArgs<
	ExtArgs extends
		runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
	/**
	 * Select specific fields to fetch from the Project
	 */
	select?: Prisma.ProjectSelect<ExtArgs> | null;
	/**
	 * Omit specific fields from the Project
	 */
	omit?: Prisma.ProjectOmit<ExtArgs> | null;
	/**
	 * Choose, which related nodes to fetch as well
	 */
	include?: Prisma.ProjectInclude<ExtArgs> | null;
	/**
	 * Filter, which Project to fetch.
	 */
	where?: Prisma.ProjectWhereInput;
	/**
	 * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
	 *
	 * Determine the order of Projects to fetch.
	 */
	orderBy?:
		| Prisma.ProjectOrderByWithRelationInput
		| Prisma.ProjectOrderByWithRelationInput[];
	/**
	 * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
	 *
	 * Sets the position for searching for Projects.
	 */
	cursor?: Prisma.ProjectWhereUniqueInput;
	/**
	 * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
	 *
	 * Take `Â±n` Projects from the position of the cursor.
	 */
	take?: number;
	/**
	 * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
	 *
	 * Skip the first `n` Projects.
	 */
	skip?: number;
	/**
	 * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
	 *
	 * Filter by unique combinations of Projects.
	 */
	distinct?: Prisma.ProjectScalarFieldEnum | Prisma.ProjectScalarFieldEnum[];
};

/**
 * Project findFirstOrThrow
 */
export type ProjectFindFirstOrThrowArgs<
	ExtArgs extends
		runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
	/**
	 * Select specific fields to fetch from the Project
	 */
	select?: Prisma.ProjectSelect<ExtArgs> | null;
	/**
	 * Omit specific fields from the Project
	 */
	omit?: Prisma.ProjectOmit<ExtArgs> | null;
	/**
	 * Choose, which related nodes to fetch as well
	 */
	include?: Prisma.ProjectInclude<ExtArgs> | null;
	/**
	 * Filter, which Project to fetch.
	 */
	where?: Prisma.ProjectWhereInput;
	/**
	 * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
	 *
	 * Determine the order of Projects to fetch.
	 */
	orderBy?:
		| Prisma.ProjectOrderByWithRelationInput
		| Prisma.ProjectOrderByWithRelationInput[];
	/**
	 * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
	 *
	 * Sets the position for searching for Projects.
	 */
	cursor?: Prisma.ProjectWhereUniqueInput;
	/**
	 * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
	 *
	 * Take `Â±n` Projects from the position of the cursor.
	 */
	take?: number;
	/**
	 * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
	 *
	 * Skip the first `n` Projects.
	 */
	skip?: number;
	/**
	 * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
	 *
	 * Filter by unique combinations of Projects.
	 */
	distinct?: Prisma.ProjectScalarFieldEnum | Prisma.ProjectScalarFieldEnum[];
};

/**
 * Project findMany
 */
export type ProjectFindManyArgs<
	ExtArgs extends
		runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
	/**
	 * Select specific fields to fetch from the Project
	 */
	select?: Prisma.ProjectSelect<ExtArgs> | null;
	/**
	 * Omit specific fields from the Project
	 */
	omit?: Prisma.ProjectOmit<ExtArgs> | null;
	/**
	 * Choose, which related nodes to fetch as well
	 */
	include?: Prisma.ProjectInclude<ExtArgs> | null;
	/**
	 * Filter, which Projects to fetch.
	 */
	where?: Prisma.ProjectWhereInput;
	/**
	 * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
	 *
	 * Determine the order of Projects to fetch.
	 */
	orderBy?:
		| Prisma.ProjectOrderByWithRelationInput
		| Prisma.ProjectOrderByWithRelationInput[];
	/**
	 * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
	 *
	 * Sets the position for listing Projects.
	 */
	cursor?: Prisma.ProjectWhereUniqueInput;
	/**
	 * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
	 *
	 * Take `Â±n` Projects from the position of the cursor.
	 */
	take?: number;
	/**
	 * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
	 *
	 * Skip the first `n` Projects.
	 */
	skip?: number;
	distinct?: Prisma.ProjectScalarFieldEnum | Prisma.ProjectScalarFieldEnum[];
};

/**
 * Project create
 */
export type ProjectCreateArgs<
	ExtArgs extends
		runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
	/**
	 * Select specific fields to fetch from the Project
	 */
	select?: Prisma.ProjectSelect<ExtArgs> | null;
	/**
	 * Omit specific fields from the Project
	 */
	omit?: Prisma.ProjectOmit<ExtArgs> | null;
	/**
	 * Choose, which related nodes to fetch as well
	 */
	include?: Prisma.ProjectInclude<ExtArgs> | null;
	/**
	 * The data needed to create a Project.
	 */
	data: Prisma.XOR<
		Prisma.ProjectCreateInput,
		Prisma.ProjectUncheckedCreateInput
	>;
};

/**
 * Project createMany
 */
export type ProjectCreateManyArgs<
	_ExtArgs extends
		runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
	/**
	 * The data used to create many Projects.
	 */
	data: Prisma.ProjectCreateManyInput | Prisma.ProjectCreateManyInput[];
	skipDuplicates?: boolean;
};

/**
 * Project createManyAndReturn
 */
export type ProjectCreateManyAndReturnArgs<
	ExtArgs extends
		runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
	/**
	 * Select specific fields to fetch from the Project
	 */
	select?: Prisma.ProjectSelectCreateManyAndReturn<ExtArgs> | null;
	/**
	 * Omit specific fields from the Project
	 */
	omit?: Prisma.ProjectOmit<ExtArgs> | null;
	/**
	 * The data used to create many Projects.
	 */
	data: Prisma.ProjectCreateManyInput | Prisma.ProjectCreateManyInput[];
	skipDuplicates?: boolean;
};

/**
 * Project update
 */
export type ProjectUpdateArgs<
	ExtArgs extends
		runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
	/**
	 * Select specific fields to fetch from the Project
	 */
	select?: Prisma.ProjectSelect<ExtArgs> | null;
	/**
	 * Omit specific fields from the Project
	 */
	omit?: Prisma.ProjectOmit<ExtArgs> | null;
	/**
	 * Choose, which related nodes to fetch as well
	 */
	include?: Prisma.ProjectInclude<ExtArgs> | null;
	/**
	 * The data needed to update a Project.
	 */
	data: Prisma.XOR<
		Prisma.ProjectUpdateInput,
		Prisma.ProjectUncheckedUpdateInput
	>;
	/**
	 * Choose, which Project to update.
	 */
	where: Prisma.ProjectWhereUniqueInput;
};

/**
 * Project updateMany
 */
export type ProjectUpdateManyArgs<
	_ExtArgs extends
		runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
	/**
	 * The data used to update Projects.
	 */
	data: Prisma.XOR<
		Prisma.ProjectUpdateManyMutationInput,
		Prisma.ProjectUncheckedUpdateManyInput
	>;
	/**
	 * Filter which Projects to update
	 */
	where?: Prisma.ProjectWhereInput;
	/**
	 * Limit how many Projects to update.
	 */
	limit?: number;
};

/**
 * Project updateManyAndReturn
 */
export type ProjectUpdateManyAndReturnArgs<
	ExtArgs extends
		runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
	/**
	 * Select specific fields to fetch from the Project
	 */
	select?: Prisma.ProjectSelectUpdateManyAndReturn<ExtArgs> | null;
	/**
	 * Omit specific fields from the Project
	 */
	omit?: Prisma.ProjectOmit<ExtArgs> | null;
	/**
	 * The data used to update Projects.
	 */
	data: Prisma.XOR<
		Prisma.ProjectUpdateManyMutationInput,
		Prisma.ProjectUncheckedUpdateManyInput
	>;
	/**
	 * Filter which Projects to update
	 */
	where?: Prisma.ProjectWhereInput;
	/**
	 * Limit how many Projects to update.
	 */
	limit?: number;
};

/**
 * Project upsert
 */
export type ProjectUpsertArgs<
	ExtArgs extends
		runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
	/**
	 * Select specific fields to fetch from the Project
	 */
	select?: Prisma.ProjectSelect<ExtArgs> | null;
	/**
	 * Omit specific fields from the Project
	 */
	omit?: Prisma.ProjectOmit<ExtArgs> | null;
	/**
	 * Choose, which related nodes to fetch as well
	 */
	include?: Prisma.ProjectInclude<ExtArgs> | null;
	/**
	 * The filter to search for the Project to update in case it exists.
	 */
	where: Prisma.ProjectWhereUniqueInput;
	/**
	 * In case the Project found by the `where` argument doesn't exist, create a new Project with this data.
	 */
	create: Prisma.XOR<
		Prisma.ProjectCreateInput,
		Prisma.ProjectUncheckedCreateInput
	>;
	/**
	 * In case the Project was found with the provided `where` argument, update it with this data.
	 */
	update: Prisma.XOR<
		Prisma.ProjectUpdateInput,
		Prisma.ProjectUncheckedUpdateInput
	>;
};

/**
 * Project delete
 */
export type ProjectDeleteArgs<
	ExtArgs extends
		runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
	/**
	 * Select specific fields to fetch from the Project
	 */
	select?: Prisma.ProjectSelect<ExtArgs> | null;
	/**
	 * Omit specific fields from the Project
	 */
	omit?: Prisma.ProjectOmit<ExtArgs> | null;
	/**
	 * Choose, which related nodes to fetch as well
	 */
	include?: Prisma.ProjectInclude<ExtArgs> | null;
	/**
	 * Filter which Project to delete.
	 */
	where: Prisma.ProjectWhereUniqueInput;
};

/**
 * Project deleteMany
 */
export type ProjectDeleteManyArgs<
	_ExtArgs extends
		runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
	/**
	 * Filter which Projects to delete
	 */
	where?: Prisma.ProjectWhereInput;
	/**
	 * Limit how many Projects to delete.
	 */
	limit?: number;
};

/**
 * Project.technologies
 */
export type Project$technologiesArgs<
	ExtArgs extends
		runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
	/**
	 * Select specific fields to fetch from the ProjectTechnology
	 */
	select?: Prisma.ProjectTechnologySelect<ExtArgs> | null;
	/**
	 * Omit specific fields from the ProjectTechnology
	 */
	omit?: Prisma.ProjectTechnologyOmit<ExtArgs> | null;
	/**
	 * Choose, which related nodes to fetch as well
	 */
	include?: Prisma.ProjectTechnologyInclude<ExtArgs> | null;
	where?: Prisma.ProjectTechnologyWhereInput;
	orderBy?:
		| Prisma.ProjectTechnologyOrderByWithRelationInput
		| Prisma.ProjectTechnologyOrderByWithRelationInput[];
	cursor?: Prisma.ProjectTechnologyWhereUniqueInput;
	take?: number;
	skip?: number;
	distinct?:
		| Prisma.ProjectTechnologyScalarFieldEnum
		| Prisma.ProjectTechnologyScalarFieldEnum[];
};

/**
 * Project.tags
 */
export type Project$tagsArgs<
	ExtArgs extends
		runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
	/**
	 * Select specific fields to fetch from the ProjectTag
	 */
	select?: Prisma.ProjectTagSelect<ExtArgs> | null;
	/**
	 * Omit specific fields from the ProjectTag
	 */
	omit?: Prisma.ProjectTagOmit<ExtArgs> | null;
	/**
	 * Choose, which related nodes to fetch as well
	 */
	include?: Prisma.ProjectTagInclude<ExtArgs> | null;
	where?: Prisma.ProjectTagWhereInput;
	orderBy?:
		| Prisma.ProjectTagOrderByWithRelationInput
		| Prisma.ProjectTagOrderByWithRelationInput[];
	cursor?: Prisma.ProjectTagWhereUniqueInput;
	take?: number;
	skip?: number;
	distinct?:
		| Prisma.ProjectTagScalarFieldEnum
		| Prisma.ProjectTagScalarFieldEnum[];
};

/**
 * Project.translations
 */
export type Project$translationsArgs<
	ExtArgs extends
		runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
	/**
	 * Select specific fields to fetch from the ProjectTranslation
	 */
	select?: Prisma.ProjectTranslationSelect<ExtArgs> | null;
	/**
	 * Omit specific fields from the ProjectTranslation
	 */
	omit?: Prisma.ProjectTranslationOmit<ExtArgs> | null;
	/**
	 * Choose, which related nodes to fetch as well
	 */
	include?: Prisma.ProjectTranslationInclude<ExtArgs> | null;
	where?: Prisma.ProjectTranslationWhereInput;
	orderBy?:
		| Prisma.ProjectTranslationOrderByWithRelationInput
		| Prisma.ProjectTranslationOrderByWithRelationInput[];
	cursor?: Prisma.ProjectTranslationWhereUniqueInput;
	take?: number;
	skip?: number;
	distinct?:
		| Prisma.ProjectTranslationScalarFieldEnum
		| Prisma.ProjectTranslationScalarFieldEnum[];
};

/**
 * Project without action
 */
export type ProjectDefaultArgs<
	ExtArgs extends
		runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
	/**
	 * Select specific fields to fetch from the Project
	 */
	select?: Prisma.ProjectSelect<ExtArgs> | null;
	/**
	 * Omit specific fields from the Project
	 */
	omit?: Prisma.ProjectOmit<ExtArgs> | null;
	/**
	 * Choose, which related nodes to fetch as well
	 */
	include?: Prisma.ProjectInclude<ExtArgs> | null;
};
