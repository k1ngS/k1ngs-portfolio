/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck
/**
 * This file exports the `ProjectTag` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import type * as runtime from "@prisma/client/runtime/library";
import type * as Prisma from "../internal/prismaNamespace";

/**
 * Model ProjectTag
 *
 */
export type ProjectTagModel =
	runtime.Types.Result.DefaultSelection<Prisma.$ProjectTagPayload>;

export type AggregateProjectTag = {
	_count: ProjectTagCountAggregateOutputType | null;
	_min: ProjectTagMinAggregateOutputType | null;
	_max: ProjectTagMaxAggregateOutputType | null;
};

export type ProjectTagMinAggregateOutputType = {
	id: string | null;
	projectId: string | null;
	tagId: string | null;
};

export type ProjectTagMaxAggregateOutputType = {
	id: string | null;
	projectId: string | null;
	tagId: string | null;
};

export type ProjectTagCountAggregateOutputType = {
	id: number;
	projectId: number;
	tagId: number;
	_all: number;
};

export type ProjectTagMinAggregateInputType = {
	id?: true;
	projectId?: true;
	tagId?: true;
};

export type ProjectTagMaxAggregateInputType = {
	id?: true;
	projectId?: true;
	tagId?: true;
};

export type ProjectTagCountAggregateInputType = {
	id?: true;
	projectId?: true;
	tagId?: true;
	_all?: true;
};

export type ProjectTagAggregateArgs<
	_ExtArgs extends
		runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
	/**
	 * Filter which ProjectTag to aggregate.
	 */
	where?: Prisma.ProjectTagWhereInput;
	/**
	 * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
	 *
	 * Determine the order of ProjectTags to fetch.
	 */
	orderBy?:
		| Prisma.ProjectTagOrderByWithRelationInput
		| Prisma.ProjectTagOrderByWithRelationInput[];
	/**
	 * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
	 *
	 * Sets the start position
	 */
	cursor?: Prisma.ProjectTagWhereUniqueInput;
	/**
	 * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
	 *
	 * Take `Â±n` ProjectTags from the position of the cursor.
	 */
	take?: number;
	/**
	 * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
	 *
	 * Skip the first `n` ProjectTags.
	 */
	skip?: number;
	/**
	 * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
	 *
	 * Count returned ProjectTags
	 **/
	_count?: true | ProjectTagCountAggregateInputType;
	/**
	 * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
	 *
	 * Select which fields to find the minimum value
	 **/
	_min?: ProjectTagMinAggregateInputType;
	/**
	 * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
	 *
	 * Select which fields to find the maximum value
	 **/
	_max?: ProjectTagMaxAggregateInputType;
};

export type GetProjectTagAggregateType<T extends ProjectTagAggregateArgs> = {
	[P in keyof T & keyof AggregateProjectTag]: P extends "_count" | "count"
		? T[P] extends true
			? number
			: Prisma.GetScalarType<T[P], AggregateProjectTag[P]>
		: Prisma.GetScalarType<T[P], AggregateProjectTag[P]>;
};

export type ProjectTagGroupByArgs<
	_ExtArgs extends
		runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
	where?: Prisma.ProjectTagWhereInput;
	orderBy?:
		| Prisma.ProjectTagOrderByWithAggregationInput
		| Prisma.ProjectTagOrderByWithAggregationInput[];
	by: Prisma.ProjectTagScalarFieldEnum[] | Prisma.ProjectTagScalarFieldEnum;
	having?: Prisma.ProjectTagScalarWhereWithAggregatesInput;
	take?: number;
	skip?: number;
	_count?: ProjectTagCountAggregateInputType | true;
	_min?: ProjectTagMinAggregateInputType;
	_max?: ProjectTagMaxAggregateInputType;
};

export type ProjectTagGroupByOutputType = {
	id: string;
	projectId: string;
	tagId: string;
	_count: ProjectTagCountAggregateOutputType | null;
	_min: ProjectTagMinAggregateOutputType | null;
	_max: ProjectTagMaxAggregateOutputType | null;
};

type GetProjectTagGroupByPayload<T extends ProjectTagGroupByArgs> =
	Prisma.PrismaPromise<
		Array<
			Prisma.PickEnumerable<ProjectTagGroupByOutputType, T["by"]> & {
				[P in keyof T & keyof ProjectTagGroupByOutputType]: P extends "_count"
					? T[P] extends boolean
						? number
						: Prisma.GetScalarType<T[P], ProjectTagGroupByOutputType[P]>
					: Prisma.GetScalarType<T[P], ProjectTagGroupByOutputType[P]>;
			}
		>
	>;

export type ProjectTagWhereInput = {
	AND?: Prisma.ProjectTagWhereInput | Prisma.ProjectTagWhereInput[];
	OR?: Prisma.ProjectTagWhereInput[];
	NOT?: Prisma.ProjectTagWhereInput | Prisma.ProjectTagWhereInput[];
	id?: Prisma.StringFilter<"ProjectTag"> | string;
	projectId?: Prisma.StringFilter<"ProjectTag"> | string;
	tagId?: Prisma.StringFilter<"ProjectTag"> | string;
	project?: Prisma.XOR<
		Prisma.ProjectScalarRelationFilter,
		Prisma.ProjectWhereInput
	>;
	tag?: Prisma.XOR<Prisma.TagScalarRelationFilter, Prisma.TagWhereInput>;
};

export type ProjectTagOrderByWithRelationInput = {
	id?: Prisma.SortOrder;
	projectId?: Prisma.SortOrder;
	tagId?: Prisma.SortOrder;
	project?: Prisma.ProjectOrderByWithRelationInput;
	tag?: Prisma.TagOrderByWithRelationInput;
};

export type ProjectTagWhereUniqueInput = Prisma.AtLeast<
	{
		id?: string;
		projectId_tagId?: Prisma.ProjectTagProjectIdTagIdCompoundUniqueInput;
		AND?: Prisma.ProjectTagWhereInput | Prisma.ProjectTagWhereInput[];
		OR?: Prisma.ProjectTagWhereInput[];
		NOT?: Prisma.ProjectTagWhereInput | Prisma.ProjectTagWhereInput[];
		projectId?: Prisma.StringFilter<"ProjectTag"> | string;
		tagId?: Prisma.StringFilter<"ProjectTag"> | string;
		project?: Prisma.XOR<
			Prisma.ProjectScalarRelationFilter,
			Prisma.ProjectWhereInput
		>;
		tag?: Prisma.XOR<Prisma.TagScalarRelationFilter, Prisma.TagWhereInput>;
	},
	"id" | "projectId_tagId"
>;

export type ProjectTagOrderByWithAggregationInput = {
	id?: Prisma.SortOrder;
	projectId?: Prisma.SortOrder;
	tagId?: Prisma.SortOrder;
	_count?: Prisma.ProjectTagCountOrderByAggregateInput;
	_max?: Prisma.ProjectTagMaxOrderByAggregateInput;
	_min?: Prisma.ProjectTagMinOrderByAggregateInput;
};

export type ProjectTagScalarWhereWithAggregatesInput = {
	AND?:
		| Prisma.ProjectTagScalarWhereWithAggregatesInput
		| Prisma.ProjectTagScalarWhereWithAggregatesInput[];
	OR?: Prisma.ProjectTagScalarWhereWithAggregatesInput[];
	NOT?:
		| Prisma.ProjectTagScalarWhereWithAggregatesInput
		| Prisma.ProjectTagScalarWhereWithAggregatesInput[];
	id?: Prisma.StringWithAggregatesFilter<"ProjectTag"> | string;
	projectId?: Prisma.StringWithAggregatesFilter<"ProjectTag"> | string;
	tagId?: Prisma.StringWithAggregatesFilter<"ProjectTag"> | string;
};

export type ProjectTagCreateInput = {
	id?: string;
	project: Prisma.ProjectCreateNestedOneWithoutTagsInput;
	tag: Prisma.TagCreateNestedOneWithoutProjectsInput;
};

export type ProjectTagUncheckedCreateInput = {
	id?: string;
	projectId: string;
	tagId: string;
};

export type ProjectTagUpdateInput = {
	id?: Prisma.StringFieldUpdateOperationsInput | string;
	project?: Prisma.ProjectUpdateOneRequiredWithoutTagsNestedInput;
	tag?: Prisma.TagUpdateOneRequiredWithoutProjectsNestedInput;
};

export type ProjectTagUncheckedUpdateInput = {
	id?: Prisma.StringFieldUpdateOperationsInput | string;
	projectId?: Prisma.StringFieldUpdateOperationsInput | string;
	tagId?: Prisma.StringFieldUpdateOperationsInput | string;
};

export type ProjectTagCreateManyInput = {
	id?: string;
	projectId: string;
	tagId: string;
};

export type ProjectTagUpdateManyMutationInput = {
	id?: Prisma.StringFieldUpdateOperationsInput | string;
};

export type ProjectTagUncheckedUpdateManyInput = {
	id?: Prisma.StringFieldUpdateOperationsInput | string;
	projectId?: Prisma.StringFieldUpdateOperationsInput | string;
	tagId?: Prisma.StringFieldUpdateOperationsInput | string;
};

export type ProjectTagListRelationFilter = {
	every?: Prisma.ProjectTagWhereInput;
	some?: Prisma.ProjectTagWhereInput;
	none?: Prisma.ProjectTagWhereInput;
};

export type ProjectTagOrderByRelationAggregateInput = {
	_count?: Prisma.SortOrder;
};

export type ProjectTagProjectIdTagIdCompoundUniqueInput = {
	projectId: string;
	tagId: string;
};

export type ProjectTagCountOrderByAggregateInput = {
	id?: Prisma.SortOrder;
	projectId?: Prisma.SortOrder;
	tagId?: Prisma.SortOrder;
};

export type ProjectTagMaxOrderByAggregateInput = {
	id?: Prisma.SortOrder;
	projectId?: Prisma.SortOrder;
	tagId?: Prisma.SortOrder;
};

export type ProjectTagMinOrderByAggregateInput = {
	id?: Prisma.SortOrder;
	projectId?: Prisma.SortOrder;
	tagId?: Prisma.SortOrder;
};

export type ProjectTagCreateNestedManyWithoutProjectInput = {
	create?:
		| Prisma.XOR<
				Prisma.ProjectTagCreateWithoutProjectInput,
				Prisma.ProjectTagUncheckedCreateWithoutProjectInput
		  >
		| Prisma.ProjectTagCreateWithoutProjectInput[]
		| Prisma.ProjectTagUncheckedCreateWithoutProjectInput[];
	connectOrCreate?:
		| Prisma.ProjectTagCreateOrConnectWithoutProjectInput
		| Prisma.ProjectTagCreateOrConnectWithoutProjectInput[];
	createMany?: Prisma.ProjectTagCreateManyProjectInputEnvelope;
	connect?:
		| Prisma.ProjectTagWhereUniqueInput
		| Prisma.ProjectTagWhereUniqueInput[];
};

export type ProjectTagUncheckedCreateNestedManyWithoutProjectInput = {
	create?:
		| Prisma.XOR<
				Prisma.ProjectTagCreateWithoutProjectInput,
				Prisma.ProjectTagUncheckedCreateWithoutProjectInput
		  >
		| Prisma.ProjectTagCreateWithoutProjectInput[]
		| Prisma.ProjectTagUncheckedCreateWithoutProjectInput[];
	connectOrCreate?:
		| Prisma.ProjectTagCreateOrConnectWithoutProjectInput
		| Prisma.ProjectTagCreateOrConnectWithoutProjectInput[];
	createMany?: Prisma.ProjectTagCreateManyProjectInputEnvelope;
	connect?:
		| Prisma.ProjectTagWhereUniqueInput
		| Prisma.ProjectTagWhereUniqueInput[];
};

export type ProjectTagUpdateManyWithoutProjectNestedInput = {
	create?:
		| Prisma.XOR<
				Prisma.ProjectTagCreateWithoutProjectInput,
				Prisma.ProjectTagUncheckedCreateWithoutProjectInput
		  >
		| Prisma.ProjectTagCreateWithoutProjectInput[]
		| Prisma.ProjectTagUncheckedCreateWithoutProjectInput[];
	connectOrCreate?:
		| Prisma.ProjectTagCreateOrConnectWithoutProjectInput
		| Prisma.ProjectTagCreateOrConnectWithoutProjectInput[];
	upsert?:
		| Prisma.ProjectTagUpsertWithWhereUniqueWithoutProjectInput
		| Prisma.ProjectTagUpsertWithWhereUniqueWithoutProjectInput[];
	createMany?: Prisma.ProjectTagCreateManyProjectInputEnvelope;
	set?: Prisma.ProjectTagWhereUniqueInput | Prisma.ProjectTagWhereUniqueInput[];
	disconnect?:
		| Prisma.ProjectTagWhereUniqueInput
		| Prisma.ProjectTagWhereUniqueInput[];
	delete?:
		| Prisma.ProjectTagWhereUniqueInput
		| Prisma.ProjectTagWhereUniqueInput[];
	connect?:
		| Prisma.ProjectTagWhereUniqueInput
		| Prisma.ProjectTagWhereUniqueInput[];
	update?:
		| Prisma.ProjectTagUpdateWithWhereUniqueWithoutProjectInput
		| Prisma.ProjectTagUpdateWithWhereUniqueWithoutProjectInput[];
	updateMany?:
		| Prisma.ProjectTagUpdateManyWithWhereWithoutProjectInput
		| Prisma.ProjectTagUpdateManyWithWhereWithoutProjectInput[];
	deleteMany?:
		| Prisma.ProjectTagScalarWhereInput
		| Prisma.ProjectTagScalarWhereInput[];
};

export type ProjectTagUncheckedUpdateManyWithoutProjectNestedInput = {
	create?:
		| Prisma.XOR<
				Prisma.ProjectTagCreateWithoutProjectInput,
				Prisma.ProjectTagUncheckedCreateWithoutProjectInput
		  >
		| Prisma.ProjectTagCreateWithoutProjectInput[]
		| Prisma.ProjectTagUncheckedCreateWithoutProjectInput[];
	connectOrCreate?:
		| Prisma.ProjectTagCreateOrConnectWithoutProjectInput
		| Prisma.ProjectTagCreateOrConnectWithoutProjectInput[];
	upsert?:
		| Prisma.ProjectTagUpsertWithWhereUniqueWithoutProjectInput
		| Prisma.ProjectTagUpsertWithWhereUniqueWithoutProjectInput[];
	createMany?: Prisma.ProjectTagCreateManyProjectInputEnvelope;
	set?: Prisma.ProjectTagWhereUniqueInput | Prisma.ProjectTagWhereUniqueInput[];
	disconnect?:
		| Prisma.ProjectTagWhereUniqueInput
		| Prisma.ProjectTagWhereUniqueInput[];
	delete?:
		| Prisma.ProjectTagWhereUniqueInput
		| Prisma.ProjectTagWhereUniqueInput[];
	connect?:
		| Prisma.ProjectTagWhereUniqueInput
		| Prisma.ProjectTagWhereUniqueInput[];
	update?:
		| Prisma.ProjectTagUpdateWithWhereUniqueWithoutProjectInput
		| Prisma.ProjectTagUpdateWithWhereUniqueWithoutProjectInput[];
	updateMany?:
		| Prisma.ProjectTagUpdateManyWithWhereWithoutProjectInput
		| Prisma.ProjectTagUpdateManyWithWhereWithoutProjectInput[];
	deleteMany?:
		| Prisma.ProjectTagScalarWhereInput
		| Prisma.ProjectTagScalarWhereInput[];
};

export type ProjectTagCreateNestedManyWithoutTagInput = {
	create?:
		| Prisma.XOR<
				Prisma.ProjectTagCreateWithoutTagInput,
				Prisma.ProjectTagUncheckedCreateWithoutTagInput
		  >
		| Prisma.ProjectTagCreateWithoutTagInput[]
		| Prisma.ProjectTagUncheckedCreateWithoutTagInput[];
	connectOrCreate?:
		| Prisma.ProjectTagCreateOrConnectWithoutTagInput
		| Prisma.ProjectTagCreateOrConnectWithoutTagInput[];
	createMany?: Prisma.ProjectTagCreateManyTagInputEnvelope;
	connect?:
		| Prisma.ProjectTagWhereUniqueInput
		| Prisma.ProjectTagWhereUniqueInput[];
};

export type ProjectTagUncheckedCreateNestedManyWithoutTagInput = {
	create?:
		| Prisma.XOR<
				Prisma.ProjectTagCreateWithoutTagInput,
				Prisma.ProjectTagUncheckedCreateWithoutTagInput
		  >
		| Prisma.ProjectTagCreateWithoutTagInput[]
		| Prisma.ProjectTagUncheckedCreateWithoutTagInput[];
	connectOrCreate?:
		| Prisma.ProjectTagCreateOrConnectWithoutTagInput
		| Prisma.ProjectTagCreateOrConnectWithoutTagInput[];
	createMany?: Prisma.ProjectTagCreateManyTagInputEnvelope;
	connect?:
		| Prisma.ProjectTagWhereUniqueInput
		| Prisma.ProjectTagWhereUniqueInput[];
};

export type ProjectTagUpdateManyWithoutTagNestedInput = {
	create?:
		| Prisma.XOR<
				Prisma.ProjectTagCreateWithoutTagInput,
				Prisma.ProjectTagUncheckedCreateWithoutTagInput
		  >
		| Prisma.ProjectTagCreateWithoutTagInput[]
		| Prisma.ProjectTagUncheckedCreateWithoutTagInput[];
	connectOrCreate?:
		| Prisma.ProjectTagCreateOrConnectWithoutTagInput
		| Prisma.ProjectTagCreateOrConnectWithoutTagInput[];
	upsert?:
		| Prisma.ProjectTagUpsertWithWhereUniqueWithoutTagInput
		| Prisma.ProjectTagUpsertWithWhereUniqueWithoutTagInput[];
	createMany?: Prisma.ProjectTagCreateManyTagInputEnvelope;
	set?: Prisma.ProjectTagWhereUniqueInput | Prisma.ProjectTagWhereUniqueInput[];
	disconnect?:
		| Prisma.ProjectTagWhereUniqueInput
		| Prisma.ProjectTagWhereUniqueInput[];
	delete?:
		| Prisma.ProjectTagWhereUniqueInput
		| Prisma.ProjectTagWhereUniqueInput[];
	connect?:
		| Prisma.ProjectTagWhereUniqueInput
		| Prisma.ProjectTagWhereUniqueInput[];
	update?:
		| Prisma.ProjectTagUpdateWithWhereUniqueWithoutTagInput
		| Prisma.ProjectTagUpdateWithWhereUniqueWithoutTagInput[];
	updateMany?:
		| Prisma.ProjectTagUpdateManyWithWhereWithoutTagInput
		| Prisma.ProjectTagUpdateManyWithWhereWithoutTagInput[];
	deleteMany?:
		| Prisma.ProjectTagScalarWhereInput
		| Prisma.ProjectTagScalarWhereInput[];
};

export type ProjectTagUncheckedUpdateManyWithoutTagNestedInput = {
	create?:
		| Prisma.XOR<
				Prisma.ProjectTagCreateWithoutTagInput,
				Prisma.ProjectTagUncheckedCreateWithoutTagInput
		  >
		| Prisma.ProjectTagCreateWithoutTagInput[]
		| Prisma.ProjectTagUncheckedCreateWithoutTagInput[];
	connectOrCreate?:
		| Prisma.ProjectTagCreateOrConnectWithoutTagInput
		| Prisma.ProjectTagCreateOrConnectWithoutTagInput[];
	upsert?:
		| Prisma.ProjectTagUpsertWithWhereUniqueWithoutTagInput
		| Prisma.ProjectTagUpsertWithWhereUniqueWithoutTagInput[];
	createMany?: Prisma.ProjectTagCreateManyTagInputEnvelope;
	set?: Prisma.ProjectTagWhereUniqueInput | Prisma.ProjectTagWhereUniqueInput[];
	disconnect?:
		| Prisma.ProjectTagWhereUniqueInput
		| Prisma.ProjectTagWhereUniqueInput[];
	delete?:
		| Prisma.ProjectTagWhereUniqueInput
		| Prisma.ProjectTagWhereUniqueInput[];
	connect?:
		| Prisma.ProjectTagWhereUniqueInput
		| Prisma.ProjectTagWhereUniqueInput[];
	update?:
		| Prisma.ProjectTagUpdateWithWhereUniqueWithoutTagInput
		| Prisma.ProjectTagUpdateWithWhereUniqueWithoutTagInput[];
	updateMany?:
		| Prisma.ProjectTagUpdateManyWithWhereWithoutTagInput
		| Prisma.ProjectTagUpdateManyWithWhereWithoutTagInput[];
	deleteMany?:
		| Prisma.ProjectTagScalarWhereInput
		| Prisma.ProjectTagScalarWhereInput[];
};

export type ProjectTagCreateWithoutProjectInput = {
	id?: string;
	tag: Prisma.TagCreateNestedOneWithoutProjectsInput;
};

export type ProjectTagUncheckedCreateWithoutProjectInput = {
	id?: string;
	tagId: string;
};

export type ProjectTagCreateOrConnectWithoutProjectInput = {
	where: Prisma.ProjectTagWhereUniqueInput;
	create: Prisma.XOR<
		Prisma.ProjectTagCreateWithoutProjectInput,
		Prisma.ProjectTagUncheckedCreateWithoutProjectInput
	>;
};

export type ProjectTagCreateManyProjectInputEnvelope = {
	data:
		| Prisma.ProjectTagCreateManyProjectInput
		| Prisma.ProjectTagCreateManyProjectInput[];
	skipDuplicates?: boolean;
};

export type ProjectTagUpsertWithWhereUniqueWithoutProjectInput = {
	where: Prisma.ProjectTagWhereUniqueInput;
	update: Prisma.XOR<
		Prisma.ProjectTagUpdateWithoutProjectInput,
		Prisma.ProjectTagUncheckedUpdateWithoutProjectInput
	>;
	create: Prisma.XOR<
		Prisma.ProjectTagCreateWithoutProjectInput,
		Prisma.ProjectTagUncheckedCreateWithoutProjectInput
	>;
};

export type ProjectTagUpdateWithWhereUniqueWithoutProjectInput = {
	where: Prisma.ProjectTagWhereUniqueInput;
	data: Prisma.XOR<
		Prisma.ProjectTagUpdateWithoutProjectInput,
		Prisma.ProjectTagUncheckedUpdateWithoutProjectInput
	>;
};

export type ProjectTagUpdateManyWithWhereWithoutProjectInput = {
	where: Prisma.ProjectTagScalarWhereInput;
	data: Prisma.XOR<
		Prisma.ProjectTagUpdateManyMutationInput,
		Prisma.ProjectTagUncheckedUpdateManyWithoutProjectInput
	>;
};

export type ProjectTagScalarWhereInput = {
	AND?: Prisma.ProjectTagScalarWhereInput | Prisma.ProjectTagScalarWhereInput[];
	OR?: Prisma.ProjectTagScalarWhereInput[];
	NOT?: Prisma.ProjectTagScalarWhereInput | Prisma.ProjectTagScalarWhereInput[];
	id?: Prisma.StringFilter<"ProjectTag"> | string;
	projectId?: Prisma.StringFilter<"ProjectTag"> | string;
	tagId?: Prisma.StringFilter<"ProjectTag"> | string;
};

export type ProjectTagCreateWithoutTagInput = {
	id?: string;
	project: Prisma.ProjectCreateNestedOneWithoutTagsInput;
};

export type ProjectTagUncheckedCreateWithoutTagInput = {
	id?: string;
	projectId: string;
};

export type ProjectTagCreateOrConnectWithoutTagInput = {
	where: Prisma.ProjectTagWhereUniqueInput;
	create: Prisma.XOR<
		Prisma.ProjectTagCreateWithoutTagInput,
		Prisma.ProjectTagUncheckedCreateWithoutTagInput
	>;
};

export type ProjectTagCreateManyTagInputEnvelope = {
	data:
		| Prisma.ProjectTagCreateManyTagInput
		| Prisma.ProjectTagCreateManyTagInput[];
	skipDuplicates?: boolean;
};

export type ProjectTagUpsertWithWhereUniqueWithoutTagInput = {
	where: Prisma.ProjectTagWhereUniqueInput;
	update: Prisma.XOR<
		Prisma.ProjectTagUpdateWithoutTagInput,
		Prisma.ProjectTagUncheckedUpdateWithoutTagInput
	>;
	create: Prisma.XOR<
		Prisma.ProjectTagCreateWithoutTagInput,
		Prisma.ProjectTagUncheckedCreateWithoutTagInput
	>;
};

export type ProjectTagUpdateWithWhereUniqueWithoutTagInput = {
	where: Prisma.ProjectTagWhereUniqueInput;
	data: Prisma.XOR<
		Prisma.ProjectTagUpdateWithoutTagInput,
		Prisma.ProjectTagUncheckedUpdateWithoutTagInput
	>;
};

export type ProjectTagUpdateManyWithWhereWithoutTagInput = {
	where: Prisma.ProjectTagScalarWhereInput;
	data: Prisma.XOR<
		Prisma.ProjectTagUpdateManyMutationInput,
		Prisma.ProjectTagUncheckedUpdateManyWithoutTagInput
	>;
};

export type ProjectTagCreateManyProjectInput = {
	id?: string;
	tagId: string;
};

export type ProjectTagUpdateWithoutProjectInput = {
	id?: Prisma.StringFieldUpdateOperationsInput | string;
	tag?: Prisma.TagUpdateOneRequiredWithoutProjectsNestedInput;
};

export type ProjectTagUncheckedUpdateWithoutProjectInput = {
	id?: Prisma.StringFieldUpdateOperationsInput | string;
	tagId?: Prisma.StringFieldUpdateOperationsInput | string;
};

export type ProjectTagUncheckedUpdateManyWithoutProjectInput = {
	id?: Prisma.StringFieldUpdateOperationsInput | string;
	tagId?: Prisma.StringFieldUpdateOperationsInput | string;
};

export type ProjectTagCreateManyTagInput = {
	id?: string;
	projectId: string;
};

export type ProjectTagUpdateWithoutTagInput = {
	id?: Prisma.StringFieldUpdateOperationsInput | string;
	project?: Prisma.ProjectUpdateOneRequiredWithoutTagsNestedInput;
};

export type ProjectTagUncheckedUpdateWithoutTagInput = {
	id?: Prisma.StringFieldUpdateOperationsInput | string;
	projectId?: Prisma.StringFieldUpdateOperationsInput | string;
};

export type ProjectTagUncheckedUpdateManyWithoutTagInput = {
	id?: Prisma.StringFieldUpdateOperationsInput | string;
	projectId?: Prisma.StringFieldUpdateOperationsInput | string;
};

export type ProjectTagSelect<
	ExtArgs extends
		runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = runtime.Types.Extensions.GetSelect<
	{
		id?: boolean;
		projectId?: boolean;
		tagId?: boolean;
		project?: boolean | Prisma.ProjectDefaultArgs<ExtArgs>;
		tag?: boolean | Prisma.TagDefaultArgs<ExtArgs>;
	},
	ExtArgs["result"]["projectTag"]
>;

export type ProjectTagSelectCreateManyAndReturn<
	ExtArgs extends
		runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = runtime.Types.Extensions.GetSelect<
	{
		id?: boolean;
		projectId?: boolean;
		tagId?: boolean;
		project?: boolean | Prisma.ProjectDefaultArgs<ExtArgs>;
		tag?: boolean | Prisma.TagDefaultArgs<ExtArgs>;
	},
	ExtArgs["result"]["projectTag"]
>;

export type ProjectTagSelectUpdateManyAndReturn<
	ExtArgs extends
		runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = runtime.Types.Extensions.GetSelect<
	{
		id?: boolean;
		projectId?: boolean;
		tagId?: boolean;
		project?: boolean | Prisma.ProjectDefaultArgs<ExtArgs>;
		tag?: boolean | Prisma.TagDefaultArgs<ExtArgs>;
	},
	ExtArgs["result"]["projectTag"]
>;

export type ProjectTagSelectScalar = {
	id?: boolean;
	projectId?: boolean;
	tagId?: boolean;
};

export type ProjectTagOmit<
	ExtArgs extends
		runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = runtime.Types.Extensions.GetOmit<
	"id" | "projectId" | "tagId",
	ExtArgs["result"]["projectTag"]
>;
export type ProjectTagInclude<
	ExtArgs extends
		runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
	project?: boolean | Prisma.ProjectDefaultArgs<ExtArgs>;
	tag?: boolean | Prisma.TagDefaultArgs<ExtArgs>;
};
export type ProjectTagIncludeCreateManyAndReturn<
	ExtArgs extends
		runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
	project?: boolean | Prisma.ProjectDefaultArgs<ExtArgs>;
	tag?: boolean | Prisma.TagDefaultArgs<ExtArgs>;
};
export type ProjectTagIncludeUpdateManyAndReturn<
	ExtArgs extends
		runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
	project?: boolean | Prisma.ProjectDefaultArgs<ExtArgs>;
	tag?: boolean | Prisma.TagDefaultArgs<ExtArgs>;
};

export type $ProjectTagPayload<
	ExtArgs extends
		runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
	name: "ProjectTag";
	objects: {
		project: Prisma.$ProjectPayload<ExtArgs>;
		tag: Prisma.$TagPayload<ExtArgs>;
	};
	scalars: runtime.Types.Extensions.GetPayloadResult<
		{
			id: string;
			projectId: string;
			tagId: string;
		},
		ExtArgs["result"]["projectTag"]
	>;
	composites: {};
};

export type ProjectTagGetPayload<
	S extends boolean | null | undefined | ProjectTagDefaultArgs,
> = runtime.Types.Result.GetResult<Prisma.$ProjectTagPayload, S>;

export type ProjectTagCountArgs<
	_ExtArgs extends
		runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = Omit<ProjectTagFindManyArgs, "select" | "include" | "distinct" | "omit"> & {
	select?: ProjectTagCountAggregateInputType | true;
};

export interface ProjectTagDelegate<
	ExtArgs extends
		runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
	GlobalOmitOptions = {},
> {
	[K: symbol]: {
		types: Prisma.TypeMap<ExtArgs>["model"]["ProjectTag"];
		meta: { name: "ProjectTag" };
	};
	/**
	 * Find zero or one ProjectTag that matches the filter.
	 * @param {ProjectTagFindUniqueArgs} args - Arguments to find a ProjectTag
	 * @example
	 * // Get one ProjectTag
	 * const projectTag = await prisma.projectTag.findUnique({
	 *   where: {
	 *     // ... provide filter here
	 *   }
	 * })
	 */
	findUnique<T extends ProjectTagFindUniqueArgs>(
		args: Prisma.SelectSubset<T, ProjectTagFindUniqueArgs<ExtArgs>>,
	): Prisma.Prisma__ProjectTagClient<
		runtime.Types.Result.GetResult<
			Prisma.$ProjectTagPayload<ExtArgs>,
			T,
			"findUnique",
			GlobalOmitOptions
		> | null,
		null,
		ExtArgs,
		GlobalOmitOptions
	>;

	/**
	 * Find one ProjectTag that matches the filter or throw an error with `error.code='P2025'`
	 * if no matches were found.
	 * @param {ProjectTagFindUniqueOrThrowArgs} args - Arguments to find a ProjectTag
	 * @example
	 * // Get one ProjectTag
	 * const projectTag = await prisma.projectTag.findUniqueOrThrow({
	 *   where: {
	 *     // ... provide filter here
	 *   }
	 * })
	 */
	findUniqueOrThrow<T extends ProjectTagFindUniqueOrThrowArgs>(
		args: Prisma.SelectSubset<T, ProjectTagFindUniqueOrThrowArgs<ExtArgs>>,
	): Prisma.Prisma__ProjectTagClient<
		runtime.Types.Result.GetResult<
			Prisma.$ProjectTagPayload<ExtArgs>,
			T,
			"findUniqueOrThrow",
			GlobalOmitOptions
		>,
		never,
		ExtArgs,
		GlobalOmitOptions
	>;

	/**
	 * Find the first ProjectTag that matches the filter.
	 * Note, that providing `undefined` is treated as the value not being there.
	 * Read more here: https://pris.ly/d/null-undefined
	 * @param {ProjectTagFindFirstArgs} args - Arguments to find a ProjectTag
	 * @example
	 * // Get one ProjectTag
	 * const projectTag = await prisma.projectTag.findFirst({
	 *   where: {
	 *     // ... provide filter here
	 *   }
	 * })
	 */
	findFirst<T extends ProjectTagFindFirstArgs>(
		args?: Prisma.SelectSubset<T, ProjectTagFindFirstArgs<ExtArgs>>,
	): Prisma.Prisma__ProjectTagClient<
		runtime.Types.Result.GetResult<
			Prisma.$ProjectTagPayload<ExtArgs>,
			T,
			"findFirst",
			GlobalOmitOptions
		> | null,
		null,
		ExtArgs,
		GlobalOmitOptions
	>;

	/**
	 * Find the first ProjectTag that matches the filter or
	 * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
	 * Note, that providing `undefined` is treated as the value not being there.
	 * Read more here: https://pris.ly/d/null-undefined
	 * @param {ProjectTagFindFirstOrThrowArgs} args - Arguments to find a ProjectTag
	 * @example
	 * // Get one ProjectTag
	 * const projectTag = await prisma.projectTag.findFirstOrThrow({
	 *   where: {
	 *     // ... provide filter here
	 *   }
	 * })
	 */
	findFirstOrThrow<T extends ProjectTagFindFirstOrThrowArgs>(
		args?: Prisma.SelectSubset<T, ProjectTagFindFirstOrThrowArgs<ExtArgs>>,
	): Prisma.Prisma__ProjectTagClient<
		runtime.Types.Result.GetResult<
			Prisma.$ProjectTagPayload<ExtArgs>,
			T,
			"findFirstOrThrow",
			GlobalOmitOptions
		>,
		never,
		ExtArgs,
		GlobalOmitOptions
	>;

	/**
	 * Find zero or more ProjectTags that matches the filter.
	 * Note, that providing `undefined` is treated as the value not being there.
	 * Read more here: https://pris.ly/d/null-undefined
	 * @param {ProjectTagFindManyArgs} args - Arguments to filter and select certain fields only.
	 * @example
	 * // Get all ProjectTags
	 * const projectTags = await prisma.projectTag.findMany()
	 *
	 * // Get first 10 ProjectTags
	 * const projectTags = await prisma.projectTag.findMany({ take: 10 })
	 *
	 * // Only select the `id`
	 * const projectTagWithIdOnly = await prisma.projectTag.findMany({ select: { id: true } })
	 *
	 */
	findMany<T extends ProjectTagFindManyArgs>(
		args?: Prisma.SelectSubset<T, ProjectTagFindManyArgs<ExtArgs>>,
	): Prisma.PrismaPromise<
		runtime.Types.Result.GetResult<
			Prisma.$ProjectTagPayload<ExtArgs>,
			T,
			"findMany",
			GlobalOmitOptions
		>
	>;

	/**
	 * Create a ProjectTag.
	 * @param {ProjectTagCreateArgs} args - Arguments to create a ProjectTag.
	 * @example
	 * // Create one ProjectTag
	 * const ProjectTag = await prisma.projectTag.create({
	 *   data: {
	 *     // ... data to create a ProjectTag
	 *   }
	 * })
	 *
	 */
	create<T extends ProjectTagCreateArgs>(
		args: Prisma.SelectSubset<T, ProjectTagCreateArgs<ExtArgs>>,
	): Prisma.Prisma__ProjectTagClient<
		runtime.Types.Result.GetResult<
			Prisma.$ProjectTagPayload<ExtArgs>,
			T,
			"create",
			GlobalOmitOptions
		>,
		never,
		ExtArgs,
		GlobalOmitOptions
	>;

	/**
	 * Create many ProjectTags.
	 * @param {ProjectTagCreateManyArgs} args - Arguments to create many ProjectTags.
	 * @example
	 * // Create many ProjectTags
	 * const projectTag = await prisma.projectTag.createMany({
	 *   data: [
	 *     // ... provide data here
	 *   ]
	 * })
	 *
	 */
	createMany<T extends ProjectTagCreateManyArgs>(
		args?: Prisma.SelectSubset<T, ProjectTagCreateManyArgs<ExtArgs>>,
	): Prisma.PrismaPromise<Prisma.BatchPayload>;

	/**
	 * Create many ProjectTags and returns the data saved in the database.
	 * @param {ProjectTagCreateManyAndReturnArgs} args - Arguments to create many ProjectTags.
	 * @example
	 * // Create many ProjectTags
	 * const projectTag = await prisma.projectTag.createManyAndReturn({
	 *   data: [
	 *     // ... provide data here
	 *   ]
	 * })
	 *
	 * // Create many ProjectTags and only return the `id`
	 * const projectTagWithIdOnly = await prisma.projectTag.createManyAndReturn({
	 *   select: { id: true },
	 *   data: [
	 *     // ... provide data here
	 *   ]
	 * })
	 * Note, that providing `undefined` is treated as the value not being there.
	 * Read more here: https://pris.ly/d/null-undefined
	 *
	 */
	createManyAndReturn<T extends ProjectTagCreateManyAndReturnArgs>(
		args?: Prisma.SelectSubset<T, ProjectTagCreateManyAndReturnArgs<ExtArgs>>,
	): Prisma.PrismaPromise<
		runtime.Types.Result.GetResult<
			Prisma.$ProjectTagPayload<ExtArgs>,
			T,
			"createManyAndReturn",
			GlobalOmitOptions
		>
	>;

	/**
	 * Delete a ProjectTag.
	 * @param {ProjectTagDeleteArgs} args - Arguments to delete one ProjectTag.
	 * @example
	 * // Delete one ProjectTag
	 * const ProjectTag = await prisma.projectTag.delete({
	 *   where: {
	 *     // ... filter to delete one ProjectTag
	 *   }
	 * })
	 *
	 */
	delete<T extends ProjectTagDeleteArgs>(
		args: Prisma.SelectSubset<T, ProjectTagDeleteArgs<ExtArgs>>,
	): Prisma.Prisma__ProjectTagClient<
		runtime.Types.Result.GetResult<
			Prisma.$ProjectTagPayload<ExtArgs>,
			T,
			"delete",
			GlobalOmitOptions
		>,
		never,
		ExtArgs,
		GlobalOmitOptions
	>;

	/**
	 * Update one ProjectTag.
	 * @param {ProjectTagUpdateArgs} args - Arguments to update one ProjectTag.
	 * @example
	 * // Update one ProjectTag
	 * const projectTag = await prisma.projectTag.update({
	 *   where: {
	 *     // ... provide filter here
	 *   },
	 *   data: {
	 *     // ... provide data here
	 *   }
	 * })
	 *
	 */
	update<T extends ProjectTagUpdateArgs>(
		args: Prisma.SelectSubset<T, ProjectTagUpdateArgs<ExtArgs>>,
	): Prisma.Prisma__ProjectTagClient<
		runtime.Types.Result.GetResult<
			Prisma.$ProjectTagPayload<ExtArgs>,
			T,
			"update",
			GlobalOmitOptions
		>,
		never,
		ExtArgs,
		GlobalOmitOptions
	>;

	/**
	 * Delete zero or more ProjectTags.
	 * @param {ProjectTagDeleteManyArgs} args - Arguments to filter ProjectTags to delete.
	 * @example
	 * // Delete a few ProjectTags
	 * const { count } = await prisma.projectTag.deleteMany({
	 *   where: {
	 *     // ... provide filter here
	 *   }
	 * })
	 *
	 */
	deleteMany<T extends ProjectTagDeleteManyArgs>(
		args?: Prisma.SelectSubset<T, ProjectTagDeleteManyArgs<ExtArgs>>,
	): Prisma.PrismaPromise<Prisma.BatchPayload>;

	/**
	 * Update zero or more ProjectTags.
	 * Note, that providing `undefined` is treated as the value not being there.
	 * Read more here: https://pris.ly/d/null-undefined
	 * @param {ProjectTagUpdateManyArgs} args - Arguments to update one or more rows.
	 * @example
	 * // Update many ProjectTags
	 * const projectTag = await prisma.projectTag.updateMany({
	 *   where: {
	 *     // ... provide filter here
	 *   },
	 *   data: {
	 *     // ... provide data here
	 *   }
	 * })
	 *
	 */
	updateMany<T extends ProjectTagUpdateManyArgs>(
		args: Prisma.SelectSubset<T, ProjectTagUpdateManyArgs<ExtArgs>>,
	): Prisma.PrismaPromise<Prisma.BatchPayload>;

	/**
	 * Update zero or more ProjectTags and returns the data updated in the database.
	 * @param {ProjectTagUpdateManyAndReturnArgs} args - Arguments to update many ProjectTags.
	 * @example
	 * // Update many ProjectTags
	 * const projectTag = await prisma.projectTag.updateManyAndReturn({
	 *   where: {
	 *     // ... provide filter here
	 *   },
	 *   data: [
	 *     // ... provide data here
	 *   ]
	 * })
	 *
	 * // Update zero or more ProjectTags and only return the `id`
	 * const projectTagWithIdOnly = await prisma.projectTag.updateManyAndReturn({
	 *   select: { id: true },
	 *   where: {
	 *     // ... provide filter here
	 *   },
	 *   data: [
	 *     // ... provide data here
	 *   ]
	 * })
	 * Note, that providing `undefined` is treated as the value not being there.
	 * Read more here: https://pris.ly/d/null-undefined
	 *
	 */
	updateManyAndReturn<T extends ProjectTagUpdateManyAndReturnArgs>(
		args: Prisma.SelectSubset<T, ProjectTagUpdateManyAndReturnArgs<ExtArgs>>,
	): Prisma.PrismaPromise<
		runtime.Types.Result.GetResult<
			Prisma.$ProjectTagPayload<ExtArgs>,
			T,
			"updateManyAndReturn",
			GlobalOmitOptions
		>
	>;

	/**
	 * Create or update one ProjectTag.
	 * @param {ProjectTagUpsertArgs} args - Arguments to update or create a ProjectTag.
	 * @example
	 * // Update or create a ProjectTag
	 * const projectTag = await prisma.projectTag.upsert({
	 *   create: {
	 *     // ... data to create a ProjectTag
	 *   },
	 *   update: {
	 *     // ... in case it already exists, update
	 *   },
	 *   where: {
	 *     // ... the filter for the ProjectTag we want to update
	 *   }
	 * })
	 */
	upsert<T extends ProjectTagUpsertArgs>(
		args: Prisma.SelectSubset<T, ProjectTagUpsertArgs<ExtArgs>>,
	): Prisma.Prisma__ProjectTagClient<
		runtime.Types.Result.GetResult<
			Prisma.$ProjectTagPayload<ExtArgs>,
			T,
			"upsert",
			GlobalOmitOptions
		>,
		never,
		ExtArgs,
		GlobalOmitOptions
	>;

	/**
	 * Count the number of ProjectTags.
	 * Note, that providing `undefined` is treated as the value not being there.
	 * Read more here: https://pris.ly/d/null-undefined
	 * @param {ProjectTagCountArgs} args - Arguments to filter ProjectTags to count.
	 * @example
	 * // Count the number of ProjectTags
	 * const count = await prisma.projectTag.count({
	 *   where: {
	 *     // ... the filter for the ProjectTags we want to count
	 *   }
	 * })
	 **/
	count<T extends ProjectTagCountArgs>(
		args?: Prisma.Subset<T, ProjectTagCountArgs>,
	): Prisma.PrismaPromise<
		T extends runtime.Types.Utils.Record<"select", any>
			? T["select"] extends true
				? number
				: Prisma.GetScalarType<T["select"], ProjectTagCountAggregateOutputType>
			: number
	>;

	/**
	 * Allows you to perform aggregations operations on a ProjectTag.
	 * Note, that providing `undefined` is treated as the value not being there.
	 * Read more here: https://pris.ly/d/null-undefined
	 * @param {ProjectTagAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
	 * @example
	 * // Ordered by age ascending
	 * // Where email contains prisma.io
	 * // Limited to the 10 users
	 * const aggregations = await prisma.user.aggregate({
	 *   _avg: {
	 *     age: true,
	 *   },
	 *   where: {
	 *     email: {
	 *       contains: "prisma.io",
	 *     },
	 *   },
	 *   orderBy: {
	 *     age: "asc",
	 *   },
	 *   take: 10,
	 * })
	 **/
	aggregate<T extends ProjectTagAggregateArgs>(
		args: Prisma.Subset<T, ProjectTagAggregateArgs>,
	): Prisma.PrismaPromise<GetProjectTagAggregateType<T>>;

	/**
	 * Group by ProjectTag.
	 * Note, that providing `undefined` is treated as the value not being there.
	 * Read more here: https://pris.ly/d/null-undefined
	 * @param {ProjectTagGroupByArgs} args - Group by arguments.
	 * @example
	 * // Group by city, order by createdAt, get count
	 * const result = await prisma.user.groupBy({
	 *   by: ['city', 'createdAt'],
	 *   orderBy: {
	 *     createdAt: true
	 *   },
	 *   _count: {
	 *     _all: true
	 *   },
	 * })
	 *
	 **/
	groupBy<
		T extends ProjectTagGroupByArgs,
		HasSelectOrTake extends Prisma.Or<
			Prisma.Extends<"skip", Prisma.Keys<T>>,
			Prisma.Extends<"take", Prisma.Keys<T>>
		>,
		OrderByArg extends Prisma.True extends HasSelectOrTake
			? { orderBy: ProjectTagGroupByArgs["orderBy"] }
			: { orderBy?: ProjectTagGroupByArgs["orderBy"] },
		OrderFields extends Prisma.ExcludeUnderscoreKeys<
			Prisma.Keys<Prisma.MaybeTupleToUnion<T["orderBy"]>>
		>,
		ByFields extends Prisma.MaybeTupleToUnion<T["by"]>,
		ByValid extends Prisma.Has<ByFields, OrderFields>,
		HavingFields extends Prisma.GetHavingFields<T["having"]>,
		HavingValid extends Prisma.Has<ByFields, HavingFields>,
		ByEmpty extends T["by"] extends never[] ? Prisma.True : Prisma.False,
		InputErrors extends ByEmpty extends Prisma.True
			? `Error: "by" must not be empty.`
			: HavingValid extends Prisma.False
				? {
						[P in HavingFields]: P extends ByFields
							? never
							: P extends string
								? `Error: Field "${P}" used in "having" needs to be provided in "by".`
								: [
										Error,
										"Field ",
										P,
										` in "having" needs to be provided in "by"`,
									];
					}[HavingFields]
				: "take" extends Prisma.Keys<T>
					? "orderBy" extends Prisma.Keys<T>
						? ByValid extends Prisma.True
							? {}
							: {
									[P in OrderFields]: P extends ByFields
										? never
										: `Error: Field "${P}" in "orderBy" needs to be provided in "by"`;
								}[OrderFields]
						: 'Error: If you provide "take", you also need to provide "orderBy"'
					: "skip" extends Prisma.Keys<T>
						? "orderBy" extends Prisma.Keys<T>
							? ByValid extends Prisma.True
								? {}
								: {
										[P in OrderFields]: P extends ByFields
											? never
											: `Error: Field "${P}" in "orderBy" needs to be provided in "by"`;
									}[OrderFields]
							: 'Error: If you provide "skip", you also need to provide "orderBy"'
						: ByValid extends Prisma.True
							? {}
							: {
									[P in OrderFields]: P extends ByFields
										? never
										: `Error: Field "${P}" in "orderBy" needs to be provided in "by"`;
								}[OrderFields],
	>(
		args: Prisma.SubsetIntersection<T, ProjectTagGroupByArgs, OrderByArg> &
			InputErrors,
	): {} extends InputErrors
		? GetProjectTagGroupByPayload<T>
		: Prisma.PrismaPromise<InputErrors>;
	/**
	 * Fields of the ProjectTag model
	 */
	readonly fields: ProjectTagFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for ProjectTag.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__ProjectTagClient<
	T,
	Null = never,
	ExtArgs extends
		runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
	GlobalOmitOptions = {},
> extends Prisma.PrismaPromise<T> {
	readonly [Symbol.toStringTag]: "PrismaPromise";
	project<T extends Prisma.ProjectDefaultArgs<ExtArgs> = {}>(
		args?: Prisma.Subset<T, Prisma.ProjectDefaultArgs<ExtArgs>>,
	): Prisma.Prisma__ProjectClient<
		| runtime.Types.Result.GetResult<
				Prisma.$ProjectPayload<ExtArgs>,
				T,
				"findUniqueOrThrow",
				GlobalOmitOptions
		  >
		| Null,
		Null,
		ExtArgs,
		GlobalOmitOptions
	>;
	tag<T extends Prisma.TagDefaultArgs<ExtArgs> = {}>(
		args?: Prisma.Subset<T, Prisma.TagDefaultArgs<ExtArgs>>,
	): Prisma.Prisma__TagClient<
		| runtime.Types.Result.GetResult<
				Prisma.$TagPayload<ExtArgs>,
				T,
				"findUniqueOrThrow",
				GlobalOmitOptions
		  >
		| Null,
		Null,
		ExtArgs,
		GlobalOmitOptions
	>;
	/**
	 * Attaches callbacks for the resolution and/or rejection of the Promise.
	 * @param onfulfilled The callback to execute when the Promise is resolved.
	 * @param onrejected The callback to execute when the Promise is rejected.
	 * @returns A Promise for the completion of which ever callback is executed.
	 */
	then<TResult1 = T, TResult2 = never>(
		onfulfilled?:
			| ((value: T) => TResult1 | PromiseLike<TResult1>)
			| undefined
			| null,
		onrejected?:
			| ((reason: any) => TResult2 | PromiseLike<TResult2>)
			| undefined
			| null,
	): runtime.Types.Utils.JsPromise<TResult1 | TResult2>;
	/**
	 * Attaches a callback for only the rejection of the Promise.
	 * @param onrejected The callback to execute when the Promise is rejected.
	 * @returns A Promise for the completion of the callback.
	 */
	catch<TResult = never>(
		onrejected?:
			| ((reason: any) => TResult | PromiseLike<TResult>)
			| undefined
			| null,
	): runtime.Types.Utils.JsPromise<T | TResult>;
	/**
	 * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
	 * resolved value cannot be modified from the callback.
	 * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
	 * @returns A Promise for the completion of the callback.
	 */
	finally(
		onfinally?: (() => void) | undefined | null,
	): runtime.Types.Utils.JsPromise<T>;
}

/**
 * Fields of the ProjectTag model
 */
export interface ProjectTagFieldRefs {
	readonly id: Prisma.FieldRef<"ProjectTag", "String">;
	readonly projectId: Prisma.FieldRef<"ProjectTag", "String">;
	readonly tagId: Prisma.FieldRef<"ProjectTag", "String">;
}

// Custom InputTypes
/**
 * ProjectTag findUnique
 */
export type ProjectTagFindUniqueArgs<
	ExtArgs extends
		runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
	/**
	 * Select specific fields to fetch from the ProjectTag
	 */
	select?: Prisma.ProjectTagSelect<ExtArgs> | null;
	/**
	 * Omit specific fields from the ProjectTag
	 */
	omit?: Prisma.ProjectTagOmit<ExtArgs> | null;
	/**
	 * Choose, which related nodes to fetch as well
	 */
	include?: Prisma.ProjectTagInclude<ExtArgs> | null;
	/**
	 * Filter, which ProjectTag to fetch.
	 */
	where: Prisma.ProjectTagWhereUniqueInput;
};

/**
 * ProjectTag findUniqueOrThrow
 */
export type ProjectTagFindUniqueOrThrowArgs<
	ExtArgs extends
		runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
	/**
	 * Select specific fields to fetch from the ProjectTag
	 */
	select?: Prisma.ProjectTagSelect<ExtArgs> | null;
	/**
	 * Omit specific fields from the ProjectTag
	 */
	omit?: Prisma.ProjectTagOmit<ExtArgs> | null;
	/**
	 * Choose, which related nodes to fetch as well
	 */
	include?: Prisma.ProjectTagInclude<ExtArgs> | null;
	/**
	 * Filter, which ProjectTag to fetch.
	 */
	where: Prisma.ProjectTagWhereUniqueInput;
};

/**
 * ProjectTag findFirst
 */
export type ProjectTagFindFirstArgs<
	ExtArgs extends
		runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
	/**
	 * Select specific fields to fetch from the ProjectTag
	 */
	select?: Prisma.ProjectTagSelect<ExtArgs> | null;
	/**
	 * Omit specific fields from the ProjectTag
	 */
	omit?: Prisma.ProjectTagOmit<ExtArgs> | null;
	/**
	 * Choose, which related nodes to fetch as well
	 */
	include?: Prisma.ProjectTagInclude<ExtArgs> | null;
	/**
	 * Filter, which ProjectTag to fetch.
	 */
	where?: Prisma.ProjectTagWhereInput;
	/**
	 * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
	 *
	 * Determine the order of ProjectTags to fetch.
	 */
	orderBy?:
		| Prisma.ProjectTagOrderByWithRelationInput
		| Prisma.ProjectTagOrderByWithRelationInput[];
	/**
	 * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
	 *
	 * Sets the position for searching for ProjectTags.
	 */
	cursor?: Prisma.ProjectTagWhereUniqueInput;
	/**
	 * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
	 *
	 * Take `Â±n` ProjectTags from the position of the cursor.
	 */
	take?: number;
	/**
	 * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
	 *
	 * Skip the first `n` ProjectTags.
	 */
	skip?: number;
	/**
	 * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
	 *
	 * Filter by unique combinations of ProjectTags.
	 */
	distinct?:
		| Prisma.ProjectTagScalarFieldEnum
		| Prisma.ProjectTagScalarFieldEnum[];
};

/**
 * ProjectTag findFirstOrThrow
 */
export type ProjectTagFindFirstOrThrowArgs<
	ExtArgs extends
		runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
	/**
	 * Select specific fields to fetch from the ProjectTag
	 */
	select?: Prisma.ProjectTagSelect<ExtArgs> | null;
	/**
	 * Omit specific fields from the ProjectTag
	 */
	omit?: Prisma.ProjectTagOmit<ExtArgs> | null;
	/**
	 * Choose, which related nodes to fetch as well
	 */
	include?: Prisma.ProjectTagInclude<ExtArgs> | null;
	/**
	 * Filter, which ProjectTag to fetch.
	 */
	where?: Prisma.ProjectTagWhereInput;
	/**
	 * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
	 *
	 * Determine the order of ProjectTags to fetch.
	 */
	orderBy?:
		| Prisma.ProjectTagOrderByWithRelationInput
		| Prisma.ProjectTagOrderByWithRelationInput[];
	/**
	 * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
	 *
	 * Sets the position for searching for ProjectTags.
	 */
	cursor?: Prisma.ProjectTagWhereUniqueInput;
	/**
	 * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
	 *
	 * Take `Â±n` ProjectTags from the position of the cursor.
	 */
	take?: number;
	/**
	 * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
	 *
	 * Skip the first `n` ProjectTags.
	 */
	skip?: number;
	/**
	 * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
	 *
	 * Filter by unique combinations of ProjectTags.
	 */
	distinct?:
		| Prisma.ProjectTagScalarFieldEnum
		| Prisma.ProjectTagScalarFieldEnum[];
};

/**
 * ProjectTag findMany
 */
export type ProjectTagFindManyArgs<
	ExtArgs extends
		runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
	/**
	 * Select specific fields to fetch from the ProjectTag
	 */
	select?: Prisma.ProjectTagSelect<ExtArgs> | null;
	/**
	 * Omit specific fields from the ProjectTag
	 */
	omit?: Prisma.ProjectTagOmit<ExtArgs> | null;
	/**
	 * Choose, which related nodes to fetch as well
	 */
	include?: Prisma.ProjectTagInclude<ExtArgs> | null;
	/**
	 * Filter, which ProjectTags to fetch.
	 */
	where?: Prisma.ProjectTagWhereInput;
	/**
	 * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
	 *
	 * Determine the order of ProjectTags to fetch.
	 */
	orderBy?:
		| Prisma.ProjectTagOrderByWithRelationInput
		| Prisma.ProjectTagOrderByWithRelationInput[];
	/**
	 * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
	 *
	 * Sets the position for listing ProjectTags.
	 */
	cursor?: Prisma.ProjectTagWhereUniqueInput;
	/**
	 * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
	 *
	 * Take `Â±n` ProjectTags from the position of the cursor.
	 */
	take?: number;
	/**
	 * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
	 *
	 * Skip the first `n` ProjectTags.
	 */
	skip?: number;
	distinct?:
		| Prisma.ProjectTagScalarFieldEnum
		| Prisma.ProjectTagScalarFieldEnum[];
};

/**
 * ProjectTag create
 */
export type ProjectTagCreateArgs<
	ExtArgs extends
		runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
	/**
	 * Select specific fields to fetch from the ProjectTag
	 */
	select?: Prisma.ProjectTagSelect<ExtArgs> | null;
	/**
	 * Omit specific fields from the ProjectTag
	 */
	omit?: Prisma.ProjectTagOmit<ExtArgs> | null;
	/**
	 * Choose, which related nodes to fetch as well
	 */
	include?: Prisma.ProjectTagInclude<ExtArgs> | null;
	/**
	 * The data needed to create a ProjectTag.
	 */
	data: Prisma.XOR<
		Prisma.ProjectTagCreateInput,
		Prisma.ProjectTagUncheckedCreateInput
	>;
};

/**
 * ProjectTag createMany
 */
export type ProjectTagCreateManyArgs<
	_ExtArgs extends
		runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
	/**
	 * The data used to create many ProjectTags.
	 */
	data: Prisma.ProjectTagCreateManyInput | Prisma.ProjectTagCreateManyInput[];
	skipDuplicates?: boolean;
};

/**
 * ProjectTag createManyAndReturn
 */
export type ProjectTagCreateManyAndReturnArgs<
	ExtArgs extends
		runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
	/**
	 * Select specific fields to fetch from the ProjectTag
	 */
	select?: Prisma.ProjectTagSelectCreateManyAndReturn<ExtArgs> | null;
	/**
	 * Omit specific fields from the ProjectTag
	 */
	omit?: Prisma.ProjectTagOmit<ExtArgs> | null;
	/**
	 * The data used to create many ProjectTags.
	 */
	data: Prisma.ProjectTagCreateManyInput | Prisma.ProjectTagCreateManyInput[];
	skipDuplicates?: boolean;
	/**
	 * Choose, which related nodes to fetch as well
	 */
	include?: Prisma.ProjectTagIncludeCreateManyAndReturn<ExtArgs> | null;
};

/**
 * ProjectTag update
 */
export type ProjectTagUpdateArgs<
	ExtArgs extends
		runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
	/**
	 * Select specific fields to fetch from the ProjectTag
	 */
	select?: Prisma.ProjectTagSelect<ExtArgs> | null;
	/**
	 * Omit specific fields from the ProjectTag
	 */
	omit?: Prisma.ProjectTagOmit<ExtArgs> | null;
	/**
	 * Choose, which related nodes to fetch as well
	 */
	include?: Prisma.ProjectTagInclude<ExtArgs> | null;
	/**
	 * The data needed to update a ProjectTag.
	 */
	data: Prisma.XOR<
		Prisma.ProjectTagUpdateInput,
		Prisma.ProjectTagUncheckedUpdateInput
	>;
	/**
	 * Choose, which ProjectTag to update.
	 */
	where: Prisma.ProjectTagWhereUniqueInput;
};

/**
 * ProjectTag updateMany
 */
export type ProjectTagUpdateManyArgs<
	_ExtArgs extends
		runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
	/**
	 * The data used to update ProjectTags.
	 */
	data: Prisma.XOR<
		Prisma.ProjectTagUpdateManyMutationInput,
		Prisma.ProjectTagUncheckedUpdateManyInput
	>;
	/**
	 * Filter which ProjectTags to update
	 */
	where?: Prisma.ProjectTagWhereInput;
	/**
	 * Limit how many ProjectTags to update.
	 */
	limit?: number;
};

/**
 * ProjectTag updateManyAndReturn
 */
export type ProjectTagUpdateManyAndReturnArgs<
	ExtArgs extends
		runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
	/**
	 * Select specific fields to fetch from the ProjectTag
	 */
	select?: Prisma.ProjectTagSelectUpdateManyAndReturn<ExtArgs> | null;
	/**
	 * Omit specific fields from the ProjectTag
	 */
	omit?: Prisma.ProjectTagOmit<ExtArgs> | null;
	/**
	 * The data used to update ProjectTags.
	 */
	data: Prisma.XOR<
		Prisma.ProjectTagUpdateManyMutationInput,
		Prisma.ProjectTagUncheckedUpdateManyInput
	>;
	/**
	 * Filter which ProjectTags to update
	 */
	where?: Prisma.ProjectTagWhereInput;
	/**
	 * Limit how many ProjectTags to update.
	 */
	limit?: number;
	/**
	 * Choose, which related nodes to fetch as well
	 */
	include?: Prisma.ProjectTagIncludeUpdateManyAndReturn<ExtArgs> | null;
};

/**
 * ProjectTag upsert
 */
export type ProjectTagUpsertArgs<
	ExtArgs extends
		runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
	/**
	 * Select specific fields to fetch from the ProjectTag
	 */
	select?: Prisma.ProjectTagSelect<ExtArgs> | null;
	/**
	 * Omit specific fields from the ProjectTag
	 */
	omit?: Prisma.ProjectTagOmit<ExtArgs> | null;
	/**
	 * Choose, which related nodes to fetch as well
	 */
	include?: Prisma.ProjectTagInclude<ExtArgs> | null;
	/**
	 * The filter to search for the ProjectTag to update in case it exists.
	 */
	where: Prisma.ProjectTagWhereUniqueInput;
	/**
	 * In case the ProjectTag found by the `where` argument doesn't exist, create a new ProjectTag with this data.
	 */
	create: Prisma.XOR<
		Prisma.ProjectTagCreateInput,
		Prisma.ProjectTagUncheckedCreateInput
	>;
	/**
	 * In case the ProjectTag was found with the provided `where` argument, update it with this data.
	 */
	update: Prisma.XOR<
		Prisma.ProjectTagUpdateInput,
		Prisma.ProjectTagUncheckedUpdateInput
	>;
};

/**
 * ProjectTag delete
 */
export type ProjectTagDeleteArgs<
	ExtArgs extends
		runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
	/**
	 * Select specific fields to fetch from the ProjectTag
	 */
	select?: Prisma.ProjectTagSelect<ExtArgs> | null;
	/**
	 * Omit specific fields from the ProjectTag
	 */
	omit?: Prisma.ProjectTagOmit<ExtArgs> | null;
	/**
	 * Choose, which related nodes to fetch as well
	 */
	include?: Prisma.ProjectTagInclude<ExtArgs> | null;
	/**
	 * Filter which ProjectTag to delete.
	 */
	where: Prisma.ProjectTagWhereUniqueInput;
};

/**
 * ProjectTag deleteMany
 */
export type ProjectTagDeleteManyArgs<
	_ExtArgs extends
		runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
	/**
	 * Filter which ProjectTags to delete
	 */
	where?: Prisma.ProjectTagWhereInput;
	/**
	 * Limit how many ProjectTags to delete.
	 */
	limit?: number;
};

/**
 * ProjectTag without action
 */
export type ProjectTagDefaultArgs<
	ExtArgs extends
		runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
	/**
	 * Select specific fields to fetch from the ProjectTag
	 */
	select?: Prisma.ProjectTagSelect<ExtArgs> | null;
	/**
	 * Omit specific fields from the ProjectTag
	 */
	omit?: Prisma.ProjectTagOmit<ExtArgs> | null;
	/**
	 * Choose, which related nodes to fetch as well
	 */
	include?: Prisma.ProjectTagInclude<ExtArgs> | null;
};
