/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck
/**
 * This file exports the `ProjectTechnology` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import type * as runtime from "@prisma/client/runtime/library";
import type * as Prisma from "../internal/prismaNamespace";

/**
 * Model ProjectTechnology
 *
 */
export type ProjectTechnologyModel =
	runtime.Types.Result.DefaultSelection<Prisma.$ProjectTechnologyPayload>;

export type AggregateProjectTechnology = {
	_count: ProjectTechnologyCountAggregateOutputType | null;
	_min: ProjectTechnologyMinAggregateOutputType | null;
	_max: ProjectTechnologyMaxAggregateOutputType | null;
};

export type ProjectTechnologyMinAggregateOutputType = {
	id: string | null;
	projectId: string | null;
	technologyId: string | null;
};

export type ProjectTechnologyMaxAggregateOutputType = {
	id: string | null;
	projectId: string | null;
	technologyId: string | null;
};

export type ProjectTechnologyCountAggregateOutputType = {
	id: number;
	projectId: number;
	technologyId: number;
	_all: number;
};

export type ProjectTechnologyMinAggregateInputType = {
	id?: true;
	projectId?: true;
	technologyId?: true;
};

export type ProjectTechnologyMaxAggregateInputType = {
	id?: true;
	projectId?: true;
	technologyId?: true;
};

export type ProjectTechnologyCountAggregateInputType = {
	id?: true;
	projectId?: true;
	technologyId?: true;
	_all?: true;
};

export type ProjectTechnologyAggregateArgs<
	_ExtArgs extends
		runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
	/**
	 * Filter which ProjectTechnology to aggregate.
	 */
	where?: Prisma.ProjectTechnologyWhereInput;
	/**
	 * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
	 *
	 * Determine the order of ProjectTechnologies to fetch.
	 */
	orderBy?:
		| Prisma.ProjectTechnologyOrderByWithRelationInput
		| Prisma.ProjectTechnologyOrderByWithRelationInput[];
	/**
	 * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
	 *
	 * Sets the start position
	 */
	cursor?: Prisma.ProjectTechnologyWhereUniqueInput;
	/**
	 * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
	 *
	 * Take `Â±n` ProjectTechnologies from the position of the cursor.
	 */
	take?: number;
	/**
	 * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
	 *
	 * Skip the first `n` ProjectTechnologies.
	 */
	skip?: number;
	/**
	 * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
	 *
	 * Count returned ProjectTechnologies
	 **/
	_count?: true | ProjectTechnologyCountAggregateInputType;
	/**
	 * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
	 *
	 * Select which fields to find the minimum value
	 **/
	_min?: ProjectTechnologyMinAggregateInputType;
	/**
	 * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
	 *
	 * Select which fields to find the maximum value
	 **/
	_max?: ProjectTechnologyMaxAggregateInputType;
};

export type GetProjectTechnologyAggregateType<
	T extends ProjectTechnologyAggregateArgs,
> = {
	[P in keyof T & keyof AggregateProjectTechnology]: P extends
		| "_count"
		| "count"
		? T[P] extends true
			? number
			: Prisma.GetScalarType<T[P], AggregateProjectTechnology[P]>
		: Prisma.GetScalarType<T[P], AggregateProjectTechnology[P]>;
};

export type ProjectTechnologyGroupByArgs<
	_ExtArgs extends
		runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
	where?: Prisma.ProjectTechnologyWhereInput;
	orderBy?:
		| Prisma.ProjectTechnologyOrderByWithAggregationInput
		| Prisma.ProjectTechnologyOrderByWithAggregationInput[];
	by:
		| Prisma.ProjectTechnologyScalarFieldEnum[]
		| Prisma.ProjectTechnologyScalarFieldEnum;
	having?: Prisma.ProjectTechnologyScalarWhereWithAggregatesInput;
	take?: number;
	skip?: number;
	_count?: ProjectTechnologyCountAggregateInputType | true;
	_min?: ProjectTechnologyMinAggregateInputType;
	_max?: ProjectTechnologyMaxAggregateInputType;
};

export type ProjectTechnologyGroupByOutputType = {
	id: string;
	projectId: string;
	technologyId: string;
	_count: ProjectTechnologyCountAggregateOutputType | null;
	_min: ProjectTechnologyMinAggregateOutputType | null;
	_max: ProjectTechnologyMaxAggregateOutputType | null;
};

type GetProjectTechnologyGroupByPayload<
	T extends ProjectTechnologyGroupByArgs,
> = Prisma.PrismaPromise<
	Array<
		Prisma.PickEnumerable<ProjectTechnologyGroupByOutputType, T["by"]> & {
			[P in keyof T &
				keyof ProjectTechnologyGroupByOutputType]: P extends "_count"
				? T[P] extends boolean
					? number
					: Prisma.GetScalarType<T[P], ProjectTechnologyGroupByOutputType[P]>
				: Prisma.GetScalarType<T[P], ProjectTechnologyGroupByOutputType[P]>;
		}
	>
>;

export type ProjectTechnologyWhereInput = {
	AND?:
		| Prisma.ProjectTechnologyWhereInput
		| Prisma.ProjectTechnologyWhereInput[];
	OR?: Prisma.ProjectTechnologyWhereInput[];
	NOT?:
		| Prisma.ProjectTechnologyWhereInput
		| Prisma.ProjectTechnologyWhereInput[];
	id?: Prisma.StringFilter<"ProjectTechnology"> | string;
	projectId?: Prisma.StringFilter<"ProjectTechnology"> | string;
	technologyId?: Prisma.StringFilter<"ProjectTechnology"> | string;
	project?: Prisma.XOR<
		Prisma.ProjectScalarRelationFilter,
		Prisma.ProjectWhereInput
	>;
	technology?: Prisma.XOR<
		Prisma.TechnologyScalarRelationFilter,
		Prisma.TechnologyWhereInput
	>;
};

export type ProjectTechnologyOrderByWithRelationInput = {
	id?: Prisma.SortOrder;
	projectId?: Prisma.SortOrder;
	technologyId?: Prisma.SortOrder;
	project?: Prisma.ProjectOrderByWithRelationInput;
	technology?: Prisma.TechnologyOrderByWithRelationInput;
};

export type ProjectTechnologyWhereUniqueInput = Prisma.AtLeast<
	{
		id?: string;
		projectId_technologyId?: Prisma.ProjectTechnologyProjectIdTechnologyIdCompoundUniqueInput;
		AND?:
			| Prisma.ProjectTechnologyWhereInput
			| Prisma.ProjectTechnologyWhereInput[];
		OR?: Prisma.ProjectTechnologyWhereInput[];
		NOT?:
			| Prisma.ProjectTechnologyWhereInput
			| Prisma.ProjectTechnologyWhereInput[];
		projectId?: Prisma.StringFilter<"ProjectTechnology"> | string;
		technologyId?: Prisma.StringFilter<"ProjectTechnology"> | string;
		project?: Prisma.XOR<
			Prisma.ProjectScalarRelationFilter,
			Prisma.ProjectWhereInput
		>;
		technology?: Prisma.XOR<
			Prisma.TechnologyScalarRelationFilter,
			Prisma.TechnologyWhereInput
		>;
	},
	"id" | "projectId_technologyId"
>;

export type ProjectTechnologyOrderByWithAggregationInput = {
	id?: Prisma.SortOrder;
	projectId?: Prisma.SortOrder;
	technologyId?: Prisma.SortOrder;
	_count?: Prisma.ProjectTechnologyCountOrderByAggregateInput;
	_max?: Prisma.ProjectTechnologyMaxOrderByAggregateInput;
	_min?: Prisma.ProjectTechnologyMinOrderByAggregateInput;
};

export type ProjectTechnologyScalarWhereWithAggregatesInput = {
	AND?:
		| Prisma.ProjectTechnologyScalarWhereWithAggregatesInput
		| Prisma.ProjectTechnologyScalarWhereWithAggregatesInput[];
	OR?: Prisma.ProjectTechnologyScalarWhereWithAggregatesInput[];
	NOT?:
		| Prisma.ProjectTechnologyScalarWhereWithAggregatesInput
		| Prisma.ProjectTechnologyScalarWhereWithAggregatesInput[];
	id?: Prisma.StringWithAggregatesFilter<"ProjectTechnology"> | string;
	projectId?: Prisma.StringWithAggregatesFilter<"ProjectTechnology"> | string;
	technologyId?:
		| Prisma.StringWithAggregatesFilter<"ProjectTechnology">
		| string;
};

export type ProjectTechnologyCreateInput = {
	id?: string;
	project: Prisma.ProjectCreateNestedOneWithoutTechnologiesInput;
	technology: Prisma.TechnologyCreateNestedOneWithoutProjectsInput;
};

export type ProjectTechnologyUncheckedCreateInput = {
	id?: string;
	projectId: string;
	technologyId: string;
};

export type ProjectTechnologyUpdateInput = {
	id?: Prisma.StringFieldUpdateOperationsInput | string;
	project?: Prisma.ProjectUpdateOneRequiredWithoutTechnologiesNestedInput;
	technology?: Prisma.TechnologyUpdateOneRequiredWithoutProjectsNestedInput;
};

export type ProjectTechnologyUncheckedUpdateInput = {
	id?: Prisma.StringFieldUpdateOperationsInput | string;
	projectId?: Prisma.StringFieldUpdateOperationsInput | string;
	technologyId?: Prisma.StringFieldUpdateOperationsInput | string;
};

export type ProjectTechnologyCreateManyInput = {
	id?: string;
	projectId: string;
	technologyId: string;
};

export type ProjectTechnologyUpdateManyMutationInput = {
	id?: Prisma.StringFieldUpdateOperationsInput | string;
};

export type ProjectTechnologyUncheckedUpdateManyInput = {
	id?: Prisma.StringFieldUpdateOperationsInput | string;
	projectId?: Prisma.StringFieldUpdateOperationsInput | string;
	technologyId?: Prisma.StringFieldUpdateOperationsInput | string;
};

export type ProjectTechnologyListRelationFilter = {
	every?: Prisma.ProjectTechnologyWhereInput;
	some?: Prisma.ProjectTechnologyWhereInput;
	none?: Prisma.ProjectTechnologyWhereInput;
};

export type ProjectTechnologyOrderByRelationAggregateInput = {
	_count?: Prisma.SortOrder;
};

export type ProjectTechnologyProjectIdTechnologyIdCompoundUniqueInput = {
	projectId: string;
	technologyId: string;
};

export type ProjectTechnologyCountOrderByAggregateInput = {
	id?: Prisma.SortOrder;
	projectId?: Prisma.SortOrder;
	technologyId?: Prisma.SortOrder;
};

export type ProjectTechnologyMaxOrderByAggregateInput = {
	id?: Prisma.SortOrder;
	projectId?: Prisma.SortOrder;
	technologyId?: Prisma.SortOrder;
};

export type ProjectTechnologyMinOrderByAggregateInput = {
	id?: Prisma.SortOrder;
	projectId?: Prisma.SortOrder;
	technologyId?: Prisma.SortOrder;
};

export type ProjectTechnologyCreateNestedManyWithoutProjectInput = {
	create?:
		| Prisma.XOR<
				Prisma.ProjectTechnologyCreateWithoutProjectInput,
				Prisma.ProjectTechnologyUncheckedCreateWithoutProjectInput
		  >
		| Prisma.ProjectTechnologyCreateWithoutProjectInput[]
		| Prisma.ProjectTechnologyUncheckedCreateWithoutProjectInput[];
	connectOrCreate?:
		| Prisma.ProjectTechnologyCreateOrConnectWithoutProjectInput
		| Prisma.ProjectTechnologyCreateOrConnectWithoutProjectInput[];
	createMany?: Prisma.ProjectTechnologyCreateManyProjectInputEnvelope;
	connect?:
		| Prisma.ProjectTechnologyWhereUniqueInput
		| Prisma.ProjectTechnologyWhereUniqueInput[];
};

export type ProjectTechnologyUncheckedCreateNestedManyWithoutProjectInput = {
	create?:
		| Prisma.XOR<
				Prisma.ProjectTechnologyCreateWithoutProjectInput,
				Prisma.ProjectTechnologyUncheckedCreateWithoutProjectInput
		  >
		| Prisma.ProjectTechnologyCreateWithoutProjectInput[]
		| Prisma.ProjectTechnologyUncheckedCreateWithoutProjectInput[];
	connectOrCreate?:
		| Prisma.ProjectTechnologyCreateOrConnectWithoutProjectInput
		| Prisma.ProjectTechnologyCreateOrConnectWithoutProjectInput[];
	createMany?: Prisma.ProjectTechnologyCreateManyProjectInputEnvelope;
	connect?:
		| Prisma.ProjectTechnologyWhereUniqueInput
		| Prisma.ProjectTechnologyWhereUniqueInput[];
};

export type ProjectTechnologyUpdateManyWithoutProjectNestedInput = {
	create?:
		| Prisma.XOR<
				Prisma.ProjectTechnologyCreateWithoutProjectInput,
				Prisma.ProjectTechnologyUncheckedCreateWithoutProjectInput
		  >
		| Prisma.ProjectTechnologyCreateWithoutProjectInput[]
		| Prisma.ProjectTechnologyUncheckedCreateWithoutProjectInput[];
	connectOrCreate?:
		| Prisma.ProjectTechnologyCreateOrConnectWithoutProjectInput
		| Prisma.ProjectTechnologyCreateOrConnectWithoutProjectInput[];
	upsert?:
		| Prisma.ProjectTechnologyUpsertWithWhereUniqueWithoutProjectInput
		| Prisma.ProjectTechnologyUpsertWithWhereUniqueWithoutProjectInput[];
	createMany?: Prisma.ProjectTechnologyCreateManyProjectInputEnvelope;
	set?:
		| Prisma.ProjectTechnologyWhereUniqueInput
		| Prisma.ProjectTechnologyWhereUniqueInput[];
	disconnect?:
		| Prisma.ProjectTechnologyWhereUniqueInput
		| Prisma.ProjectTechnologyWhereUniqueInput[];
	delete?:
		| Prisma.ProjectTechnologyWhereUniqueInput
		| Prisma.ProjectTechnologyWhereUniqueInput[];
	connect?:
		| Prisma.ProjectTechnologyWhereUniqueInput
		| Prisma.ProjectTechnologyWhereUniqueInput[];
	update?:
		| Prisma.ProjectTechnologyUpdateWithWhereUniqueWithoutProjectInput
		| Prisma.ProjectTechnologyUpdateWithWhereUniqueWithoutProjectInput[];
	updateMany?:
		| Prisma.ProjectTechnologyUpdateManyWithWhereWithoutProjectInput
		| Prisma.ProjectTechnologyUpdateManyWithWhereWithoutProjectInput[];
	deleteMany?:
		| Prisma.ProjectTechnologyScalarWhereInput
		| Prisma.ProjectTechnologyScalarWhereInput[];
};

export type ProjectTechnologyUncheckedUpdateManyWithoutProjectNestedInput = {
	create?:
		| Prisma.XOR<
				Prisma.ProjectTechnologyCreateWithoutProjectInput,
				Prisma.ProjectTechnologyUncheckedCreateWithoutProjectInput
		  >
		| Prisma.ProjectTechnologyCreateWithoutProjectInput[]
		| Prisma.ProjectTechnologyUncheckedCreateWithoutProjectInput[];
	connectOrCreate?:
		| Prisma.ProjectTechnologyCreateOrConnectWithoutProjectInput
		| Prisma.ProjectTechnologyCreateOrConnectWithoutProjectInput[];
	upsert?:
		| Prisma.ProjectTechnologyUpsertWithWhereUniqueWithoutProjectInput
		| Prisma.ProjectTechnologyUpsertWithWhereUniqueWithoutProjectInput[];
	createMany?: Prisma.ProjectTechnologyCreateManyProjectInputEnvelope;
	set?:
		| Prisma.ProjectTechnologyWhereUniqueInput
		| Prisma.ProjectTechnologyWhereUniqueInput[];
	disconnect?:
		| Prisma.ProjectTechnologyWhereUniqueInput
		| Prisma.ProjectTechnologyWhereUniqueInput[];
	delete?:
		| Prisma.ProjectTechnologyWhereUniqueInput
		| Prisma.ProjectTechnologyWhereUniqueInput[];
	connect?:
		| Prisma.ProjectTechnologyWhereUniqueInput
		| Prisma.ProjectTechnologyWhereUniqueInput[];
	update?:
		| Prisma.ProjectTechnologyUpdateWithWhereUniqueWithoutProjectInput
		| Prisma.ProjectTechnologyUpdateWithWhereUniqueWithoutProjectInput[];
	updateMany?:
		| Prisma.ProjectTechnologyUpdateManyWithWhereWithoutProjectInput
		| Prisma.ProjectTechnologyUpdateManyWithWhereWithoutProjectInput[];
	deleteMany?:
		| Prisma.ProjectTechnologyScalarWhereInput
		| Prisma.ProjectTechnologyScalarWhereInput[];
};

export type ProjectTechnologyCreateNestedManyWithoutTechnologyInput = {
	create?:
		| Prisma.XOR<
				Prisma.ProjectTechnologyCreateWithoutTechnologyInput,
				Prisma.ProjectTechnologyUncheckedCreateWithoutTechnologyInput
		  >
		| Prisma.ProjectTechnologyCreateWithoutTechnologyInput[]
		| Prisma.ProjectTechnologyUncheckedCreateWithoutTechnologyInput[];
	connectOrCreate?:
		| Prisma.ProjectTechnologyCreateOrConnectWithoutTechnologyInput
		| Prisma.ProjectTechnologyCreateOrConnectWithoutTechnologyInput[];
	createMany?: Prisma.ProjectTechnologyCreateManyTechnologyInputEnvelope;
	connect?:
		| Prisma.ProjectTechnologyWhereUniqueInput
		| Prisma.ProjectTechnologyWhereUniqueInput[];
};

export type ProjectTechnologyUncheckedCreateNestedManyWithoutTechnologyInput = {
	create?:
		| Prisma.XOR<
				Prisma.ProjectTechnologyCreateWithoutTechnologyInput,
				Prisma.ProjectTechnologyUncheckedCreateWithoutTechnologyInput
		  >
		| Prisma.ProjectTechnologyCreateWithoutTechnologyInput[]
		| Prisma.ProjectTechnologyUncheckedCreateWithoutTechnologyInput[];
	connectOrCreate?:
		| Prisma.ProjectTechnologyCreateOrConnectWithoutTechnologyInput
		| Prisma.ProjectTechnologyCreateOrConnectWithoutTechnologyInput[];
	createMany?: Prisma.ProjectTechnologyCreateManyTechnologyInputEnvelope;
	connect?:
		| Prisma.ProjectTechnologyWhereUniqueInput
		| Prisma.ProjectTechnologyWhereUniqueInput[];
};

export type ProjectTechnologyUpdateManyWithoutTechnologyNestedInput = {
	create?:
		| Prisma.XOR<
				Prisma.ProjectTechnologyCreateWithoutTechnologyInput,
				Prisma.ProjectTechnologyUncheckedCreateWithoutTechnologyInput
		  >
		| Prisma.ProjectTechnologyCreateWithoutTechnologyInput[]
		| Prisma.ProjectTechnologyUncheckedCreateWithoutTechnologyInput[];
	connectOrCreate?:
		| Prisma.ProjectTechnologyCreateOrConnectWithoutTechnologyInput
		| Prisma.ProjectTechnologyCreateOrConnectWithoutTechnologyInput[];
	upsert?:
		| Prisma.ProjectTechnologyUpsertWithWhereUniqueWithoutTechnologyInput
		| Prisma.ProjectTechnologyUpsertWithWhereUniqueWithoutTechnologyInput[];
	createMany?: Prisma.ProjectTechnologyCreateManyTechnologyInputEnvelope;
	set?:
		| Prisma.ProjectTechnologyWhereUniqueInput
		| Prisma.ProjectTechnologyWhereUniqueInput[];
	disconnect?:
		| Prisma.ProjectTechnologyWhereUniqueInput
		| Prisma.ProjectTechnologyWhereUniqueInput[];
	delete?:
		| Prisma.ProjectTechnologyWhereUniqueInput
		| Prisma.ProjectTechnologyWhereUniqueInput[];
	connect?:
		| Prisma.ProjectTechnologyWhereUniqueInput
		| Prisma.ProjectTechnologyWhereUniqueInput[];
	update?:
		| Prisma.ProjectTechnologyUpdateWithWhereUniqueWithoutTechnologyInput
		| Prisma.ProjectTechnologyUpdateWithWhereUniqueWithoutTechnologyInput[];
	updateMany?:
		| Prisma.ProjectTechnologyUpdateManyWithWhereWithoutTechnologyInput
		| Prisma.ProjectTechnologyUpdateManyWithWhereWithoutTechnologyInput[];
	deleteMany?:
		| Prisma.ProjectTechnologyScalarWhereInput
		| Prisma.ProjectTechnologyScalarWhereInput[];
};

export type ProjectTechnologyUncheckedUpdateManyWithoutTechnologyNestedInput = {
	create?:
		| Prisma.XOR<
				Prisma.ProjectTechnologyCreateWithoutTechnologyInput,
				Prisma.ProjectTechnologyUncheckedCreateWithoutTechnologyInput
		  >
		| Prisma.ProjectTechnologyCreateWithoutTechnologyInput[]
		| Prisma.ProjectTechnologyUncheckedCreateWithoutTechnologyInput[];
	connectOrCreate?:
		| Prisma.ProjectTechnologyCreateOrConnectWithoutTechnologyInput
		| Prisma.ProjectTechnologyCreateOrConnectWithoutTechnologyInput[];
	upsert?:
		| Prisma.ProjectTechnologyUpsertWithWhereUniqueWithoutTechnologyInput
		| Prisma.ProjectTechnologyUpsertWithWhereUniqueWithoutTechnologyInput[];
	createMany?: Prisma.ProjectTechnologyCreateManyTechnologyInputEnvelope;
	set?:
		| Prisma.ProjectTechnologyWhereUniqueInput
		| Prisma.ProjectTechnologyWhereUniqueInput[];
	disconnect?:
		| Prisma.ProjectTechnologyWhereUniqueInput
		| Prisma.ProjectTechnologyWhereUniqueInput[];
	delete?:
		| Prisma.ProjectTechnologyWhereUniqueInput
		| Prisma.ProjectTechnologyWhereUniqueInput[];
	connect?:
		| Prisma.ProjectTechnologyWhereUniqueInput
		| Prisma.ProjectTechnologyWhereUniqueInput[];
	update?:
		| Prisma.ProjectTechnologyUpdateWithWhereUniqueWithoutTechnologyInput
		| Prisma.ProjectTechnologyUpdateWithWhereUniqueWithoutTechnologyInput[];
	updateMany?:
		| Prisma.ProjectTechnologyUpdateManyWithWhereWithoutTechnologyInput
		| Prisma.ProjectTechnologyUpdateManyWithWhereWithoutTechnologyInput[];
	deleteMany?:
		| Prisma.ProjectTechnologyScalarWhereInput
		| Prisma.ProjectTechnologyScalarWhereInput[];
};

export type ProjectTechnologyCreateWithoutProjectInput = {
	id?: string;
	technology: Prisma.TechnologyCreateNestedOneWithoutProjectsInput;
};

export type ProjectTechnologyUncheckedCreateWithoutProjectInput = {
	id?: string;
	technologyId: string;
};

export type ProjectTechnologyCreateOrConnectWithoutProjectInput = {
	where: Prisma.ProjectTechnologyWhereUniqueInput;
	create: Prisma.XOR<
		Prisma.ProjectTechnologyCreateWithoutProjectInput,
		Prisma.ProjectTechnologyUncheckedCreateWithoutProjectInput
	>;
};

export type ProjectTechnologyCreateManyProjectInputEnvelope = {
	data:
		| Prisma.ProjectTechnologyCreateManyProjectInput
		| Prisma.ProjectTechnologyCreateManyProjectInput[];
	skipDuplicates?: boolean;
};

export type ProjectTechnologyUpsertWithWhereUniqueWithoutProjectInput = {
	where: Prisma.ProjectTechnologyWhereUniqueInput;
	update: Prisma.XOR<
		Prisma.ProjectTechnologyUpdateWithoutProjectInput,
		Prisma.ProjectTechnologyUncheckedUpdateWithoutProjectInput
	>;
	create: Prisma.XOR<
		Prisma.ProjectTechnologyCreateWithoutProjectInput,
		Prisma.ProjectTechnologyUncheckedCreateWithoutProjectInput
	>;
};

export type ProjectTechnologyUpdateWithWhereUniqueWithoutProjectInput = {
	where: Prisma.ProjectTechnologyWhereUniqueInput;
	data: Prisma.XOR<
		Prisma.ProjectTechnologyUpdateWithoutProjectInput,
		Prisma.ProjectTechnologyUncheckedUpdateWithoutProjectInput
	>;
};

export type ProjectTechnologyUpdateManyWithWhereWithoutProjectInput = {
	where: Prisma.ProjectTechnologyScalarWhereInput;
	data: Prisma.XOR<
		Prisma.ProjectTechnologyUpdateManyMutationInput,
		Prisma.ProjectTechnologyUncheckedUpdateManyWithoutProjectInput
	>;
};

export type ProjectTechnologyScalarWhereInput = {
	AND?:
		| Prisma.ProjectTechnologyScalarWhereInput
		| Prisma.ProjectTechnologyScalarWhereInput[];
	OR?: Prisma.ProjectTechnologyScalarWhereInput[];
	NOT?:
		| Prisma.ProjectTechnologyScalarWhereInput
		| Prisma.ProjectTechnologyScalarWhereInput[];
	id?: Prisma.StringFilter<"ProjectTechnology"> | string;
	projectId?: Prisma.StringFilter<"ProjectTechnology"> | string;
	technologyId?: Prisma.StringFilter<"ProjectTechnology"> | string;
};

export type ProjectTechnologyCreateWithoutTechnologyInput = {
	id?: string;
	project: Prisma.ProjectCreateNestedOneWithoutTechnologiesInput;
};

export type ProjectTechnologyUncheckedCreateWithoutTechnologyInput = {
	id?: string;
	projectId: string;
};

export type ProjectTechnologyCreateOrConnectWithoutTechnologyInput = {
	where: Prisma.ProjectTechnologyWhereUniqueInput;
	create: Prisma.XOR<
		Prisma.ProjectTechnologyCreateWithoutTechnologyInput,
		Prisma.ProjectTechnologyUncheckedCreateWithoutTechnologyInput
	>;
};

export type ProjectTechnologyCreateManyTechnologyInputEnvelope = {
	data:
		| Prisma.ProjectTechnologyCreateManyTechnologyInput
		| Prisma.ProjectTechnologyCreateManyTechnologyInput[];
	skipDuplicates?: boolean;
};

export type ProjectTechnologyUpsertWithWhereUniqueWithoutTechnologyInput = {
	where: Prisma.ProjectTechnologyWhereUniqueInput;
	update: Prisma.XOR<
		Prisma.ProjectTechnologyUpdateWithoutTechnologyInput,
		Prisma.ProjectTechnologyUncheckedUpdateWithoutTechnologyInput
	>;
	create: Prisma.XOR<
		Prisma.ProjectTechnologyCreateWithoutTechnologyInput,
		Prisma.ProjectTechnologyUncheckedCreateWithoutTechnologyInput
	>;
};

export type ProjectTechnologyUpdateWithWhereUniqueWithoutTechnologyInput = {
	where: Prisma.ProjectTechnologyWhereUniqueInput;
	data: Prisma.XOR<
		Prisma.ProjectTechnologyUpdateWithoutTechnologyInput,
		Prisma.ProjectTechnologyUncheckedUpdateWithoutTechnologyInput
	>;
};

export type ProjectTechnologyUpdateManyWithWhereWithoutTechnologyInput = {
	where: Prisma.ProjectTechnologyScalarWhereInput;
	data: Prisma.XOR<
		Prisma.ProjectTechnologyUpdateManyMutationInput,
		Prisma.ProjectTechnologyUncheckedUpdateManyWithoutTechnologyInput
	>;
};

export type ProjectTechnologyCreateManyProjectInput = {
	id?: string;
	technologyId: string;
};

export type ProjectTechnologyUpdateWithoutProjectInput = {
	id?: Prisma.StringFieldUpdateOperationsInput | string;
	technology?: Prisma.TechnologyUpdateOneRequiredWithoutProjectsNestedInput;
};

export type ProjectTechnologyUncheckedUpdateWithoutProjectInput = {
	id?: Prisma.StringFieldUpdateOperationsInput | string;
	technologyId?: Prisma.StringFieldUpdateOperationsInput | string;
};

export type ProjectTechnologyUncheckedUpdateManyWithoutProjectInput = {
	id?: Prisma.StringFieldUpdateOperationsInput | string;
	technologyId?: Prisma.StringFieldUpdateOperationsInput | string;
};

export type ProjectTechnologyCreateManyTechnologyInput = {
	id?: string;
	projectId: string;
};

export type ProjectTechnologyUpdateWithoutTechnologyInput = {
	id?: Prisma.StringFieldUpdateOperationsInput | string;
	project?: Prisma.ProjectUpdateOneRequiredWithoutTechnologiesNestedInput;
};

export type ProjectTechnologyUncheckedUpdateWithoutTechnologyInput = {
	id?: Prisma.StringFieldUpdateOperationsInput | string;
	projectId?: Prisma.StringFieldUpdateOperationsInput | string;
};

export type ProjectTechnologyUncheckedUpdateManyWithoutTechnologyInput = {
	id?: Prisma.StringFieldUpdateOperationsInput | string;
	projectId?: Prisma.StringFieldUpdateOperationsInput | string;
};

export type ProjectTechnologySelect<
	ExtArgs extends
		runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = runtime.Types.Extensions.GetSelect<
	{
		id?: boolean;
		projectId?: boolean;
		technologyId?: boolean;
		project?: boolean | Prisma.ProjectDefaultArgs<ExtArgs>;
		technology?: boolean | Prisma.TechnologyDefaultArgs<ExtArgs>;
	},
	ExtArgs["result"]["projectTechnology"]
>;

export type ProjectTechnologySelectCreateManyAndReturn<
	ExtArgs extends
		runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = runtime.Types.Extensions.GetSelect<
	{
		id?: boolean;
		projectId?: boolean;
		technologyId?: boolean;
		project?: boolean | Prisma.ProjectDefaultArgs<ExtArgs>;
		technology?: boolean | Prisma.TechnologyDefaultArgs<ExtArgs>;
	},
	ExtArgs["result"]["projectTechnology"]
>;

export type ProjectTechnologySelectUpdateManyAndReturn<
	ExtArgs extends
		runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = runtime.Types.Extensions.GetSelect<
	{
		id?: boolean;
		projectId?: boolean;
		technologyId?: boolean;
		project?: boolean | Prisma.ProjectDefaultArgs<ExtArgs>;
		technology?: boolean | Prisma.TechnologyDefaultArgs<ExtArgs>;
	},
	ExtArgs["result"]["projectTechnology"]
>;

export type ProjectTechnologySelectScalar = {
	id?: boolean;
	projectId?: boolean;
	technologyId?: boolean;
};

export type ProjectTechnologyOmit<
	ExtArgs extends
		runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = runtime.Types.Extensions.GetOmit<
	"id" | "projectId" | "technologyId",
	ExtArgs["result"]["projectTechnology"]
>;
export type ProjectTechnologyInclude<
	ExtArgs extends
		runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
	project?: boolean | Prisma.ProjectDefaultArgs<ExtArgs>;
	technology?: boolean | Prisma.TechnologyDefaultArgs<ExtArgs>;
};
export type ProjectTechnologyIncludeCreateManyAndReturn<
	ExtArgs extends
		runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
	project?: boolean | Prisma.ProjectDefaultArgs<ExtArgs>;
	technology?: boolean | Prisma.TechnologyDefaultArgs<ExtArgs>;
};
export type ProjectTechnologyIncludeUpdateManyAndReturn<
	ExtArgs extends
		runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
	project?: boolean | Prisma.ProjectDefaultArgs<ExtArgs>;
	technology?: boolean | Prisma.TechnologyDefaultArgs<ExtArgs>;
};

export type $ProjectTechnologyPayload<
	ExtArgs extends
		runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
	name: "ProjectTechnology";
	objects: {
		project: Prisma.$ProjectPayload<ExtArgs>;
		technology: Prisma.$TechnologyPayload<ExtArgs>;
	};
	scalars: runtime.Types.Extensions.GetPayloadResult<
		{
			id: string;
			projectId: string;
			technologyId: string;
		},
		ExtArgs["result"]["projectTechnology"]
	>;
	composites: {};
};

export type ProjectTechnologyGetPayload<
	S extends boolean | null | undefined | ProjectTechnologyDefaultArgs,
> = runtime.Types.Result.GetResult<Prisma.$ProjectTechnologyPayload, S>;

export type ProjectTechnologyCountArgs<
	_ExtArgs extends
		runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = Omit<
	ProjectTechnologyFindManyArgs,
	"select" | "include" | "distinct" | "omit"
> & {
	select?: ProjectTechnologyCountAggregateInputType | true;
};

export interface ProjectTechnologyDelegate<
	ExtArgs extends
		runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
	GlobalOmitOptions = {},
> {
	[K: symbol]: {
		types: Prisma.TypeMap<ExtArgs>["model"]["ProjectTechnology"];
		meta: { name: "ProjectTechnology" };
	};
	/**
	 * Find zero or one ProjectTechnology that matches the filter.
	 * @param {ProjectTechnologyFindUniqueArgs} args - Arguments to find a ProjectTechnology
	 * @example
	 * // Get one ProjectTechnology
	 * const projectTechnology = await prisma.projectTechnology.findUnique({
	 *   where: {
	 *     // ... provide filter here
	 *   }
	 * })
	 */
	findUnique<T extends ProjectTechnologyFindUniqueArgs>(
		args: Prisma.SelectSubset<T, ProjectTechnologyFindUniqueArgs<ExtArgs>>,
	): Prisma.Prisma__ProjectTechnologyClient<
		runtime.Types.Result.GetResult<
			Prisma.$ProjectTechnologyPayload<ExtArgs>,
			T,
			"findUnique",
			GlobalOmitOptions
		> | null,
		null,
		ExtArgs,
		GlobalOmitOptions
	>;

	/**
	 * Find one ProjectTechnology that matches the filter or throw an error with `error.code='P2025'`
	 * if no matches were found.
	 * @param {ProjectTechnologyFindUniqueOrThrowArgs} args - Arguments to find a ProjectTechnology
	 * @example
	 * // Get one ProjectTechnology
	 * const projectTechnology = await prisma.projectTechnology.findUniqueOrThrow({
	 *   where: {
	 *     // ... provide filter here
	 *   }
	 * })
	 */
	findUniqueOrThrow<T extends ProjectTechnologyFindUniqueOrThrowArgs>(
		args: Prisma.SelectSubset<
			T,
			ProjectTechnologyFindUniqueOrThrowArgs<ExtArgs>
		>,
	): Prisma.Prisma__ProjectTechnologyClient<
		runtime.Types.Result.GetResult<
			Prisma.$ProjectTechnologyPayload<ExtArgs>,
			T,
			"findUniqueOrThrow",
			GlobalOmitOptions
		>,
		never,
		ExtArgs,
		GlobalOmitOptions
	>;

	/**
	 * Find the first ProjectTechnology that matches the filter.
	 * Note, that providing `undefined` is treated as the value not being there.
	 * Read more here: https://pris.ly/d/null-undefined
	 * @param {ProjectTechnologyFindFirstArgs} args - Arguments to find a ProjectTechnology
	 * @example
	 * // Get one ProjectTechnology
	 * const projectTechnology = await prisma.projectTechnology.findFirst({
	 *   where: {
	 *     // ... provide filter here
	 *   }
	 * })
	 */
	findFirst<T extends ProjectTechnologyFindFirstArgs>(
		args?: Prisma.SelectSubset<T, ProjectTechnologyFindFirstArgs<ExtArgs>>,
	): Prisma.Prisma__ProjectTechnologyClient<
		runtime.Types.Result.GetResult<
			Prisma.$ProjectTechnologyPayload<ExtArgs>,
			T,
			"findFirst",
			GlobalOmitOptions
		> | null,
		null,
		ExtArgs,
		GlobalOmitOptions
	>;

	/**
	 * Find the first ProjectTechnology that matches the filter or
	 * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
	 * Note, that providing `undefined` is treated as the value not being there.
	 * Read more here: https://pris.ly/d/null-undefined
	 * @param {ProjectTechnologyFindFirstOrThrowArgs} args - Arguments to find a ProjectTechnology
	 * @example
	 * // Get one ProjectTechnology
	 * const projectTechnology = await prisma.projectTechnology.findFirstOrThrow({
	 *   where: {
	 *     // ... provide filter here
	 *   }
	 * })
	 */
	findFirstOrThrow<T extends ProjectTechnologyFindFirstOrThrowArgs>(
		args?: Prisma.SelectSubset<
			T,
			ProjectTechnologyFindFirstOrThrowArgs<ExtArgs>
		>,
	): Prisma.Prisma__ProjectTechnologyClient<
		runtime.Types.Result.GetResult<
			Prisma.$ProjectTechnologyPayload<ExtArgs>,
			T,
			"findFirstOrThrow",
			GlobalOmitOptions
		>,
		never,
		ExtArgs,
		GlobalOmitOptions
	>;

	/**
	 * Find zero or more ProjectTechnologies that matches the filter.
	 * Note, that providing `undefined` is treated as the value not being there.
	 * Read more here: https://pris.ly/d/null-undefined
	 * @param {ProjectTechnologyFindManyArgs} args - Arguments to filter and select certain fields only.
	 * @example
	 * // Get all ProjectTechnologies
	 * const projectTechnologies = await prisma.projectTechnology.findMany()
	 *
	 * // Get first 10 ProjectTechnologies
	 * const projectTechnologies = await prisma.projectTechnology.findMany({ take: 10 })
	 *
	 * // Only select the `id`
	 * const projectTechnologyWithIdOnly = await prisma.projectTechnology.findMany({ select: { id: true } })
	 *
	 */
	findMany<T extends ProjectTechnologyFindManyArgs>(
		args?: Prisma.SelectSubset<T, ProjectTechnologyFindManyArgs<ExtArgs>>,
	): Prisma.PrismaPromise<
		runtime.Types.Result.GetResult<
			Prisma.$ProjectTechnologyPayload<ExtArgs>,
			T,
			"findMany",
			GlobalOmitOptions
		>
	>;

	/**
	 * Create a ProjectTechnology.
	 * @param {ProjectTechnologyCreateArgs} args - Arguments to create a ProjectTechnology.
	 * @example
	 * // Create one ProjectTechnology
	 * const ProjectTechnology = await prisma.projectTechnology.create({
	 *   data: {
	 *     // ... data to create a ProjectTechnology
	 *   }
	 * })
	 *
	 */
	create<T extends ProjectTechnologyCreateArgs>(
		args: Prisma.SelectSubset<T, ProjectTechnologyCreateArgs<ExtArgs>>,
	): Prisma.Prisma__ProjectTechnologyClient<
		runtime.Types.Result.GetResult<
			Prisma.$ProjectTechnologyPayload<ExtArgs>,
			T,
			"create",
			GlobalOmitOptions
		>,
		never,
		ExtArgs,
		GlobalOmitOptions
	>;

	/**
	 * Create many ProjectTechnologies.
	 * @param {ProjectTechnologyCreateManyArgs} args - Arguments to create many ProjectTechnologies.
	 * @example
	 * // Create many ProjectTechnologies
	 * const projectTechnology = await prisma.projectTechnology.createMany({
	 *   data: [
	 *     // ... provide data here
	 *   ]
	 * })
	 *
	 */
	createMany<T extends ProjectTechnologyCreateManyArgs>(
		args?: Prisma.SelectSubset<T, ProjectTechnologyCreateManyArgs<ExtArgs>>,
	): Prisma.PrismaPromise<Prisma.BatchPayload>;

	/**
	 * Create many ProjectTechnologies and returns the data saved in the database.
	 * @param {ProjectTechnologyCreateManyAndReturnArgs} args - Arguments to create many ProjectTechnologies.
	 * @example
	 * // Create many ProjectTechnologies
	 * const projectTechnology = await prisma.projectTechnology.createManyAndReturn({
	 *   data: [
	 *     // ... provide data here
	 *   ]
	 * })
	 *
	 * // Create many ProjectTechnologies and only return the `id`
	 * const projectTechnologyWithIdOnly = await prisma.projectTechnology.createManyAndReturn({
	 *   select: { id: true },
	 *   data: [
	 *     // ... provide data here
	 *   ]
	 * })
	 * Note, that providing `undefined` is treated as the value not being there.
	 * Read more here: https://pris.ly/d/null-undefined
	 *
	 */
	createManyAndReturn<T extends ProjectTechnologyCreateManyAndReturnArgs>(
		args?: Prisma.SelectSubset<
			T,
			ProjectTechnologyCreateManyAndReturnArgs<ExtArgs>
		>,
	): Prisma.PrismaPromise<
		runtime.Types.Result.GetResult<
			Prisma.$ProjectTechnologyPayload<ExtArgs>,
			T,
			"createManyAndReturn",
			GlobalOmitOptions
		>
	>;

	/**
	 * Delete a ProjectTechnology.
	 * @param {ProjectTechnologyDeleteArgs} args - Arguments to delete one ProjectTechnology.
	 * @example
	 * // Delete one ProjectTechnology
	 * const ProjectTechnology = await prisma.projectTechnology.delete({
	 *   where: {
	 *     // ... filter to delete one ProjectTechnology
	 *   }
	 * })
	 *
	 */
	delete<T extends ProjectTechnologyDeleteArgs>(
		args: Prisma.SelectSubset<T, ProjectTechnologyDeleteArgs<ExtArgs>>,
	): Prisma.Prisma__ProjectTechnologyClient<
		runtime.Types.Result.GetResult<
			Prisma.$ProjectTechnologyPayload<ExtArgs>,
			T,
			"delete",
			GlobalOmitOptions
		>,
		never,
		ExtArgs,
		GlobalOmitOptions
	>;

	/**
	 * Update one ProjectTechnology.
	 * @param {ProjectTechnologyUpdateArgs} args - Arguments to update one ProjectTechnology.
	 * @example
	 * // Update one ProjectTechnology
	 * const projectTechnology = await prisma.projectTechnology.update({
	 *   where: {
	 *     // ... provide filter here
	 *   },
	 *   data: {
	 *     // ... provide data here
	 *   }
	 * })
	 *
	 */
	update<T extends ProjectTechnologyUpdateArgs>(
		args: Prisma.SelectSubset<T, ProjectTechnologyUpdateArgs<ExtArgs>>,
	): Prisma.Prisma__ProjectTechnologyClient<
		runtime.Types.Result.GetResult<
			Prisma.$ProjectTechnologyPayload<ExtArgs>,
			T,
			"update",
			GlobalOmitOptions
		>,
		never,
		ExtArgs,
		GlobalOmitOptions
	>;

	/**
	 * Delete zero or more ProjectTechnologies.
	 * @param {ProjectTechnologyDeleteManyArgs} args - Arguments to filter ProjectTechnologies to delete.
	 * @example
	 * // Delete a few ProjectTechnologies
	 * const { count } = await prisma.projectTechnology.deleteMany({
	 *   where: {
	 *     // ... provide filter here
	 *   }
	 * })
	 *
	 */
	deleteMany<T extends ProjectTechnologyDeleteManyArgs>(
		args?: Prisma.SelectSubset<T, ProjectTechnologyDeleteManyArgs<ExtArgs>>,
	): Prisma.PrismaPromise<Prisma.BatchPayload>;

	/**
	 * Update zero or more ProjectTechnologies.
	 * Note, that providing `undefined` is treated as the value not being there.
	 * Read more here: https://pris.ly/d/null-undefined
	 * @param {ProjectTechnologyUpdateManyArgs} args - Arguments to update one or more rows.
	 * @example
	 * // Update many ProjectTechnologies
	 * const projectTechnology = await prisma.projectTechnology.updateMany({
	 *   where: {
	 *     // ... provide filter here
	 *   },
	 *   data: {
	 *     // ... provide data here
	 *   }
	 * })
	 *
	 */
	updateMany<T extends ProjectTechnologyUpdateManyArgs>(
		args: Prisma.SelectSubset<T, ProjectTechnologyUpdateManyArgs<ExtArgs>>,
	): Prisma.PrismaPromise<Prisma.BatchPayload>;

	/**
	 * Update zero or more ProjectTechnologies and returns the data updated in the database.
	 * @param {ProjectTechnologyUpdateManyAndReturnArgs} args - Arguments to update many ProjectTechnologies.
	 * @example
	 * // Update many ProjectTechnologies
	 * const projectTechnology = await prisma.projectTechnology.updateManyAndReturn({
	 *   where: {
	 *     // ... provide filter here
	 *   },
	 *   data: [
	 *     // ... provide data here
	 *   ]
	 * })
	 *
	 * // Update zero or more ProjectTechnologies and only return the `id`
	 * const projectTechnologyWithIdOnly = await prisma.projectTechnology.updateManyAndReturn({
	 *   select: { id: true },
	 *   where: {
	 *     // ... provide filter here
	 *   },
	 *   data: [
	 *     // ... provide data here
	 *   ]
	 * })
	 * Note, that providing `undefined` is treated as the value not being there.
	 * Read more here: https://pris.ly/d/null-undefined
	 *
	 */
	updateManyAndReturn<T extends ProjectTechnologyUpdateManyAndReturnArgs>(
		args: Prisma.SelectSubset<
			T,
			ProjectTechnologyUpdateManyAndReturnArgs<ExtArgs>
		>,
	): Prisma.PrismaPromise<
		runtime.Types.Result.GetResult<
			Prisma.$ProjectTechnologyPayload<ExtArgs>,
			T,
			"updateManyAndReturn",
			GlobalOmitOptions
		>
	>;

	/**
	 * Create or update one ProjectTechnology.
	 * @param {ProjectTechnologyUpsertArgs} args - Arguments to update or create a ProjectTechnology.
	 * @example
	 * // Update or create a ProjectTechnology
	 * const projectTechnology = await prisma.projectTechnology.upsert({
	 *   create: {
	 *     // ... data to create a ProjectTechnology
	 *   },
	 *   update: {
	 *     // ... in case it already exists, update
	 *   },
	 *   where: {
	 *     // ... the filter for the ProjectTechnology we want to update
	 *   }
	 * })
	 */
	upsert<T extends ProjectTechnologyUpsertArgs>(
		args: Prisma.SelectSubset<T, ProjectTechnologyUpsertArgs<ExtArgs>>,
	): Prisma.Prisma__ProjectTechnologyClient<
		runtime.Types.Result.GetResult<
			Prisma.$ProjectTechnologyPayload<ExtArgs>,
			T,
			"upsert",
			GlobalOmitOptions
		>,
		never,
		ExtArgs,
		GlobalOmitOptions
	>;

	/**
	 * Count the number of ProjectTechnologies.
	 * Note, that providing `undefined` is treated as the value not being there.
	 * Read more here: https://pris.ly/d/null-undefined
	 * @param {ProjectTechnologyCountArgs} args - Arguments to filter ProjectTechnologies to count.
	 * @example
	 * // Count the number of ProjectTechnologies
	 * const count = await prisma.projectTechnology.count({
	 *   where: {
	 *     // ... the filter for the ProjectTechnologies we want to count
	 *   }
	 * })
	 **/
	count<T extends ProjectTechnologyCountArgs>(
		args?: Prisma.Subset<T, ProjectTechnologyCountArgs>,
	): Prisma.PrismaPromise<
		T extends runtime.Types.Utils.Record<"select", any>
			? T["select"] extends true
				? number
				: Prisma.GetScalarType<
						T["select"],
						ProjectTechnologyCountAggregateOutputType
					>
			: number
	>;

	/**
	 * Allows you to perform aggregations operations on a ProjectTechnology.
	 * Note, that providing `undefined` is treated as the value not being there.
	 * Read more here: https://pris.ly/d/null-undefined
	 * @param {ProjectTechnologyAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
	 * @example
	 * // Ordered by age ascending
	 * // Where email contains prisma.io
	 * // Limited to the 10 users
	 * const aggregations = await prisma.user.aggregate({
	 *   _avg: {
	 *     age: true,
	 *   },
	 *   where: {
	 *     email: {
	 *       contains: "prisma.io",
	 *     },
	 *   },
	 *   orderBy: {
	 *     age: "asc",
	 *   },
	 *   take: 10,
	 * })
	 **/
	aggregate<T extends ProjectTechnologyAggregateArgs>(
		args: Prisma.Subset<T, ProjectTechnologyAggregateArgs>,
	): Prisma.PrismaPromise<GetProjectTechnologyAggregateType<T>>;

	/**
	 * Group by ProjectTechnology.
	 * Note, that providing `undefined` is treated as the value not being there.
	 * Read more here: https://pris.ly/d/null-undefined
	 * @param {ProjectTechnologyGroupByArgs} args - Group by arguments.
	 * @example
	 * // Group by city, order by createdAt, get count
	 * const result = await prisma.user.groupBy({
	 *   by: ['city', 'createdAt'],
	 *   orderBy: {
	 *     createdAt: true
	 *   },
	 *   _count: {
	 *     _all: true
	 *   },
	 * })
	 *
	 **/
	groupBy<
		T extends ProjectTechnologyGroupByArgs,
		HasSelectOrTake extends Prisma.Or<
			Prisma.Extends<"skip", Prisma.Keys<T>>,
			Prisma.Extends<"take", Prisma.Keys<T>>
		>,
		OrderByArg extends Prisma.True extends HasSelectOrTake
			? { orderBy: ProjectTechnologyGroupByArgs["orderBy"] }
			: { orderBy?: ProjectTechnologyGroupByArgs["orderBy"] },
		OrderFields extends Prisma.ExcludeUnderscoreKeys<
			Prisma.Keys<Prisma.MaybeTupleToUnion<T["orderBy"]>>
		>,
		ByFields extends Prisma.MaybeTupleToUnion<T["by"]>,
		ByValid extends Prisma.Has<ByFields, OrderFields>,
		HavingFields extends Prisma.GetHavingFields<T["having"]>,
		HavingValid extends Prisma.Has<ByFields, HavingFields>,
		ByEmpty extends T["by"] extends never[] ? Prisma.True : Prisma.False,
		InputErrors extends ByEmpty extends Prisma.True
			? `Error: "by" must not be empty.`
			: HavingValid extends Prisma.False
				? {
						[P in HavingFields]: P extends ByFields
							? never
							: P extends string
								? `Error: Field "${P}" used in "having" needs to be provided in "by".`
								: [
										Error,
										"Field ",
										P,
										` in "having" needs to be provided in "by"`,
									];
					}[HavingFields]
				: "take" extends Prisma.Keys<T>
					? "orderBy" extends Prisma.Keys<T>
						? ByValid extends Prisma.True
							? {}
							: {
									[P in OrderFields]: P extends ByFields
										? never
										: `Error: Field "${P}" in "orderBy" needs to be provided in "by"`;
								}[OrderFields]
						: 'Error: If you provide "take", you also need to provide "orderBy"'
					: "skip" extends Prisma.Keys<T>
						? "orderBy" extends Prisma.Keys<T>
							? ByValid extends Prisma.True
								? {}
								: {
										[P in OrderFields]: P extends ByFields
											? never
											: `Error: Field "${P}" in "orderBy" needs to be provided in "by"`;
									}[OrderFields]
							: 'Error: If you provide "skip", you also need to provide "orderBy"'
						: ByValid extends Prisma.True
							? {}
							: {
									[P in OrderFields]: P extends ByFields
										? never
										: `Error: Field "${P}" in "orderBy" needs to be provided in "by"`;
								}[OrderFields],
	>(
		args: Prisma.SubsetIntersection<
			T,
			ProjectTechnologyGroupByArgs,
			OrderByArg
		> &
			InputErrors,
	): {} extends InputErrors
		? GetProjectTechnologyGroupByPayload<T>
		: Prisma.PrismaPromise<InputErrors>;
	/**
	 * Fields of the ProjectTechnology model
	 */
	readonly fields: ProjectTechnologyFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for ProjectTechnology.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__ProjectTechnologyClient<
	T,
	Null = never,
	ExtArgs extends
		runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
	GlobalOmitOptions = {},
> extends Prisma.PrismaPromise<T> {
	readonly [Symbol.toStringTag]: "PrismaPromise";
	project<T extends Prisma.ProjectDefaultArgs<ExtArgs> = {}>(
		args?: Prisma.Subset<T, Prisma.ProjectDefaultArgs<ExtArgs>>,
	): Prisma.Prisma__ProjectClient<
		| runtime.Types.Result.GetResult<
				Prisma.$ProjectPayload<ExtArgs>,
				T,
				"findUniqueOrThrow",
				GlobalOmitOptions
		  >
		| Null,
		Null,
		ExtArgs,
		GlobalOmitOptions
	>;
	technology<T extends Prisma.TechnologyDefaultArgs<ExtArgs> = {}>(
		args?: Prisma.Subset<T, Prisma.TechnologyDefaultArgs<ExtArgs>>,
	): Prisma.Prisma__TechnologyClient<
		| runtime.Types.Result.GetResult<
				Prisma.$TechnologyPayload<ExtArgs>,
				T,
				"findUniqueOrThrow",
				GlobalOmitOptions
		  >
		| Null,
		Null,
		ExtArgs,
		GlobalOmitOptions
	>;
	/**
	 * Attaches callbacks for the resolution and/or rejection of the Promise.
	 * @param onfulfilled The callback to execute when the Promise is resolved.
	 * @param onrejected The callback to execute when the Promise is rejected.
	 * @returns A Promise for the completion of which ever callback is executed.
	 */
	then<TResult1 = T, TResult2 = never>(
		onfulfilled?:
			| ((value: T) => TResult1 | PromiseLike<TResult1>)
			| undefined
			| null,
		onrejected?:
			| ((reason: any) => TResult2 | PromiseLike<TResult2>)
			| undefined
			| null,
	): runtime.Types.Utils.JsPromise<TResult1 | TResult2>;
	/**
	 * Attaches a callback for only the rejection of the Promise.
	 * @param onrejected The callback to execute when the Promise is rejected.
	 * @returns A Promise for the completion of the callback.
	 */
	catch<TResult = never>(
		onrejected?:
			| ((reason: any) => TResult | PromiseLike<TResult>)
			| undefined
			| null,
	): runtime.Types.Utils.JsPromise<T | TResult>;
	/**
	 * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
	 * resolved value cannot be modified from the callback.
	 * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
	 * @returns A Promise for the completion of the callback.
	 */
	finally(
		onfinally?: (() => void) | undefined | null,
	): runtime.Types.Utils.JsPromise<T>;
}

/**
 * Fields of the ProjectTechnology model
 */
export interface ProjectTechnologyFieldRefs {
	readonly id: Prisma.FieldRef<"ProjectTechnology", "String">;
	readonly projectId: Prisma.FieldRef<"ProjectTechnology", "String">;
	readonly technologyId: Prisma.FieldRef<"ProjectTechnology", "String">;
}

// Custom InputTypes
/**
 * ProjectTechnology findUnique
 */
export type ProjectTechnologyFindUniqueArgs<
	ExtArgs extends
		runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
	/**
	 * Select specific fields to fetch from the ProjectTechnology
	 */
	select?: Prisma.ProjectTechnologySelect<ExtArgs> | null;
	/**
	 * Omit specific fields from the ProjectTechnology
	 */
	omit?: Prisma.ProjectTechnologyOmit<ExtArgs> | null;
	/**
	 * Choose, which related nodes to fetch as well
	 */
	include?: Prisma.ProjectTechnologyInclude<ExtArgs> | null;
	/**
	 * Filter, which ProjectTechnology to fetch.
	 */
	where: Prisma.ProjectTechnologyWhereUniqueInput;
};

/**
 * ProjectTechnology findUniqueOrThrow
 */
export type ProjectTechnologyFindUniqueOrThrowArgs<
	ExtArgs extends
		runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
	/**
	 * Select specific fields to fetch from the ProjectTechnology
	 */
	select?: Prisma.ProjectTechnologySelect<ExtArgs> | null;
	/**
	 * Omit specific fields from the ProjectTechnology
	 */
	omit?: Prisma.ProjectTechnologyOmit<ExtArgs> | null;
	/**
	 * Choose, which related nodes to fetch as well
	 */
	include?: Prisma.ProjectTechnologyInclude<ExtArgs> | null;
	/**
	 * Filter, which ProjectTechnology to fetch.
	 */
	where: Prisma.ProjectTechnologyWhereUniqueInput;
};

/**
 * ProjectTechnology findFirst
 */
export type ProjectTechnologyFindFirstArgs<
	ExtArgs extends
		runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
	/**
	 * Select specific fields to fetch from the ProjectTechnology
	 */
	select?: Prisma.ProjectTechnologySelect<ExtArgs> | null;
	/**
	 * Omit specific fields from the ProjectTechnology
	 */
	omit?: Prisma.ProjectTechnologyOmit<ExtArgs> | null;
	/**
	 * Choose, which related nodes to fetch as well
	 */
	include?: Prisma.ProjectTechnologyInclude<ExtArgs> | null;
	/**
	 * Filter, which ProjectTechnology to fetch.
	 */
	where?: Prisma.ProjectTechnologyWhereInput;
	/**
	 * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
	 *
	 * Determine the order of ProjectTechnologies to fetch.
	 */
	orderBy?:
		| Prisma.ProjectTechnologyOrderByWithRelationInput
		| Prisma.ProjectTechnologyOrderByWithRelationInput[];
	/**
	 * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
	 *
	 * Sets the position for searching for ProjectTechnologies.
	 */
	cursor?: Prisma.ProjectTechnologyWhereUniqueInput;
	/**
	 * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
	 *
	 * Take `Â±n` ProjectTechnologies from the position of the cursor.
	 */
	take?: number;
	/**
	 * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
	 *
	 * Skip the first `n` ProjectTechnologies.
	 */
	skip?: number;
	/**
	 * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
	 *
	 * Filter by unique combinations of ProjectTechnologies.
	 */
	distinct?:
		| Prisma.ProjectTechnologyScalarFieldEnum
		| Prisma.ProjectTechnologyScalarFieldEnum[];
};

/**
 * ProjectTechnology findFirstOrThrow
 */
export type ProjectTechnologyFindFirstOrThrowArgs<
	ExtArgs extends
		runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
	/**
	 * Select specific fields to fetch from the ProjectTechnology
	 */
	select?: Prisma.ProjectTechnologySelect<ExtArgs> | null;
	/**
	 * Omit specific fields from the ProjectTechnology
	 */
	omit?: Prisma.ProjectTechnologyOmit<ExtArgs> | null;
	/**
	 * Choose, which related nodes to fetch as well
	 */
	include?: Prisma.ProjectTechnologyInclude<ExtArgs> | null;
	/**
	 * Filter, which ProjectTechnology to fetch.
	 */
	where?: Prisma.ProjectTechnologyWhereInput;
	/**
	 * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
	 *
	 * Determine the order of ProjectTechnologies to fetch.
	 */
	orderBy?:
		| Prisma.ProjectTechnologyOrderByWithRelationInput
		| Prisma.ProjectTechnologyOrderByWithRelationInput[];
	/**
	 * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
	 *
	 * Sets the position for searching for ProjectTechnologies.
	 */
	cursor?: Prisma.ProjectTechnologyWhereUniqueInput;
	/**
	 * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
	 *
	 * Take `Â±n` ProjectTechnologies from the position of the cursor.
	 */
	take?: number;
	/**
	 * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
	 *
	 * Skip the first `n` ProjectTechnologies.
	 */
	skip?: number;
	/**
	 * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
	 *
	 * Filter by unique combinations of ProjectTechnologies.
	 */
	distinct?:
		| Prisma.ProjectTechnologyScalarFieldEnum
		| Prisma.ProjectTechnologyScalarFieldEnum[];
};

/**
 * ProjectTechnology findMany
 */
export type ProjectTechnologyFindManyArgs<
	ExtArgs extends
		runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
	/**
	 * Select specific fields to fetch from the ProjectTechnology
	 */
	select?: Prisma.ProjectTechnologySelect<ExtArgs> | null;
	/**
	 * Omit specific fields from the ProjectTechnology
	 */
	omit?: Prisma.ProjectTechnologyOmit<ExtArgs> | null;
	/**
	 * Choose, which related nodes to fetch as well
	 */
	include?: Prisma.ProjectTechnologyInclude<ExtArgs> | null;
	/**
	 * Filter, which ProjectTechnologies to fetch.
	 */
	where?: Prisma.ProjectTechnologyWhereInput;
	/**
	 * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
	 *
	 * Determine the order of ProjectTechnologies to fetch.
	 */
	orderBy?:
		| Prisma.ProjectTechnologyOrderByWithRelationInput
		| Prisma.ProjectTechnologyOrderByWithRelationInput[];
	/**
	 * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
	 *
	 * Sets the position for listing ProjectTechnologies.
	 */
	cursor?: Prisma.ProjectTechnologyWhereUniqueInput;
	/**
	 * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
	 *
	 * Take `Â±n` ProjectTechnologies from the position of the cursor.
	 */
	take?: number;
	/**
	 * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
	 *
	 * Skip the first `n` ProjectTechnologies.
	 */
	skip?: number;
	distinct?:
		| Prisma.ProjectTechnologyScalarFieldEnum
		| Prisma.ProjectTechnologyScalarFieldEnum[];
};

/**
 * ProjectTechnology create
 */
export type ProjectTechnologyCreateArgs<
	ExtArgs extends
		runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
	/**
	 * Select specific fields to fetch from the ProjectTechnology
	 */
	select?: Prisma.ProjectTechnologySelect<ExtArgs> | null;
	/**
	 * Omit specific fields from the ProjectTechnology
	 */
	omit?: Prisma.ProjectTechnologyOmit<ExtArgs> | null;
	/**
	 * Choose, which related nodes to fetch as well
	 */
	include?: Prisma.ProjectTechnologyInclude<ExtArgs> | null;
	/**
	 * The data needed to create a ProjectTechnology.
	 */
	data: Prisma.XOR<
		Prisma.ProjectTechnologyCreateInput,
		Prisma.ProjectTechnologyUncheckedCreateInput
	>;
};

/**
 * ProjectTechnology createMany
 */
export type ProjectTechnologyCreateManyArgs<
	_ExtArgs extends
		runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
	/**
	 * The data used to create many ProjectTechnologies.
	 */
	data:
		| Prisma.ProjectTechnologyCreateManyInput
		| Prisma.ProjectTechnologyCreateManyInput[];
	skipDuplicates?: boolean;
};

/**
 * ProjectTechnology createManyAndReturn
 */
export type ProjectTechnologyCreateManyAndReturnArgs<
	ExtArgs extends
		runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
	/**
	 * Select specific fields to fetch from the ProjectTechnology
	 */
	select?: Prisma.ProjectTechnologySelectCreateManyAndReturn<ExtArgs> | null;
	/**
	 * Omit specific fields from the ProjectTechnology
	 */
	omit?: Prisma.ProjectTechnologyOmit<ExtArgs> | null;
	/**
	 * The data used to create many ProjectTechnologies.
	 */
	data:
		| Prisma.ProjectTechnologyCreateManyInput
		| Prisma.ProjectTechnologyCreateManyInput[];
	skipDuplicates?: boolean;
	/**
	 * Choose, which related nodes to fetch as well
	 */
	include?: Prisma.ProjectTechnologyIncludeCreateManyAndReturn<ExtArgs> | null;
};

/**
 * ProjectTechnology update
 */
export type ProjectTechnologyUpdateArgs<
	ExtArgs extends
		runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
	/**
	 * Select specific fields to fetch from the ProjectTechnology
	 */
	select?: Prisma.ProjectTechnologySelect<ExtArgs> | null;
	/**
	 * Omit specific fields from the ProjectTechnology
	 */
	omit?: Prisma.ProjectTechnologyOmit<ExtArgs> | null;
	/**
	 * Choose, which related nodes to fetch as well
	 */
	include?: Prisma.ProjectTechnologyInclude<ExtArgs> | null;
	/**
	 * The data needed to update a ProjectTechnology.
	 */
	data: Prisma.XOR<
		Prisma.ProjectTechnologyUpdateInput,
		Prisma.ProjectTechnologyUncheckedUpdateInput
	>;
	/**
	 * Choose, which ProjectTechnology to update.
	 */
	where: Prisma.ProjectTechnologyWhereUniqueInput;
};

/**
 * ProjectTechnology updateMany
 */
export type ProjectTechnologyUpdateManyArgs<
	_ExtArgs extends
		runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
	/**
	 * The data used to update ProjectTechnologies.
	 */
	data: Prisma.XOR<
		Prisma.ProjectTechnologyUpdateManyMutationInput,
		Prisma.ProjectTechnologyUncheckedUpdateManyInput
	>;
	/**
	 * Filter which ProjectTechnologies to update
	 */
	where?: Prisma.ProjectTechnologyWhereInput;
	/**
	 * Limit how many ProjectTechnologies to update.
	 */
	limit?: number;
};

/**
 * ProjectTechnology updateManyAndReturn
 */
export type ProjectTechnologyUpdateManyAndReturnArgs<
	ExtArgs extends
		runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
	/**
	 * Select specific fields to fetch from the ProjectTechnology
	 */
	select?: Prisma.ProjectTechnologySelectUpdateManyAndReturn<ExtArgs> | null;
	/**
	 * Omit specific fields from the ProjectTechnology
	 */
	omit?: Prisma.ProjectTechnologyOmit<ExtArgs> | null;
	/**
	 * The data used to update ProjectTechnologies.
	 */
	data: Prisma.XOR<
		Prisma.ProjectTechnologyUpdateManyMutationInput,
		Prisma.ProjectTechnologyUncheckedUpdateManyInput
	>;
	/**
	 * Filter which ProjectTechnologies to update
	 */
	where?: Prisma.ProjectTechnologyWhereInput;
	/**
	 * Limit how many ProjectTechnologies to update.
	 */
	limit?: number;
	/**
	 * Choose, which related nodes to fetch as well
	 */
	include?: Prisma.ProjectTechnologyIncludeUpdateManyAndReturn<ExtArgs> | null;
};

/**
 * ProjectTechnology upsert
 */
export type ProjectTechnologyUpsertArgs<
	ExtArgs extends
		runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
	/**
	 * Select specific fields to fetch from the ProjectTechnology
	 */
	select?: Prisma.ProjectTechnologySelect<ExtArgs> | null;
	/**
	 * Omit specific fields from the ProjectTechnology
	 */
	omit?: Prisma.ProjectTechnologyOmit<ExtArgs> | null;
	/**
	 * Choose, which related nodes to fetch as well
	 */
	include?: Prisma.ProjectTechnologyInclude<ExtArgs> | null;
	/**
	 * The filter to search for the ProjectTechnology to update in case it exists.
	 */
	where: Prisma.ProjectTechnologyWhereUniqueInput;
	/**
	 * In case the ProjectTechnology found by the `where` argument doesn't exist, create a new ProjectTechnology with this data.
	 */
	create: Prisma.XOR<
		Prisma.ProjectTechnologyCreateInput,
		Prisma.ProjectTechnologyUncheckedCreateInput
	>;
	/**
	 * In case the ProjectTechnology was found with the provided `where` argument, update it with this data.
	 */
	update: Prisma.XOR<
		Prisma.ProjectTechnologyUpdateInput,
		Prisma.ProjectTechnologyUncheckedUpdateInput
	>;
};

/**
 * ProjectTechnology delete
 */
export type ProjectTechnologyDeleteArgs<
	ExtArgs extends
		runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
	/**
	 * Select specific fields to fetch from the ProjectTechnology
	 */
	select?: Prisma.ProjectTechnologySelect<ExtArgs> | null;
	/**
	 * Omit specific fields from the ProjectTechnology
	 */
	omit?: Prisma.ProjectTechnologyOmit<ExtArgs> | null;
	/**
	 * Choose, which related nodes to fetch as well
	 */
	include?: Prisma.ProjectTechnologyInclude<ExtArgs> | null;
	/**
	 * Filter which ProjectTechnology to delete.
	 */
	where: Prisma.ProjectTechnologyWhereUniqueInput;
};

/**
 * ProjectTechnology deleteMany
 */
export type ProjectTechnologyDeleteManyArgs<
	_ExtArgs extends
		runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
	/**
	 * Filter which ProjectTechnologies to delete
	 */
	where?: Prisma.ProjectTechnologyWhereInput;
	/**
	 * Limit how many ProjectTechnologies to delete.
	 */
	limit?: number;
};

/**
 * ProjectTechnology without action
 */
export type ProjectTechnologyDefaultArgs<
	ExtArgs extends
		runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
	/**
	 * Select specific fields to fetch from the ProjectTechnology
	 */
	select?: Prisma.ProjectTechnologySelect<ExtArgs> | null;
	/**
	 * Omit specific fields from the ProjectTechnology
	 */
	omit?: Prisma.ProjectTechnologyOmit<ExtArgs> | null;
	/**
	 * Choose, which related nodes to fetch as well
	 */
	include?: Prisma.ProjectTechnologyInclude<ExtArgs> | null;
};
