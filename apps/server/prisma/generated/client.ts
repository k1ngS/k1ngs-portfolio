/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck
/**
 * This file should be your main import to use Prisma. Through it you get access to all the models, enums, and input types.
 *
 * ðŸŸ¢ You can import this file directly.
 */

import * as path from "node:path";
import * as process from "node:process";
import { fileURLToPath } from "node:url";

const __dirname = path.dirname(fileURLToPath(import.meta.url));

import type * as runtime from "@prisma/client/runtime/library";
import * as $Enums from "./enums";
import * as $Class from "./internal/class";
import * as Prisma from "./internal/prismaNamespace";

export * as $Enums from "./enums";
/**
 * ## Prisma Client
 *
 * Type-safe database client for TypeScript
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Users
 * const users = await prisma.user.findMany()
 * ```
 *
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export const PrismaClient = $Class.getPrismaClientClass(__dirname);
export type PrismaClient<
	ClientOptions extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
	Log = $Class.LogOptions<ClientOptions>,
	ExtArgs extends
		runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = $Class.PrismaClient<ClientOptions, Log, ExtArgs>;
export { Prisma };

// file annotations for bundling tools to include these files
path.join(__dirname, "libquery_engine-debian-openssl-3.0.x.so.node");
path.join(
	process.cwd(),
	"prisma/generated/libquery_engine-debian-openssl-3.0.x.so.node",
);

/**
 * Model User
 *
 */
export type User = Prisma.UserModel;
/**
 * Model Session
 *
 */
export type Session = Prisma.SessionModel;
/**
 * Model Account
 *
 */
export type Account = Prisma.AccountModel;
/**
 * Model Verification
 *
 */
export type Verification = Prisma.VerificationModel;
/**
 * Model Project
 *
 */
export type Project = Prisma.ProjectModel;
/**
 * Model ProjectTranslation
 *
 */
export type ProjectTranslation = Prisma.ProjectTranslationModel;
/**
 * Model Technology
 *
 */
export type Technology = Prisma.TechnologyModel;
/**
 * Model ProjectTechnology
 *
 */
export type ProjectTechnology = Prisma.ProjectTechnologyModel;
/**
 * Model Tag
 *
 */
export type Tag = Prisma.TagModel;
/**
 * Model ProjectTag
 *
 */
export type ProjectTag = Prisma.ProjectTagModel;
/**
 * Model Skill
 *
 */
export type Skill = Prisma.SkillModel;
/**
 * Model SkillTranslation
 *
 */
export type SkillTranslation = Prisma.SkillTranslationModel;
/**
 * Model Content
 *
 */
export type Content = Prisma.ContentModel;
/**
 * Model ContentTranslation
 *
 */
export type ContentTranslation = Prisma.ContentTranslationModel;
/**
 * Model Contact
 *
 */
export type Contact = Prisma.ContactModel;
/**
 * Model ImplementationPlan
 *
 */
export type ImplementationPlan = Prisma.ImplementationPlanModel;

export type UserRole = $Enums.UserRole;
export const UserRole = $Enums.UserRole;

export type ProjectCategory = $Enums.ProjectCategory;
export const ProjectCategory = $Enums.ProjectCategory;

export type ProjectStatus = $Enums.ProjectStatus;
export const ProjectStatus = $Enums.ProjectStatus;

export type TechnologyCategory = $Enums.TechnologyCategory;
export const TechnologyCategory = $Enums.TechnologyCategory;

export type SkillCategory = $Enums.SkillCategory;
export const SkillCategory = $Enums.SkillCategory;

export type ContentType = $Enums.ContentType;
export const ContentType = $Enums.ContentType;

export type ContactStatus = $Enums.ContactStatus;
export const ContactStatus = $Enums.ContactStatus;

export type ImplementationCategory = $Enums.ImplementationCategory;
export const ImplementationCategory = $Enums.ImplementationCategory;

export type ImplementationPriority = $Enums.ImplementationPriority;
export const ImplementationPriority = $Enums.ImplementationPriority;
