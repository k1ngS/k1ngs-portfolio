// Portfolio Content Models

model Project {
  id          String   @id @default(cuid()) @map("_id")
  title       String
  description String
  content     String?
  category    ProjectCategory
  status      ProjectStatus   @default(ACTIVE)
  featured    Boolean         @default(false)
  githubUrl   String?
  demoUrl     String?
  imageUrl    String?
  order       Int             @default(0)
  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @updatedAt

  // Relations
  technologies ProjectTechnology[]
  tags         ProjectTag[]
  translations ProjectTranslation[]

  @@map("project")
}

model ProjectTranslation {
  id          String @id @default(cuid()) @map("_id")
  projectId   String
  language    String
  title       String
  description String
  content     String?

  project Project @relation(fields: [projectId], references: [id], onDelete: Cascade)

  @@unique([projectId, language])
  @@map("project_translation")
}

model Technology {
  id       String              @id @default(cuid()) @map("_id")
  name     String              @unique
  icon     String?
  color    String?
  category TechnologyCategory?
  order    Int                 @default(0)

  // Relations
  projects ProjectTechnology[]
  skills   Skill[]

  @@map("technology")
}

model ProjectTechnology {
  id           String @id @default(cuid()) @map("_id")
  projectId    String
  technologyId String

  project    Project    @relation(fields: [projectId], references: [id], onDelete: Cascade)
  technology Technology @relation(fields: [technologyId], references: [id], onDelete: Cascade)

  @@unique([projectId, technologyId])
  @@map("project_technology")
}

model Tag {
  id       String @id @default(cuid()) @map("_id")
  name     String @unique
  color    String?

  // Relations
  projects ProjectTag[]

  @@map("tag")
}

model ProjectTag {
  id        String @id @default(cuid()) @map("_id")
  projectId String
  tagId     String

  project Project @relation(fields: [projectId], references: [id], onDelete: Cascade)
  tag     Tag     @relation(fields: [tagId], references: [id], onDelete: Cascade)

  @@unique([projectId, tagId])
  @@map("project_tag")
}

model Skill {
  id           String              @id @default(cuid()) @map("_id")
  name         String
  level        Int                 // 0-100
  category     SkillCategory
  description  String?
  yearsOfExp   Int                 @default(0)
  certified    Boolean             @default(false)
  isNew        Boolean             @default(false)
  order        Int                 @default(0)
  technologyId String?

  technology Technology? @relation(fields: [technologyId], references: [id])
  translations SkillTranslation[]

  @@map("skill")
}

model SkillTranslation {
  id          String @id @default(cuid()) @map("_id")
  skillId     String
  language    String
  name        String
  description String?

  skill Skill @relation(fields: [skillId], references: [id], onDelete: Cascade)

  @@unique([skillId, language])
  @@map("skill_translation")
}

model Content {
  id        String   @id @default(cuid()) @map("_id")
  key       String   @unique // e.g., "about.welcome", "contact.intro"
  type      ContentType @default(TEXT)
  category  String?  // e.g., "about", "contact", "general"
  order     Int      @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  translations ContentTranslation[]

  @@map("content")
}

model ContentTranslation {
  id        String @id @default(cuid()) @map("_id")
  contentId String
  language  String
  value     String

  content Content @relation(fields: [contentId], references: [id], onDelete: Cascade)

  @@unique([contentId, language])
  @@map("content_translation")
}

model Contact {
  id        String        @id @default(cuid()) @map("_id")
  name      String
  email     String
  subject   String?
  message   String
  status    ContactStatus @default(UNREAD)
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt

  @@map("contact")
}

model ImplementationPlan {
  id            String                    @id @default(cuid()) @map("_id")
  title         String
  description   String
  category      ImplementationCategory    @default(PENDING)
  priority      ImplementationPriority    @default(MEDIUM)
  estimatedTime String?
  dependencies  String[]                  @default([])
  order         Int                       @default(0)
  createdAt     DateTime                  @default(now())
  updatedAt     DateTime                  @updatedAt

  @@map("implementation_plan")
}

// Enums
enum ProjectCategory {
  WEB
  MOBILE
  API
  DESKTOP
  AI
  GAME
  OTHER
}

enum ProjectStatus {
  ACTIVE
  ARCHIVED
  DRAFT
}

enum TechnologyCategory {
  FRONTEND
  BACKEND
  DATABASE
  DEVOPS
  MOBILE
  AI
  DESIGN
  OTHER
}

enum SkillCategory {
  FRONTEND
  BACKEND
  DATABASE
  DEVOPS
  MOBILE
  AI
  DESIGN
  SOFT_SKILLS
  OTHER
}

enum ContentType {
  TEXT
  MARKDOWN
  HTML
  JSON
}

enum ContactStatus {
  UNREAD
  READ
  REPLIED
  ARCHIVED
}

enum ImplementationCategory {
  COMPLETED
  IN_PROGRESS
  PENDING
  FUTURE
}

enum ImplementationPriority {
  HIGH
  MEDIUM
  LOW
}