/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as LoginRouteImport } from './routes/login'
import { Route as DashboardRouteImport } from './routes/dashboard'
import { Route as AdminRouteImport } from './routes/admin'
import { Route as IndexRouteImport } from './routes/index'
import { Route as AdminIndexRouteImport } from './routes/admin/index'
import { Route as AdminTerminalRouteImport } from './routes/admin/terminal'
import { Route as AdminTechnologiesRouteImport } from './routes/admin/technologies'
import { Route as AdminSkillsRouteImport } from './routes/admin/skills'
import { Route as AdminProjectsRouteImport } from './routes/admin/projects'
import { Route as AdminImplementationPlanRouteImport } from './routes/admin/implementation-plan'
import { Route as AdminContentRouteImport } from './routes/admin/content'

const LoginRoute = LoginRouteImport.update({
  id: '/login',
  path: '/login',
  getParentRoute: () => rootRouteImport,
} as any)
const DashboardRoute = DashboardRouteImport.update({
  id: '/dashboard',
  path: '/dashboard',
  getParentRoute: () => rootRouteImport,
} as any)
const AdminRoute = AdminRouteImport.update({
  id: '/admin',
  path: '/admin',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const AdminIndexRoute = AdminIndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => AdminRoute,
} as any)
const AdminTerminalRoute = AdminTerminalRouteImport.update({
  id: '/terminal',
  path: '/terminal',
  getParentRoute: () => AdminRoute,
} as any)
const AdminTechnologiesRoute = AdminTechnologiesRouteImport.update({
  id: '/technologies',
  path: '/technologies',
  getParentRoute: () => AdminRoute,
} as any)
const AdminSkillsRoute = AdminSkillsRouteImport.update({
  id: '/skills',
  path: '/skills',
  getParentRoute: () => AdminRoute,
} as any)
const AdminProjectsRoute = AdminProjectsRouteImport.update({
  id: '/projects',
  path: '/projects',
  getParentRoute: () => AdminRoute,
} as any)
const AdminImplementationPlanRoute = AdminImplementationPlanRouteImport.update({
  id: '/implementation-plan',
  path: '/implementation-plan',
  getParentRoute: () => AdminRoute,
} as any)
const AdminContentRoute = AdminContentRouteImport.update({
  id: '/content',
  path: '/content',
  getParentRoute: () => AdminRoute,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/admin': typeof AdminRouteWithChildren
  '/dashboard': typeof DashboardRoute
  '/login': typeof LoginRoute
  '/admin/content': typeof AdminContentRoute
  '/admin/implementation-plan': typeof AdminImplementationPlanRoute
  '/admin/projects': typeof AdminProjectsRoute
  '/admin/skills': typeof AdminSkillsRoute
  '/admin/technologies': typeof AdminTechnologiesRoute
  '/admin/terminal': typeof AdminTerminalRoute
  '/admin/': typeof AdminIndexRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/dashboard': typeof DashboardRoute
  '/login': typeof LoginRoute
  '/admin/content': typeof AdminContentRoute
  '/admin/implementation-plan': typeof AdminImplementationPlanRoute
  '/admin/projects': typeof AdminProjectsRoute
  '/admin/skills': typeof AdminSkillsRoute
  '/admin/technologies': typeof AdminTechnologiesRoute
  '/admin/terminal': typeof AdminTerminalRoute
  '/admin': typeof AdminIndexRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/admin': typeof AdminRouteWithChildren
  '/dashboard': typeof DashboardRoute
  '/login': typeof LoginRoute
  '/admin/content': typeof AdminContentRoute
  '/admin/implementation-plan': typeof AdminImplementationPlanRoute
  '/admin/projects': typeof AdminProjectsRoute
  '/admin/skills': typeof AdminSkillsRoute
  '/admin/technologies': typeof AdminTechnologiesRoute
  '/admin/terminal': typeof AdminTerminalRoute
  '/admin/': typeof AdminIndexRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/admin'
    | '/dashboard'
    | '/login'
    | '/admin/content'
    | '/admin/implementation-plan'
    | '/admin/projects'
    | '/admin/skills'
    | '/admin/technologies'
    | '/admin/terminal'
    | '/admin/'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/dashboard'
    | '/login'
    | '/admin/content'
    | '/admin/implementation-plan'
    | '/admin/projects'
    | '/admin/skills'
    | '/admin/technologies'
    | '/admin/terminal'
    | '/admin'
  id:
    | '__root__'
    | '/'
    | '/admin'
    | '/dashboard'
    | '/login'
    | '/admin/content'
    | '/admin/implementation-plan'
    | '/admin/projects'
    | '/admin/skills'
    | '/admin/technologies'
    | '/admin/terminal'
    | '/admin/'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  AdminRoute: typeof AdminRouteWithChildren
  DashboardRoute: typeof DashboardRoute
  LoginRoute: typeof LoginRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/login': {
      id: '/login'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof LoginRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/dashboard': {
      id: '/dashboard'
      path: '/dashboard'
      fullPath: '/dashboard'
      preLoaderRoute: typeof DashboardRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/admin': {
      id: '/admin'
      path: '/admin'
      fullPath: '/admin'
      preLoaderRoute: typeof AdminRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/admin/': {
      id: '/admin/'
      path: '/'
      fullPath: '/admin/'
      preLoaderRoute: typeof AdminIndexRouteImport
      parentRoute: typeof AdminRoute
    }
    '/admin/terminal': {
      id: '/admin/terminal'
      path: '/terminal'
      fullPath: '/admin/terminal'
      preLoaderRoute: typeof AdminTerminalRouteImport
      parentRoute: typeof AdminRoute
    }
    '/admin/technologies': {
      id: '/admin/technologies'
      path: '/technologies'
      fullPath: '/admin/technologies'
      preLoaderRoute: typeof AdminTechnologiesRouteImport
      parentRoute: typeof AdminRoute
    }
    '/admin/skills': {
      id: '/admin/skills'
      path: '/skills'
      fullPath: '/admin/skills'
      preLoaderRoute: typeof AdminSkillsRouteImport
      parentRoute: typeof AdminRoute
    }
    '/admin/projects': {
      id: '/admin/projects'
      path: '/projects'
      fullPath: '/admin/projects'
      preLoaderRoute: typeof AdminProjectsRouteImport
      parentRoute: typeof AdminRoute
    }
    '/admin/implementation-plan': {
      id: '/admin/implementation-plan'
      path: '/implementation-plan'
      fullPath: '/admin/implementation-plan'
      preLoaderRoute: typeof AdminImplementationPlanRouteImport
      parentRoute: typeof AdminRoute
    }
    '/admin/content': {
      id: '/admin/content'
      path: '/content'
      fullPath: '/admin/content'
      preLoaderRoute: typeof AdminContentRouteImport
      parentRoute: typeof AdminRoute
    }
  }
}

interface AdminRouteChildren {
  AdminContentRoute: typeof AdminContentRoute
  AdminImplementationPlanRoute: typeof AdminImplementationPlanRoute
  AdminProjectsRoute: typeof AdminProjectsRoute
  AdminSkillsRoute: typeof AdminSkillsRoute
  AdminTechnologiesRoute: typeof AdminTechnologiesRoute
  AdminTerminalRoute: typeof AdminTerminalRoute
  AdminIndexRoute: typeof AdminIndexRoute
}

const AdminRouteChildren: AdminRouteChildren = {
  AdminContentRoute: AdminContentRoute,
  AdminImplementationPlanRoute: AdminImplementationPlanRoute,
  AdminProjectsRoute: AdminProjectsRoute,
  AdminSkillsRoute: AdminSkillsRoute,
  AdminTechnologiesRoute: AdminTechnologiesRoute,
  AdminTerminalRoute: AdminTerminalRoute,
  AdminIndexRoute: AdminIndexRoute,
}

const AdminRouteWithChildren = AdminRoute._addFileChildren(AdminRouteChildren)

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  AdminRoute: AdminRouteWithChildren,
  DashboardRoute: DashboardRoute,
  LoginRoute: LoginRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
