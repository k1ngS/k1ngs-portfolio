version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: portfolio-postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: portfolio_db
      POSTGRES_USER: portfolio_user
      POSTGRES_PASSWORD: portfolio_pass
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./apps/server/prisma/init.sql:/docker-entrypoint-initdb.d/init.sql
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U portfolio_user -d portfolio_db"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis (for caching and sessions)
  redis:
    image: redis:7-alpine
    container_name: portfolio-redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    command: redis-server --appendonly yes
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Backend Server
  server:
    build:
      context: .
      dockerfile: apps/server/Dockerfile
    container_name: portfolio-server
    restart: unless-stopped
    environment:
      NODE_ENV: production
      DATABASE_URL: postgresql://portfolio_user:portfolio_pass@postgres:5432/portfolio_db
      REDIS_URL: redis://redis:6379
      CORS_ORIGIN: http://localhost:3001
      BETTER_AUTH_SECRET: your-super-secret-key-change-in-production
      BETTER_AUTH_URL: http://localhost:3000
      PORT: 3000
      HOST: 0.0.0.0
    ports:
      - "3000:3000"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - ./apps/server/uploads:/app/uploads
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Frontend Web App
  web:
    build:
      context: .
      dockerfile: apps/web/Dockerfile
    container_name: portfolio-web
    restart: unless-stopped
    environment:
      NODE_ENV: production
      VITE_API_URL: http://localhost:3000
    ports:
      - "3001:3001"
    depends_on:
      - server
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3001"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Documentation Site
  docs:
    build:
      context: .
      dockerfile: apps/docs/Dockerfile
    container_name: portfolio-docs
    restart: unless-stopped
    ports:
      - "4321:4321"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:4321"]
      interval: 30s
      timeout: 10s
      retries: 3

volumes:
  postgres_data:
  redis_data:

networks:
  default:
    name: portfolio-network